/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CoreC(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CoreC(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CoreC(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <array>
#include <algorithm>
#include <stdexcept>


#include <unordered_map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


struct Data4
{
    char data[4];
};

struct Data8
{
    char data[8];
};

struct Data12
{
    char data[12];
};

struct Data16
{
    char data[16];
};

struct Data36
{
    char data[36];
};

struct Data64
{
    char data[64];
};


#include "Maths/math.hpp"


#include <format>

#include "csharp/dotnet_utils.hpp"

#include "audio/audio_buffer.hpp"
#include "audio/component/audio_listener.hpp"
#include "audio/component/audio_source.hpp"

#include "file/directory.hpp"
#include "file/entry.hpp"
#include "file/file.hpp"
#include "file/file_manager.hpp"

#include "input/gamepad_input.hpp"
#include "input/input.hpp"
#include "input/keyboard_input.hpp"
#include "input/mouse_input.hpp"
#include "input/time.hpp"

#include "rendering/buffer/uniform_buffer.hpp"

#include "rendering/light/directional_light.hpp"
#include "rendering/light/light.hpp"
#include "rendering/light/point_light.hpp"
#include "rendering/light/spot_light.hpp"

#include "rendering/render_systems/light_manager.hpp"
#include "rendering/render_systems/skybox_renderer.hpp"
#include "rendering/render_systems/tone_mapping.hpp"

#include "rendering/camera.hpp"
#include "rendering/frame_buffer.hpp"
#include "rendering/material.hpp"
#include "rendering/render_pass.hpp"
#include "rendering/renderer.hpp"
#include "rendering/rhi.hpp"
#include "rendering/rhi_typedef.hpp"
#include "rendering/vertex.hpp"
#include "rendering/viewport.hpp"
#include "rendering/viewport_data.hpp"
#include "rendering/plane.hpp"

#include "physics/data/collision_data.hpp"

#include "physics/component/collider.hpp"
#include "physics/component/box_collider.hpp"
#include "physics/component/capsule_collider.hpp"
#include "physics/component/mesh_collider.hpp"
#include "physics/component/sphere_collider.hpp"

#include "resource/cubemap.hpp"
#include "resource/font.hpp"
#include "resource/audio_track.hpp"
#include "resource/animation_montage.hpp"
#include "resource/model.hpp"
#include "resource/texture.hpp"
#include "resource/animation.hpp"
#include "resource/mesh.hpp"
#include "resource/resource.hpp"
#include "resource/resource_manager.hpp"
#include "resource/shader.hpp"

#include "scene/component/camera_component.hpp"
#include "scene/component/static_mesh_renderer.hpp"
#include "scene/component/skinned_mesh_renderer.hpp"
#include "scene/component/script_component.hpp"

#include "scene/component.hpp"
#include "scene/entity.hpp"
#include "scene/scene.hpp"

#include "serialization/serializer.hpp"

#include "utils/color.hpp"
#include "utils/formatter.hpp"
#include "utils/guid.hpp"
#include "utils/event.hpp"
#include "utils/list.hpp"
#include "utils/logger.hpp"
#include "utils/meta_programming.hpp"
#include "utils/pointer.hpp"
#include "utils/reference_counter.hpp"
#include "utils/ts_queue.hpp"
#include "utils/bound.hpp"
#include "utils/utils.hpp"

#include "world/scene_graph.hpp"
#include "world/skybox.hpp"
#include "world/world.hpp"

#include "application.hpp"
#include "core.hpp"
#include "screen.hpp"
#include "transform.hpp"
#include "window.hpp"


#include <memory>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ZERO_get___() {
  float jresult ;
  float result;
  
  result = (float)(1e-6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Zero_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Zero;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Pi_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Pi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiTimes2_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiTimes2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiOver2_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiOver2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiOver4_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiOver4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Deg2Rad_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Deg2Rad;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Rad2Deg_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Rad2Deg;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Sign___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Sign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Abs___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Abs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Round___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Round(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Floor___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Floor(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Ceil___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Ceil(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Modulo___(float jarg1, float jarg2) {
  float jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (float_t)Calc::Modulo(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Approach___(void * jarg1, float jarg2, float jarg3) {
  float_t *arg1 = 0 ;
  float_t arg2 ;
  float_t arg3 ;
  
  arg1 = (float_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float_t & is null", 0);
    return ;
  } 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  Calc::Approach(*arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_YoYo___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::YoYo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OnInterval___(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  result = (bool_t)Calc::OnInterval(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_IsZero__SWIG_0___(float jarg1) {
  unsigned int jresult ;
  float_t arg1 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  result = (bool_t)Calc::IsZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_IsZero__SWIG_1___(float jarg1, float jarg2) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (bool_t)Calc::IsZero(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MakeZero__SWIG_0___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::MakeZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MakeZero__SWIG_1___(float jarg1, float jarg2) {
  float jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (float_t)Calc::MakeZero(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Equals___(float jarg1, float jarg2) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (bool_t)Calc::Equals(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_minimumConsoleLevel_set___(int jarg1) {
  XnorCore::Logger::LogLevel arg1 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  XnorCore::Logger::minimumConsoleLevel = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Logger_minimumConsoleLevel_get___() {
  int jresult ;
  XnorCore::Logger::LogLevel result;
  
  result = (XnorCore::Logger::LogLevel)XnorCore::Logger::minimumConsoleLevel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_minimumFileLevel_set___(int jarg1) {
  XnorCore::Logger::LogLevel arg1 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  XnorCore::Logger::minimumFileLevel = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Logger_minimumFileLevel_get___() {
  int jresult ;
  XnorCore::Logger::LogLevel result;
  
  result = (XnorCore::Logger::LogLevel)XnorCore::Logger::minimumFileLevel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_OpenFile___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Logger::OpenFile((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_OpenDefaultFile___() {
  XnorCore::Logger::OpenDefaultFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Logger_HasFileOpen___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)XnorCore::Logger::HasFileOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_CloseFile___() {
  XnorCore::Logger::CloseFile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_Synchronize___() {
  XnorCore::Logger::Synchronize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogString___(int jarg1, const char * jarg2) {
  XnorCore::Logger::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR Log< >(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogTempDebugString___(const char * jarg1, char * jarg2, int jarg3) {
  std::string *arg1 = 0 ;
  char_t *arg2 = (char_t *) 0 ;
  int32_t arg3 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogTempDebug< >((std::string const &)*arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogDebugString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogDebug< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogInfoString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogInfo< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogWarningString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogWarning< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogErrorString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogError< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogFatalString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogFatal< >((std::string const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Guid___() {
  void * jresult ;
  XnorCore::Guid *result = 0 ;
  
  result = (XnorCore::Guid *)new XnorCore::Guid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Guid_Empty___() {
  void * jresult ;
  XnorCore::Guid result;
  
  result = XnorCore::Guid::Empty();
  jresult = new XnorCore::Guid(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Guid_New___() {
  void * jresult ;
  XnorCore::Guid result;
  
  result = XnorCore::Guid::New();
  jresult = new XnorCore::Guid(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Guid_OperatorEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Guid const *)arg1)->operator ==((XnorCore::Guid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Guid_OperatorNotEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Guid const *)arg1)->operator !=((XnorCore::Guid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Guid_FromString___(char * jarg1) {
  void * jresult ;
  char_t *arg1 = (char_t *) 0 ;
  XnorCore::Guid result;
  
  arg1 = (char_t *)jarg1; 
  result = XnorCore::Guid::FromString((char const *)arg1);
  jresult = new XnorCore::Guid(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Guid_ToString___(void * jarg1) {
  const char * jresult ;
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  result = ((XnorCore::Guid const *)arg1)->operator std::string();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Guid___(void * jarg1) {
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ComponentList___(void * jarg1) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_Empty___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = (bool_t)((XnorCore::List< XnorCore::Component * > const *)arg1)->Empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Add___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  (arg1)->Add((XnorCore::Component *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Remove___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  (arg1)->Remove((XnorCore::Component *const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_FindPosition___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  std::function< bool_t (XnorCore::Component *const *) > *arg2 = 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (std::function< bool_t (XnorCore::Component *const *) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool_t (XnorCore::Component *const *) > const & is null", 0);
    return 0;
  } 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->FindPosition((std::function< bool_t (XnorCore::Component *const *) > const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetSize___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->GetSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetCapacity___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->GetCapacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionExitEvent_Invoke___(void * jarg1, void * jarg2, void * jarg3) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  XnorCore::Collider *arg2 = (XnorCore::Collider *) 0 ;
  XnorCore::Collider *arg3 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg1; 
  arg2 = (XnorCore::Collider *)jarg2; 
  arg3 = (XnorCore::Collider *)jarg3; 
  ((XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > const *)arg1)->Invoke(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionExitEvent_Clear___(void * jarg1) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CollisionExitEvent_OperatorAddAssign___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT arg2 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT *argp2 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *result = 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg1; 
  argp2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) &(arg1)->operator +=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CollisionExitEvent_OperatorSubAssign___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT *arg2 = 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *result = 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) &(arg1)->operator -=((XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >::StdFunctionT const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CollisionExitEvent___() {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *result = 0 ;
  
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)new XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CollisionExitEvent___(void * jarg1) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionEvent_Invoke___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  XnorCore::Collider *arg2 = (XnorCore::Collider *) 0 ;
  XnorCore::Collider *arg3 = (XnorCore::Collider *) 0 ;
  XnorCore::CollisionData *arg4 = 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg1; 
  arg2 = (XnorCore::Collider *)jarg2; 
  arg3 = (XnorCore::Collider *)jarg3; 
  arg4 = (XnorCore::CollisionData *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::CollisionData const & is null", 0);
    return ;
  } 
  ((XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > const *)arg1)->Invoke(arg2,arg3,(XnorCore::CollisionData const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionEvent_Clear___(void * jarg1) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CollisionEvent_OperatorAddAssign___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT arg2 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT *argp2 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg1; 
  argp2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) &(arg1)->operator +=(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CollisionEvent_OperatorSubAssign___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT *arg2 = 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) &(arg1)->operator -=((XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >::StdFunctionT const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CollisionEvent___() {
  void * jresult ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)new XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CollisionEvent___(void * jarg1) {
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Resource___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_CreateInInterface___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_DestroyInInterface___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_Unload___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_0___(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t arg4 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool_t)(arg1)->Reload((uint8_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Reload((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool_t)(arg1)->Reload((XnorCore::Pointer< XnorCore::File > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Reload((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_4___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool_t)(arg1)->Reload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_5___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)(arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Save___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)((XnorCore::Resource const *)arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_IsLoaded___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)((XnorCore::Resource const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_IsLoadedInInterface___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)((XnorCore::Resource const *)arg1)->IsLoadedInInterface();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Resource_GetName___(void * jarg1) {
  const char * jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = ((XnorCore::Resource const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  std::string arg2 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_SetGuid___(void * jarg1, void * jarg2) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return ;
  } 
  (arg1)->SetGuid((XnorCore::Guid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Resource_GetGuid___(void * jarg1) {
  void * jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Guid *result = 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (XnorCore::Guid *) &((XnorCore::Resource const *)arg1)->GetGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Entry___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_Unload___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_Reload___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)(arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_OpenInExplorer___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  ((XnorCore::Entry const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entry_GetPath___(void * jarg1) {
  void * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::filesystem::path *result = 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (std::filesystem::path *) &((XnorCore::Entry const *)arg1)->GetPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entry_GetPathString___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = ((XnorCore::Entry const *)arg1)->GetPathString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entry_GetName___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = ((XnorCore::Entry const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_GetLoaded___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)((XnorCore::Entry const *)arg1)->GetLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_SetParent___(void * jarg1, void * jarg2) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  XnorCore::Pointer< XnorCore::Directory > *arg2 = 0 ;
  std::unique_ptr< XnorCore::Pointer< XnorCore::Directory > > rvrdeleter2 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Directory > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Directory > && is null", 0);
    return ;
  }
  rvrdeleter2.reset(arg2); 
  (arg1)->SetParent((XnorCore::Pointer< XnorCore::Directory > &&)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entry_GetParent___(void * jarg1) {
  void * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (arg1)->GetParent();
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Directory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  std::unique_ptr< std::filesystem::path > rvrdeleter1 ;
  XnorCore::Directory *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (XnorCore::Directory *)new XnorCore::Directory((std::filesystem::path &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Directory___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Directory_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_Unload___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_OpenInExplorer___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  ((XnorCore::Directory const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildEntries___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::Entry > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::Entry > > *) &((XnorCore::Directory const *)arg1)->GetChildEntries();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildFiles___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::File > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::File > > *) &((XnorCore::Directory const *)arg1)->GetChildFiles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildDirectories___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::Directory > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::Directory > > *) &((XnorCore::Directory const *)arg1)->GetChildDirectories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_File___(void * jarg1) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  std::unique_ptr< std::filesystem::path > rvrdeleter1 ;
  XnorCore::File *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (XnorCore::File *)new XnorCore::File((std::filesystem::path &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_File___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_File_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_Unload___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_OpenInExplorer___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  ((XnorCore::File const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_OpenFile___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  ((XnorCore::File const *)arg1)->OpenFile();
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_File_GetFileType___(void * jarg1) {
  int jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  XnorCore::File::Type result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (XnorCore::File::Type)((XnorCore::File const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_Delete___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  ((XnorCore::File const *)arg1)->Delete();
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_File_GetNameNoExtension___(void * jarg1) {
  const char * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetNameNoExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_File_GetPathNoExtension___(void * jarg1) {
  const char * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetPathNoExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_File_GetExtension___(void * jarg1) {
  const char * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_XnorfCore_File_GetSize___(void * jarg1) {
  long long jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  int64_t result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (int64_t)((XnorCore::File const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_File_GetResource___(void * jarg1) {
  void * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Resource > > result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetResource();
  jresult = new XnorCore::Pointer< XnorCore::Resource >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_Add___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::File > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::Add(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::File >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_Load___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::File > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::Load(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::File >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_AddDirectory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::AddDirectory(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_LoadDirectory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::LoadDirectory(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_FileManager_Contains___(void * jarg1) {
  unsigned int jresult ;
  std::filesystem::path *arg1 = 0 ;
  bool_t result;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool_t)XnorCore::FileManager::Contains((std::filesystem::path const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Rename__SWIG_0___(void * jarg1, void * jarg2) {
  std::filesystem::path *arg1 = 0 ;
  std::filesystem::path *arg2 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Rename((std::filesystem::path const &)*arg1,(std::filesystem::path const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Rename__SWIG_1___(void * jarg1, void * jarg2) {
  XnorCore::Pointer< XnorCore::Entry > *arg1 = 0 ;
  std::filesystem::path *arg2 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Entry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Entry > const & is null", 0);
    return ;
  } 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Rename((XnorCore::Pointer< XnorCore::Entry > const &)*arg1,(std::filesystem::path const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Unload__SWIG_0___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Unload((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Unload__SWIG_1___(void * jarg1) {
  XnorCore::Pointer< XnorCore::Entry > *arg1 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Entry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Entry > const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Unload((XnorCore::Pointer< XnorCore::Entry > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_UnloadAll___() {
  XnorCore::FileManager::UnloadAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vertex_MaxBoneWeight_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::Vertex::MaxBoneWeight;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_position_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Vertex_position_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_normal_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Vertex_normal_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_textureCoord_set___(void * jarg1,  Vector2*  jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->textureCoord = *arg2;
}


SWIGEXPORT  Vector2*  SWIGSTDCALL CSharp_XnorfCore_Vertex_textureCoord_get___(void * jarg1) {
  Vector2*  jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (Vector2 *)& ((arg1)->textureCoord);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_tangent_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->tangent = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Vertex_tangent_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->tangent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_bitangent_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->bitangent = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Vertex_bitangent_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (Vector3 *)& ((arg1)->bitangent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_boneIndices_set___(void * jarg1, void * jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  float_t *arg2 = (float_t *) (float_t *)0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = (float_t *)jarg2; 
  {
    size_t ii;
    float_t *b = (float_t *) arg1->boneIndices;
    for (ii = 0; ii < (size_t)XnorCore::Vertex::MaxBoneWeight; ii++) b[ii] = *((float_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vertex_boneIndices_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  float_t *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (float_t *)(float_t *) ((arg1)->boneIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vertex_boneWeight_set___(void * jarg1, void * jarg2) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  float_t *arg2 = (float_t *) (float_t *)0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  arg2 = (float_t *)jarg2; 
  {
    size_t ii;
    float_t *b = (float_t *) arg1->boneWeight;
    for (ii = 0; ii < (size_t)XnorCore::Vertex::MaxBoneWeight; ii++) b[ii] = *((float_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vertex_boneWeight_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  float_t *result = 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  result = (float_t *)(float_t *) ((arg1)->boneWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vertex___() {
  void * jresult ;
  XnorCore::Vertex *result = 0 ;
  
  result = (XnorCore::Vertex *)new XnorCore::Vertex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Vertex___(void * jarg1) {
  XnorCore::Vertex *arg1 = (XnorCore::Vertex *) 0 ;
  
  arg1 = (XnorCore::Vertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxSpotLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxSpotLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxPointLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxPointLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxDirectionalLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxDirectionalLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxBones_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxBones;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_DirectionalCascadeLevel_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::DirectionalCascadeLevel;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_DirectionalCascadeLevelAllocation_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::DirectionalCascadeLevelAllocation;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_enableCullFace_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableCullFace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_enableCullFace_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (bool_t) ((arg1)->enableCullFace);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_cullFace_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::CullFace::CullFace arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = (XnorCore::CullFace::CullFace)jarg2; 
  if (arg1) (arg1)->cullFace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_cullFace_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::CullFace::CullFace result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (XnorCore::CullFace::CullFace) ((arg1)->cullFace);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_frontFace_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::FrontFace::FrontFace arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = (XnorCore::FrontFace::FrontFace)jarg2; 
  if (arg1) (arg1)->frontFace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_frontFace_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::FrontFace::FrontFace result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (XnorCore::FrontFace::FrontFace) ((arg1)->frontFace);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderProgramCullInfo___() {
  void * jresult ;
  XnorCore::ShaderProgramCullInfo *result = 0 ;
  
  result = (XnorCore::ShaderProgramCullInfo *)new XnorCore::ShaderProgramCullInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderProgramCullInfo___(void * jarg1) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_code_set___(void * jarg1, const char * jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->code = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_ShaderCode_code_get___(void * jarg1) {
  const char * jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (std::string *) & ((arg1)->code);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_codeLength_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->codeLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCode_codeLength_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (int32_t) ((arg1)->codeLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_type_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  XnorCore::ShaderType::ShaderType arg2 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  arg2 = (XnorCore::ShaderType::ShaderType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCode_type_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  XnorCore::ShaderType::ShaderType result;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (XnorCore::ShaderType::ShaderType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderCode___() {
  void * jresult ;
  XnorCore::ShaderCode *result = 0 ;
  
  result = (XnorCore::ShaderCode *)new XnorCore::ShaderCode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderCode___(void * jarg1) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_attachment_set___(void * jarg1, int jarg2) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  XnorCore::Attachment::Attachment arg2 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  arg2 = (XnorCore::Attachment::Attachment)jarg2; 
  if (arg1) (arg1)->attachment = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_attachment_get___(void * jarg1) {
  int jresult ;
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  XnorCore::Attachment::Attachment result;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  result = (XnorCore::Attachment::Attachment) ((arg1)->attachment);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_isDrawingOn_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDrawingOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_isDrawingOn_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  result = (bool_t) ((arg1)->isDrawingOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_RenderTargetInfo___() {
  void * jresult ;
  XnorCore::RenderTargetInfo *result = 0 ;
  
  result = (XnorCore::RenderTargetInfo *)new XnorCore::RenderTargetInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_RenderTargetInfo___(void * jarg1) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_textureType_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureType::TextureType arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureType::TextureType)jarg2; 
  if (arg1) (arg1)->textureType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_textureType_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureType::TextureType result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureType::TextureType) ((arg1)->textureType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_datas_set___(void * jarg1, void * jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  std::vector< void * > *arg2 = (std::vector< void * > *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (std::vector< void * > *)jarg2; 
  if (arg1) (arg1)->datas = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_datas_get___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  std::vector< void * > *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (std::vector< void * > *)& ((arg1)->datas);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_mipMaplevel_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->mipMaplevel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_mipMaplevel_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (uint32_t) ((arg1)->mipMaplevel);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_depth_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->depth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_depth_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (uint32_t) ((arg1)->depth);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_size_set___(void * jarg1,  Vector2i*  jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT  Vector2i*  SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_size_get___(void * jarg1) {
  Vector2i*  jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_filtering_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureFiltering::TextureFiltering)jarg2; 
  if (arg1) (arg1)->filtering = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_filtering_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureFiltering::TextureFiltering) ((arg1)->filtering);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_wrapping_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureWrapping::TextureWrapping)jarg2; 
  if (arg1) (arg1)->wrapping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_wrapping_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureWrapping::TextureWrapping) ((arg1)->wrapping);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_format_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureFormat::TextureFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_format_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureFormat::TextureFormat) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_internalFormat_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg2; 
  if (arg1) (arg1)->internalFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_internalFormat_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureInternalFormat::TextureInternalFormat) ((arg1)->internalFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_dataType_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::DataType::DataType arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::DataType::DataType)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_dataType_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::DataType::DataType result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::DataType::DataType) ((arg1)->dataType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_borderColor_set___(void * jarg1, void * jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  float_t *arg2 = (float_t *) (float_t *)0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (float_t *)jarg2; 
  {
    size_t ii;
    float_t *b = (float_t *) arg1->borderColor;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_borderColor_get___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  float_t *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (float_t *)(float_t *) ((arg1)->borderColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_TextureCreateInfo___() {
  void * jresult ;
  XnorCore::TextureCreateInfo *result = 0 ;
  
  result = (XnorCore::TextureCreateInfo *)new XnorCore::TextureCreateInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_TextureCreateInfo___(void * jarg1) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_view_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->view = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_view_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->view);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_projection_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->projection = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_projection_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->projection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_cameraPos_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->cameraPos = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_cameraPos_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Vector3 *)& ((arg1)->cameraPos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_near_set___(void * jarg1, float jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->near = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_near_get___(void * jarg1) {
  float jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (float_t) ((arg1)->near);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_far_set___(void * jarg1, float jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->far = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_far_get___(void * jarg1) {
  float jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (float_t) ((arg1)->far);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CameraUniformData___() {
  void * jresult ;
  XnorCore::CameraUniformData *result = 0 ;
  
  result = (XnorCore::CameraUniformData *)new XnorCore::CameraUniformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CameraUniformData___(void * jarg1) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_model_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->model = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_model_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->model);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_normalInvertMatrix_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->normalInvertMatrix = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_normalInvertMatrix_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->normalInvertMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_meshRenderIndex_set___(void * jarg1, unsigned long long jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->meshRenderIndex = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_meshRenderIndex_get___(void * jarg1) {
  unsigned long long jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  uint64_t result;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (uint64_t) ((arg1)->meshRenderIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ModelUniformData___() {
  void * jresult ;
  XnorCore::ModelUniformData *result = 0 ;
  
  result = (XnorCore::ModelUniformData *)new XnorCore::ModelUniformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ModelUniformData___(void * jarg1) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuUniform_type_set___(void * jarg1, int jarg2) {
  XnorCore::GpuUniform *arg1 = (XnorCore::GpuUniform *) 0 ;
  XnorCore::UniformType::UniformType arg2 ;
  
  arg1 = (XnorCore::GpuUniform *)jarg1; 
  arg2 = (XnorCore::UniformType::UniformType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_GpuUniform_type_get___(void * jarg1) {
  int jresult ;
  XnorCore::GpuUniform *arg1 = (XnorCore::GpuUniform *) 0 ;
  XnorCore::UniformType::UniformType result;
  
  arg1 = (XnorCore::GpuUniform *)jarg1; 
  result = (XnorCore::UniformType::UniformType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuUniform_shaderKey_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuUniform *arg1 = (XnorCore::GpuUniform *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuUniform *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->shaderKey = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuUniform_shaderKey_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuUniform *arg1 = (XnorCore::GpuUniform *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuUniform *)jarg1; 
  result = (uint32_t) ((arg1)->shaderKey);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_GpuUniform___() {
  void * jresult ;
  XnorCore::GpuUniform *result = 0 ;
  
  result = (XnorCore::GpuUniform *)new XnorCore::GpuUniform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_GpuUniform___(void * jarg1) {
  XnorCore::GpuUniform *arg1 = (XnorCore::GpuUniform *) 0 ;
  
  arg1 = (XnorCore::GpuUniform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_isBlending_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBlending = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_isBlending_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (bool_t) ((arg1)->isBlending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_sValue_set___(void * jarg1, int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = (XnorCore::BlendValue::BlendValue)jarg2; 
  if (arg1) (arg1)->sValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_sValue_get___(void * jarg1) {
  int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (XnorCore::BlendValue::BlendValue) ((arg1)->sValue);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_dValue_set___(void * jarg1, int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = (XnorCore::BlendValue::BlendValue)jarg2; 
  if (arg1) (arg1)->dValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_dValue_get___(void * jarg1) {
  int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (XnorCore::BlendValue::BlendValue) ((arg1)->dValue);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_blendEquation_set___(void * jarg1, int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendEquation::BlendEquation arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = (XnorCore::BlendEquation::BlendEquation)jarg2; 
  if (arg1) (arg1)->blendEquation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_blendEquation_get___(void * jarg1) {
  int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendEquation::BlendEquation result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (XnorCore::BlendEquation::BlendEquation) ((arg1)->blendEquation);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_BlendFunction___() {
  void * jresult ;
  XnorCore::BlendFunction *result = 0 ;
  
  result = (XnorCore::BlendFunction *)new XnorCore::BlendFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_BlendFunction___(void * jarg1) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_depthFunction_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::DepthFunction::DepthFunction arg2 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::DepthFunction::DepthFunction)jarg2; 
  if (arg1) (arg1)->depthFunction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_depthFunction_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::DepthFunction::DepthFunction result;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::DepthFunction::DepthFunction) ((arg1)->depthFunction);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_blendFunction_set___(void * jarg1, void * jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::BlendFunction *arg2 = (XnorCore::BlendFunction *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::BlendFunction *)jarg2; 
  if (arg1) (arg1)->blendFunction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_blendFunction_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::BlendFunction *result = 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::BlendFunction *)& ((arg1)->blendFunction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_shaderProgramCullInfo_set___(void * jarg1, void * jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::ShaderProgramCullInfo *arg2 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::ShaderProgramCullInfo *)jarg2; 
  if (arg1) (arg1)->shaderProgramCullInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_shaderProgramCullInfo_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::ShaderProgramCullInfo *result = 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::ShaderProgramCullInfo *)& ((arg1)->shaderProgramCullInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderCreateInfo___() {
  void * jresult ;
  XnorCore::ShaderCreateInfo *result = 0 ;
  
  result = (XnorCore::ShaderCreateInfo *)new XnorCore::ShaderCreateInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderCreateInfo___(void * jarg1) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_color_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_PointLightData_color_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PointLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_position_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_PointLightData_position_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_radius_set___(void * jarg1, float jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PointLightData_radius_get___(void * jarg1) {
  float jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (float_t) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_isCastingShadow_set___(void * jarg1, int jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->isCastingShadow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_PointLightData_isCastingShadow_get___(void * jarg1) {
  int jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (int32_t) ((arg1)->isCastingShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_PointLightData___() {
  void * jresult ;
  XnorCore::PointLightData *result = 0 ;
  
  result = (XnorCore::PointLightData *)new XnorCore::PointLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_PointLightData___(void * jarg1) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_color_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_SpotLightData_color_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_position_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_SpotLightData_position_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_cutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->cutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_cutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->cutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_direction_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_SpotLightData_direction_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_outerCutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->outerCutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_outerCutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->outerCutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_isCastingShadow_set___(void * jarg1, int jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->isCastingShadow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_SpotLightData_isCastingShadow_get___(void * jarg1) {
  int jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (int32_t) ((arg1)->isCastingShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SpotLightData___() {
  void * jresult ;
  XnorCore::SpotLightData *result = 0 ;
  
  result = (XnorCore::SpotLightData *)new XnorCore::SpotLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SpotLightData___(void * jarg1) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_color_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_color_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_direction_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_direction_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->direction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_isDirlightCastingShadow_set___(void * jarg1, int jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->isDirlightCastingShadow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_isDirlightCastingShadow_get___(void * jarg1) {
  int jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (int32_t) ((arg1)->isDirlightCastingShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_cascadeCount_set___(void * jarg1, int jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->cascadeCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_cascadeCount_get___(void * jarg1) {
  int jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (int32_t) ((arg1)->cascadeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_cascadePlaneDistance_set___(void * jarg1, void * jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t *arg2 = (float_t *) (float_t *)0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (float_t *)jarg2; 
  {
    size_t ii;
    float_t *b = (float_t *) arg1->cascadePlaneDistance;
    for (ii = 0; ii < (size_t)XnorCore::DirectionalCascadeLevel; ii++) b[ii] = *((float_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_cascadePlaneDistance_get___(void * jarg1) {
  void * jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (float_t *)(float_t *) ((arg1)->cascadePlaneDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_DirectionalLightData___() {
  void * jresult ;
  XnorCore::DirectionalLightData *result = 0 ;
  
  result = (XnorCore::DirectionalLightData *)new XnorCore::DirectionalLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_DirectionalLightData___(void * jarg1) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfPointLight_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nbrOfPointLight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfPointLight_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->nbrOfPointLight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfSpotLight_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nbrOfSpotLight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfSpotLight_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->nbrOfSpotLight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_pointLightData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::PointLightData *arg2 = (XnorCore::PointLightData *) (XnorCore::PointLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::PointLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::PointLightData *b = (XnorCore::PointLightData *) arg1->pointLightData;
    for (ii = 0; ii < (size_t)XnorCore::MaxPointLights; ii++) b[ii] = *((XnorCore::PointLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_pointLightData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::PointLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::PointLightData *)(XnorCore::PointLightData *) ((arg1)->pointLightData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_spotLightData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::SpotLightData *arg2 = (XnorCore::SpotLightData *) (XnorCore::SpotLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::SpotLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::SpotLightData *b = (XnorCore::SpotLightData *) arg1->spotLightData;
    for (ii = 0; ii < (size_t)XnorCore::MaxSpotLights; ii++) b[ii] = *((XnorCore::SpotLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_spotLightData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::SpotLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::SpotLightData *)(XnorCore::SpotLightData *) ((arg1)->spotLightData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_directionalData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::DirectionalLightData *arg2 = (XnorCore::DirectionalLightData *) (XnorCore::DirectionalLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::DirectionalLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::DirectionalLightData *b = (XnorCore::DirectionalLightData *) arg1->directionalData;
    for (ii = 0; ii < (size_t)XnorCore::MaxDirectionalLights; ii++) b[ii] = *((XnorCore::DirectionalLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_directionalData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::DirectionalLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::DirectionalLightData *)(XnorCore::DirectionalLightData *) ((arg1)->directionalData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_GpuLightData___() {
  void * jresult ;
  XnorCore::GpuLightData *result = 0 ;
  
  result = (XnorCore::GpuLightData *)new XnorCore::GpuLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_GpuLightData___(void * jarg1) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_albedoColor_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->albedoColor = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_MaterialData_albedoColor_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (Vector3 *)& ((arg1)->albedoColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAlbedoMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasAlbedoMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAlbedoMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasAlbedoMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissiveColor_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->emissiveColor = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissiveColor_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (Vector3 *)& ((arg1)->emissiveColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissive_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->emissive = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissive_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->emissive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasMetallicMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasMetallicMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasMetallicMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasMetallicMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_metallic_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->metallic = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_metallic_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->metallic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasRoughnessMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasRoughnessMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasRoughnessMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasRoughnessMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_roughness_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->roughness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_roughness_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->roughness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAmbientOcclusionMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasAmbientOcclusionMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAmbientOcclusionMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasAmbientOcclusionMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_ambientOcclusion_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->ambientOcclusion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_ambientOcclusion_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->ambientOcclusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasNormalMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasNormalMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasNormalMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasNormalMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_reflectance_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->reflectance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_reflectance_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->reflectance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_MaterialData___() {
  void * jresult ;
  XnorCore::MaterialData *result = 0 ;
  
  result = (XnorCore::MaterialData *)new XnorCore::MaterialData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_MaterialData___(void * jarg1) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_frameBuffer_set___(void * jarg1, void * jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::Framebuffer *arg2 = (XnorCore::Framebuffer *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (XnorCore::Framebuffer *)jarg2; 
  if (arg1) (arg1)->frameBuffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_frameBuffer_get___(void * jarg1) {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::Framebuffer *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (XnorCore::Framebuffer *) ((arg1)->frameBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaOffset_set___(void * jarg1,  Vector2i*  jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->renderAreaOffset = *arg2;
}


SWIGEXPORT  Vector2i*  SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaOffset_get___(void * jarg1) {
  Vector2i*  jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->renderAreaOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaExtent_set___(void * jarg1,  Vector2i*  jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->renderAreaExtent = *arg2;
}


SWIGEXPORT  Vector2i*  SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaExtent_get___(void * jarg1) {
  Vector2i*  jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->renderAreaExtent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearBufferFlags_set___(void * jarg1, int jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::BufferFlag::BufferFlag arg2 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (XnorCore::BufferFlag::BufferFlag)jarg2; 
  if (arg1) (arg1)->clearBufferFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearBufferFlags_get___(void * jarg1) {
  int jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::BufferFlag::BufferFlag result;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (XnorCore::BufferFlag::BufferFlag) ((arg1)->clearBufferFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearColor_set___(void * jarg1,  Vector4*  jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->clearColor = *arg2;
}


SWIGEXPORT  Vector4*  SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearColor_get___(void * jarg1) {
  Vector4*  jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector4 *)& ((arg1)->clearColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_RenderPassBeginInfo___() {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *result = 0 ;
  
  result = (XnorCore::RenderPassBeginInfo *)new XnorCore::RenderPassBeginInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_RenderPassBeginInfo___(void * jarg1) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_index_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_index_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result = (uint32_t) ((arg1)->index);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_size_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_size_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result =  ((arg1)->size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_bufferDatatype_set___(void * jarg1, int jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  XnorCore::DataType::DataType arg2 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = (XnorCore::DataType::DataType)jarg2; 
  if (arg1) (arg1)->bufferDatatype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_bufferDatatype_get___(void * jarg1) {
  int jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  XnorCore::DataType::DataType result;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result = (XnorCore::DataType::DataType) ((arg1)->bufferDatatype);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_normalized_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->normalized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_normalized_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result = (bool_t) ((arg1)->normalized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_stride_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_stride_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result =  ((arg1)->stride);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_pointer_set___(void * jarg1, void * jarg2) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pointer = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_VertexAttributePointer_pointer_get___(void * jarg1) {
  void * jresult ;
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  void *result = 0 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  result = (void *) ((arg1)->pointer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_VertexAttributePointer___() {
  void * jresult ;
  XnorCore::VertexAttributePointer *result = 0 ;
  
  result = (XnorCore::VertexAttributePointer *)new XnorCore::VertexAttributePointer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_VertexAttributePointer___(void * jarg1) {
  XnorCore::VertexAttributePointer *arg1 = (XnorCore::VertexAttributePointer *) 0 ;
  
  arg1 = (XnorCore::VertexAttributePointer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AttributeDivisor_index_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::AttributeDivisor *arg1 = (XnorCore::AttributeDivisor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::AttributeDivisor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AttributeDivisor_index_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::AttributeDivisor *arg1 = (XnorCore::AttributeDivisor *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::AttributeDivisor *)jarg1; 
  result = (uint32_t) ((arg1)->index);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AttributeDivisor_divisor_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::AttributeDivisor *arg1 = (XnorCore::AttributeDivisor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::AttributeDivisor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->divisor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AttributeDivisor_divisor_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::AttributeDivisor *arg1 = (XnorCore::AttributeDivisor *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::AttributeDivisor *)jarg1; 
  result = (uint32_t) ((arg1)->divisor);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AttributeDivisor___() {
  void * jresult ;
  XnorCore::AttributeDivisor *result = 0 ;
  
  result = (XnorCore::AttributeDivisor *)new XnorCore::AttributeDivisor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_AttributeDivisor___(void * jarg1) {
  XnorCore::AttributeDivisor *arg1 = (XnorCore::AttributeDivisor *) 0 ;
  
  arg1 = (XnorCore::AttributeDivisor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributeBinding_attribIndex_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributeBinding *arg1 = (XnorCore::VertexAttributeBinding *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributeBinding *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->attribIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributeBinding_attribIndex_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributeBinding *arg1 = (XnorCore::VertexAttributeBinding *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttributeBinding *)jarg1; 
  result = (uint32_t) ((arg1)->attribIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttributeBinding_bindingIndex_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttributeBinding *arg1 = (XnorCore::VertexAttributeBinding *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttributeBinding *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bindingIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttributeBinding_bindingIndex_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttributeBinding *arg1 = (XnorCore::VertexAttributeBinding *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttributeBinding *)jarg1; 
  result = (uint32_t) ((arg1)->bindingIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_VertexAttributeBinding___() {
  void * jresult ;
  XnorCore::VertexAttributeBinding *result = 0 ;
  
  result = (XnorCore::VertexAttributeBinding *)new XnorCore::VertexAttributeBinding();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_VertexAttributeBinding___(void * jarg1) {
  XnorCore::VertexAttributeBinding *arg1 = (XnorCore::VertexAttributeBinding *) 0 ;
  
  arg1 = (XnorCore::VertexAttributeBinding *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_attribIndex_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->attribIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_attribIndex_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  result = (uint32_t) ((arg1)->attribIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_size_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_size_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  result = (uint32_t) ((arg1)->size);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_type_set___(void * jarg1, int jarg2) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  XnorCore::DataType::DataType arg2 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  arg2 = (XnorCore::DataType::DataType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_type_get___(void * jarg1) {
  int jresult ;
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  XnorCore::DataType::DataType result;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  result = (XnorCore::DataType::DataType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_normalized_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->normalized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_normalized_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  result = (bool_t) ((arg1)->normalized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_relativeOffset_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->relativeOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VertexAttribFormat_relativeOffset_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  result = (uint32_t) ((arg1)->relativeOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_VertexAttribFormat___() {
  void * jresult ;
  XnorCore::VertexAttribFormat *result = 0 ;
  
  result = (XnorCore::VertexAttribFormat *)new XnorCore::VertexAttribFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_VertexAttribFormat___(void * jarg1) {
  XnorCore::VertexAttribFormat *arg1 = (XnorCore::VertexAttribFormat *) 0 ;
  
  arg1 = (XnorCore::VertexAttribFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttributeBindings_set___(void * jarg1, void * jarg2) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  XnorCore::VertexAttributeBinding *arg2 = (XnorCore::VertexAttributeBinding *) 0 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  arg2 = (XnorCore::VertexAttributeBinding *)jarg2; 
  if (arg1) (arg1)->vertexAttributeBindings = (XnorCore::VertexAttributeBinding const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttributeBindings_get___(void * jarg1) {
  void * jresult ;
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  XnorCore::VertexAttributeBinding *result = 0 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  result = (XnorCore::VertexAttributeBinding *) ((arg1)->vertexAttributeBindings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttributeBindingSize_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->vertexAttributeBindingSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttributeBindingSize_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  result =  ((arg1)->vertexAttributeBindingSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttribFormats_set___(void * jarg1, void * jarg2) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  XnorCore::VertexAttribFormat *arg2 = (XnorCore::VertexAttribFormat *) 0 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  arg2 = (XnorCore::VertexAttribFormat *)jarg2; 
  if (arg1) (arg1)->vertexAttribFormats = (XnorCore::VertexAttribFormat const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttribFormats_get___(void * jarg1) {
  void * jresult ;
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  XnorCore::VertexAttribFormat *result = 0 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  result = (XnorCore::VertexAttribFormat *) ((arg1)->vertexAttribFormats);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttribFormatsSize_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->vertexAttribFormatsSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vertexAttribFormatsSize_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  result =  ((arg1)->vertexAttribFormatsSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vboId_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vboId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_VaoDescriptor_vboId_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  result = (uint32_t) ((arg1)->vboId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_VaoDescriptor___() {
  void * jresult ;
  XnorCore::VaoDescriptor *result = 0 ;
  
  result = (XnorCore::VaoDescriptor *)new XnorCore::VaoDescriptor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_VaoDescriptor___(void * jarg1) {
  XnorCore::VaoDescriptor *arg1 = (XnorCore::VaoDescriptor *) 0 ;
  
  arg1 = (XnorCore::VaoDescriptor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Cubemap__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::array< std::string,6 > *arg1 = 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (std::array< std::string,6 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< std::string,6 > const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Cubemap *)new XnorCore::Cubemap((std::array< std::string,6 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Cubemap__SWIG_1___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::TextureCreateInfo const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Cubemap *)new XnorCore::Cubemap((XnorCore::TextureCreateInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Cubemap___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_CreateInInterface___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_DestroyInInterface___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_Unload___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_BindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Cubemap const *)arg1)->BindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_UnBindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Cubemap const *)arg1)->UnBindTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Cubemap_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  result = (uint32_t)((XnorCore::Cubemap const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT  Data8  SWIGSTDCALL CSharp_XnorfCore_Cubemap_GetSize___(void * jarg1) {
  Data8  jresult ;
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  Vector2i result;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  result = ((XnorCore::Cubemap const *)arg1)->GetSize();
  jresult = *(Data8*) &result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_desiredChannels_set___(void * jarg1, int jarg2) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->desiredChannels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_desiredChannels_get___(void * jarg1) {
  int jresult ;
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  result = (int32_t) ((arg1)->desiredChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_flipVertically_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->flipVertically = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_flipVertically_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  result = (bool_t) ((arg1)->flipVertically);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture_LoadOptions___() {
  void * jresult ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  result = (XnorCore::Texture::LoadOptions *)new XnorCore::Texture::LoadOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Texture_LoadOptions___(void * jarg1) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_defaultLoadOptions_set___(void * jarg1) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  XnorCore::Texture::defaultLoadOptions = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_defaultLoadOptions_get___() {
  void * jresult ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  result = (XnorCore::Texture::LoadOptions *)&XnorCore::Texture::defaultLoadOptions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,4 > *result = 0 ;
  
  result = (std::array< char_t const *,4 > *)&XnorCore::Texture::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_loadData_set___(void * jarg1, void * jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Texture::LoadOptions *arg2 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (XnorCore::Texture::LoadOptions *)jarg2; 
  if (arg1) (arg1)->loadData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_loadData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::Texture::LoadOptions *)& ((arg1)->loadData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_0___() {
  void * jresult ;
  XnorCore::Texture *result = 0 ;
  
  result = (XnorCore::Texture *)new XnorCore::Texture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Texture *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Texture *)new XnorCore::Texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_2___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = 0 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::TextureCreateInfo const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Texture *)new XnorCore::Texture((XnorCore::TextureCreateInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_3___(int jarg1,  Data8  jarg2, int jarg3) {
  void * jresult ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg1 ;
  Vector2i arg2 ;
  XnorCore::TextureFormat::TextureFormat arg3 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg1; 
  arg2 = *(Vector2i*) &jarg2; 
  arg3 = (XnorCore::TextureFormat::TextureFormat)jarg3; 
  result = (XnorCore::Texture *)new XnorCore::Texture(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_4___(int jarg1,  Data8  jarg2) {
  void * jresult ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg1 ;
  Vector2i arg2 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg1; 
  arg2 = *(Vector2i*) &jarg2; 
  result = (XnorCore::Texture *)new XnorCore::Texture(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Texture___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_CreateInInterface___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_DestroyInInterface___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_Unload___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_SetIsEmbedded___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->SetIsEmbedded();
}


SWIGEXPORT  Data8  SWIGSTDCALL CSharp_XnorfCore_Texture_GetSize___(void * jarg1) {
  Data8  jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  Vector2i result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = ((XnorCore::Texture const *)arg1)->GetSize();
  jresult = *(Data8*) &result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetDataChannels___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (int32_t)((XnorCore::Texture const *)arg1)->GetDataChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetChannels___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (int32_t)((XnorCore::Texture const *)arg1)->GetChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_BindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Texture const *)arg1)->BindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_UnbindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Texture const *)arg1)->UnbindTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (uint32_t)((XnorCore::Texture const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureFiltering___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureFiltering::TextureFiltering)((XnorCore::Texture const *)arg1)->GetTextureFiltering();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureWrapping___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureWrapping::TextureWrapping)((XnorCore::Texture const *)arg1)->GetTextureWrapping();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetInternalFormat___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureInternalFormat::TextureInternalFormat)((XnorCore::Texture const *)arg1)->GetInternalFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureFormat___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureFormat::TextureFormat result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureFormat::TextureFormat)((XnorCore::Texture const *)arg1)->GetTextureFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_Save___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (bool_t)((XnorCore::Texture const *)arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Font_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,1 > *result = 0 ;
  
  result = (std::array< char_t const *,1 > *)&XnorCore::Font::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_Character_texture_set___(void * jarg1, void * jarg2) {
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  XnorCore::Texture *arg2 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  arg2 = (XnorCore::Texture *)jarg2; 
  if (arg1) (arg1)->texture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Font_Character_texture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  result = (XnorCore::Texture *) ((arg1)->texture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_Character_size_set___(void * jarg1,  Vector2i*  jarg2) {
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT  Vector2i*  SWIGSTDCALL CSharp_XnorfCore_Font_Character_size_get___(void * jarg1) {
  Vector2i*  jresult ;
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  result = (Vector2i *)& ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_Character_bearing_set___(void * jarg1,  Vector2i*  jarg2) {
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->bearing = *arg2;
}


SWIGEXPORT  Vector2i*  SWIGSTDCALL CSharp_XnorfCore_Font_Character_bearing_get___(void * jarg1) {
  Vector2i*  jresult ;
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  result = (Vector2i *)& ((arg1)->bearing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_Character_advance_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->advance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Font_Character_advance_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  result = (uint32_t) ((arg1)->advance);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Font_Character___() {
  void * jresult ;
  XnorCore::Font::Character *result = 0 ;
  
  result = (XnorCore::Font::Character *)new XnorCore::Font::Character();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Font_Character___(void * jarg1) {
  XnorCore::Font::Character *arg1 = (XnorCore::Font::Character *) 0 ;
  
  arg1 = (XnorCore::Font::Character *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Font__SWIG_0___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Font *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Font *)new XnorCore::Font(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Font_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Font *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Font_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Font *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Font___(void * jarg1) {
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  
  arg1 = (XnorCore::Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Font__SWIG_1___() {
  void * jresult ;
  XnorCore::Font *result = 0 ;
  
  result = (XnorCore::Font *)new XnorCore::Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_CreateInInterface___(void * jarg1) {
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  
  arg1 = (XnorCore::Font *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Font_DestroyInInterface___(void * jarg1) {
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  
  arg1 = (XnorCore::Font *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Font_GetGlyphByChar___(void * jarg1, char jarg2) {
  void * jresult ;
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  char_t arg2 ;
  XnorCore::Font::Character *result = 0 ;
  
  arg1 = (XnorCore::Font *)jarg1; 
  arg2 = (char_t)jarg2; 
  result = (XnorCore::Font::Character *) &((XnorCore::Font const *)arg1)->GetGlyphByChar(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_WorldMatrix_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->worldMatrix = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_Transform_WorldMatrix_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Matrix *)& ((arg1)->worldMatrix);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Transform_GetPosition___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetPosition___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetPosition((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetPositionX___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetPositionX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetPositionY___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetPositionY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetPositionZ___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetPositionZ(arg2);
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Transform_GetRotationEulerAngle___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetRotationEulerAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationEulerAngle___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetRotationEulerAngle((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationEulerAngleX___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationEulerAngleX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationEulerAngleY___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationEulerAngleY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationEulerAngleZ___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationEulerAngleZ(arg2);
}


SWIGEXPORT  Quaternion*  SWIGSTDCALL CSharp_XnorfCore_Transform_GetRotation___(void * jarg1) {
  Quaternion*  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Quaternion *) &((XnorCore::Transform const *)arg1)->GetRotation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotation___(void * jarg1,  Quaternion*  jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Quaternion *arg2 = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetRotation((Quaternion const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationX___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationY___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationZ___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationZ(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationW___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetRotationW(arg2);
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Transform_GetScale___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetScale___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = jarg2; 
  (arg1)->SetScale((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetScaleX___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetScaleX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetScaleY___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetScaleY(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_SetScaleZ___(void * jarg1, float jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetScaleZ(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Transform_GetChanged___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (bool_t)((XnorCore::Transform const *)arg1)->GetChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Transform_GetRight___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = ((XnorCore::Transform const *)arg1)->GetRight();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Transform_GetUp___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = ((XnorCore::Transform const *)arg1)->GetUp();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Transform_GetForward___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = ((XnorCore::Transform const *)arg1)->GetForward();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Transform___() {
  void * jresult ;
  XnorCore::Transform *result = 0 ;
  
  result = (XnorCore::Transform *)new XnorCore::Transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Transform___(void * jarg1) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Plane_normal_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Plane_normal_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  result = (Vector3 *)& ((arg1)->normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Plane_distance_set___(void * jarg1, float jarg2) {
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Plane_distance_get___(void * jarg1) {
  float jresult ;
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  result = (float_t) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Plane__SWIG_0___( Data12  jarg1,  Data12  jarg2) {
  void * jresult ;
  Vector3 arg1 ;
  Vector3 arg2 ;
  XnorCore::Plane *result = 0 ;
  
  arg1 = *(Vector3*) &jarg1; 
  arg2 = *(Vector3*) &jarg2; 
  result = (XnorCore::Plane *)new XnorCore::Plane(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Plane__SWIG_1___() {
  void * jresult ;
  XnorCore::Plane *result = 0 ;
  
  result = (XnorCore::Plane *)new XnorCore::Plane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Plane___(void * jarg1) {
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Plane_GetSignedDistanceToPlane___(void * jarg1,  Vector3*  jarg2) {
  float jresult ;
  XnorCore::Plane *arg1 = (XnorCore::Plane *) 0 ;
  Vector3 *arg2 = 0 ;
  float_t result;
  
  arg1 = (XnorCore::Plane *)jarg1; 
  arg2 = jarg2; 
  result = (float_t)((XnorCore::Plane const *)arg1)->GetSignedDistanceToPlane((Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Bound_GetAabbFromTransform___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Bound *arg1 = 0 ;
  XnorCore::Transform *arg2 = 0 ;
  XnorCore::Bound result;
  
  arg1 = (XnorCore::Bound *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bound const & is null", 0);
    return 0;
  } 
  arg2 = (XnorCore::Transform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Transform const & is null", 0);
    return 0;
  } 
  result = XnorCore::Bound::GetAabbFromTransform((XnorCore::Bound const &)*arg1,(XnorCore::Transform const &)*arg2);
  jresult = new XnorCore::Bound(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bound_extents_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->extents = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Bound_extents_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  result = (Vector3 *)& ((arg1)->extents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bound_center_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Bound_center_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  result = (Vector3 *)& ((arg1)->center);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Bound__SWIG_0___( Data12  jarg1,  Data12  jarg2) {
  void * jresult ;
  Vector3 arg1 ;
  Vector3 arg2 ;
  XnorCore::Bound *result = 0 ;
  
  arg1 = *(Vector3*) &jarg1; 
  arg2 = *(Vector3*) &jarg2; 
  result = (XnorCore::Bound *)new XnorCore::Bound(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Bound__SWIG_1___() {
  void * jresult ;
  XnorCore::Bound *result = 0 ;
  
  result = (XnorCore::Bound *)new XnorCore::Bound();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Bound___(void * jarg1) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Bound_OperatorEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  XnorCore::Bound *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = (XnorCore::Bound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bound const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Bound const *)arg1)->operator ==((XnorCore::Bound const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Bound_GetMin___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  result = ((XnorCore::Bound const *)arg1)->GetMin();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Bound_GetMax___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  result = ((XnorCore::Bound const *)arg1)->GetMax();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_Bound_GetSize___(void * jarg1) {
  Data12  jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  result = ((XnorCore::Bound const *)arg1)->GetSize();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bound_SetMinMax___(void * jarg1,  Data12  jarg2,  Data12  jarg3) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 arg2 ;
  Vector3 arg3 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = *(Vector3*) &jarg2; 
  arg3 = *(Vector3*) &jarg3; 
  (arg1)->SetMinMax(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Bound_Intersect___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  XnorCore::Bound *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = (XnorCore::Bound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bound const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Bound const *)arg1)->Intersect((XnorCore::Bound const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Bound_Countain___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  XnorCore::Bound *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = (XnorCore::Bound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bound const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Bound const *)arg1)->Countain((XnorCore::Bound const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Bound_IsOnPlane___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  XnorCore::Plane *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = (XnorCore::Plane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Plane const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Bound const *)arg1)->IsOnPlane((XnorCore::Plane const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bound_Encapsulate__SWIG_0___(void * jarg1, void * jarg2) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  XnorCore::Bound *arg2 = 0 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = (XnorCore::Bound *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bound const & is null", 0);
    return ;
  } 
  (arg1)->Encapsulate((XnorCore::Bound const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bound_Encapsulate__SWIG_1___(void * jarg1,  Data12  jarg2) {
  XnorCore::Bound *arg1 = (XnorCore::Bound *) 0 ;
  Vector3 arg2 ;
  
  arg1 = (XnorCore::Bound *)jarg1; 
  arg2 = *(Vector3*) &jarg2; 
  (arg1)->Encapsulate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Model__SWIG_0___() {
  void * jresult ;
  XnorCore::Model *result = 0 ;
  
  result = (XnorCore::Model *)new XnorCore::Model();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Model__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Model *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Model *)new XnorCore::Model(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Model___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  aiMesh *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (aiMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiMesh const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiMesh const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_CreateInInterface___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_DestroyInInterface___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_Unload___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Save___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  result = (bool_t)((XnorCore::Model const *)arg1)->Save();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  result = (uint32_t)((XnorCore::Model const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Model_GetAabb___(void * jarg1) {
  void * jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  XnorCore::Bound result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  result = ((XnorCore::Model const *)arg1)->GetAabb();
  jresult = new XnorCore::Bound(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_materialType_set___(void * jarg1, int jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::MaterialType arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::MaterialType)jarg2; 
  if (arg1) (arg1)->materialType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Material_materialType_get___(void * jarg1) {
  int jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::MaterialType result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::MaterialType) ((arg1)->materialType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_albedoTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->albedoTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_albedoTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->albedoTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_metallicTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->metallicTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_metallicTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->metallicTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_roughnessTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->roughnessTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_roughnessTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->roughnessTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_normalTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->normalTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_normalTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->normalTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusionTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->ambientOcclusionTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusionTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->ambientOcclusionTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_albedoColor_set___(void * jarg1,  XnorCore::Color*  jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Color *arg2 = (XnorCore::Color *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->albedoColor = *arg2;
}


SWIGEXPORT  XnorCore::Color*  SWIGSTDCALL CSharp_XnorfCore_Material_albedoColor_get___(void * jarg1) {
  XnorCore::Color*  jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Color *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Color *)& ((arg1)->albedoColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_emissiveColor_set___(void * jarg1,  XnorCore::Color*  jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Color *arg2 = (XnorCore::Color *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->emissiveColor = *arg2;
}


SWIGEXPORT  XnorCore::Color*  SWIGSTDCALL CSharp_XnorfCore_Material_emissiveColor_get___(void * jarg1) {
  XnorCore::Color*  jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Color *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Color *)& ((arg1)->emissiveColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_metallic_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->metallic = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_metallic_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->metallic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_roughness_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->roughness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_roughness_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->roughness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_reflectance_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->reflectance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_reflectance_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->reflectance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_emissive_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->emissive = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_emissive_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->emissive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusion_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->ambientOcclusion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusion_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->ambientOcclusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_BindMaterial___(void * jarg1) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  ((XnorCore::Material const *)arg1)->BindMaterial();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Material___() {
  void * jresult ;
  XnorCore::Material *result = 0 ;
  
  result = (XnorCore::Material *)new XnorCore::Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Material___(void * jarg1) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Bone___() {
  void * jresult ;
  XnorCore::Bone *result = 0 ;
  
  result = (XnorCore::Bone *)new XnorCore::Bone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Bone___(void * jarg1) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_Create___(void * jarg1,  Matrix*  jarg2,  Matrix*  jarg3) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->Create((Matrix const &)*arg2,(Matrix const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_name_set___(void * jarg1, const char * jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Bone_name_get___(void * jarg1) {
  const char * jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_id_set___(void * jarg1, int jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Bone_id_get___(void * jarg1) {
  int jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_position_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Bone_position_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_rotation_set___(void * jarg1,  Quaternion*  jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT  Quaternion*  SWIGSTDCALL CSharp_XnorfCore_Bone_rotation_get___(void * jarg1) {
  Quaternion*  jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (Quaternion *)& ((arg1)->rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_local_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->local = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_Bone_local_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (Matrix *)& ((arg1)->local);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_global_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->global = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_Bone_global_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (Matrix *)& ((arg1)->global);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_globalInverse_set___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->globalInverse = *arg2;
}


SWIGEXPORT  Matrix*  SWIGSTDCALL CSharp_XnorfCore_Bone_globalInverse_get___(void * jarg1) {
  Matrix*  jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (Matrix *)& ((arg1)->globalInverse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_parentId_set___(void * jarg1, int jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->parentId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Bone_parentId_get___(void * jarg1) {
  int jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (int32_t) ((arg1)->parentId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Bone_children_set___(void * jarg1, void * jarg2) {
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  XnorCore::List< int32_t > *arg2 = (XnorCore::List< int32_t > *) 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  arg2 = (XnorCore::List< int32_t > *)jarg2; 
  if (arg1) (arg1)->children = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Bone_children_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Bone *arg1 = (XnorCore::Bone *) 0 ;
  XnorCore::List< int32_t > *result = 0 ;
  
  arg1 = (XnorCore::Bone *)jarg1; 
  result = (XnorCore::List< int32_t > *)& ((arg1)->children);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skeleton_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,3 > *result = 0 ;
  
  result = (std::array< char_t const *,3 > *)&XnorCore::Skeleton::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Skeleton__SWIG_0___() {
  void * jresult ;
  XnorCore::Skeleton *result = 0 ;
  
  result = (XnorCore::Skeleton *)new XnorCore::Skeleton();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Skeleton__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Skeleton *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Skeleton *)new XnorCore::Skeleton(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Skeleton_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Skeleton___(void * jarg1) {
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Skeleton_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Skeleton_Load__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  aiSkeleton *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (aiSkeleton *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiSkeleton const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiSkeleton const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Skeleton_Load__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  aiMesh *arg2 = 0 ;
  aiNode *arg3 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (aiMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiMesh const & is null", 0);
    return 0;
  } 
  arg3 = (aiNode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiNode const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiMesh const &)*arg2,(aiNode const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Skeleton_Load__SWIG_4___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  aiScene *arg2 = 0 ;
  aiAnimation *arg3 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (aiScene *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiScene const & is null", 0);
    return 0;
  } 
  arg3 = (aiAnimation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiAnimation const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiScene const &)*arg2,(aiAnimation const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skeleton_ReorderBones___(void * jarg1) {
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  (arg1)->ReorderBones();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skeleton_GetBones___(void * jarg1) {
  void * jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  XnorCore::List< XnorCore::Bone > *result = 0 ;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  result = (XnorCore::List< XnorCore::Bone > *) &((XnorCore::Skeleton const *)arg1)->GetBones();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skeleton_mesh_set___(void * jarg1, void * jarg2) {
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  XnorCore::Mesh *arg2 = (XnorCore::Mesh *) 0 ;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  arg2 = (XnorCore::Mesh *)jarg2; 
  if (arg1) (arg1)->mesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skeleton_mesh_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Skeleton *arg1 = (XnorCore::Skeleton *) 0 ;
  XnorCore::Mesh *result = 0 ;
  
  arg1 = (XnorCore::Skeleton *)jarg1; 
  result = (XnorCore::Mesh *) ((arg1)->mesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_translation_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->translation = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_translation_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  result = (Vector3 *)& ((arg1)->translation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_rotation_set___(void * jarg1,  Quaternion*  jarg2) {
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT  Quaternion*  SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_rotation_get___(void * jarg1) {
  Quaternion*  jresult ;
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  result = (Quaternion *)& ((arg1)->rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_scaling_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->scaling = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_scaling_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  result = (Vector3 *)& ((arg1)->scaling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_time_set___(void * jarg1, float jarg2) {
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Animation_KeyFrame_time_get___(void * jarg1) {
  float jresult ;
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  result = (float_t) ((arg1)->time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Animation_KeyFrame___() {
  void * jresult ;
  XnorCore::Animation::KeyFrame *result = 0 ;
  
  result = (XnorCore::Animation::KeyFrame *)new XnorCore::Animation::KeyFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Animation_KeyFrame___(void * jarg1) {
  XnorCore::Animation::KeyFrame *arg1 = (XnorCore::Animation::KeyFrame *) 0 ;
  
  arg1 = (XnorCore::Animation::KeyFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_skeleton_set___(void * jarg1, void * jarg2) {
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  XnorCore::Pointer< XnorCore::Skeleton > *arg2 = (XnorCore::Pointer< XnorCore::Skeleton > *) 0 ;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Skeleton > *)jarg2; 
  if (arg1) (arg1)->skeleton = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Animation_skeleton_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  XnorCore::Pointer< XnorCore::Skeleton > *result = 0 ;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Skeleton > *)& ((arg1)->skeleton);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Animation_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,0 > *result = 0 ;
  
  result = (std::array< char_t const *,0 > *)&XnorCore::Animation::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Animation__SWIG_0___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Animation *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Animation *)new XnorCore::Animation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Animation_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Animation__SWIG_1___() {
  void * jresult ;
  XnorCore::Animation *result = 0 ;
  
  result = (XnorCore::Animation *)new XnorCore::Animation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Animation___(void * jarg1) {
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Animation_BindSkeleton___(void * jarg1, void * jarg2) {
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Skeleton > > arg2 ;
  XnorCore::Pointer< XnorCore::Skeleton > *argp2 ;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  argp2 = (XnorCore::Pointer< XnorCore::Skeleton > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::Pointer< XnorCore::Skeleton >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->BindSkeleton(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Animation_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Animation_Load__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  aiAnimation *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  arg2 = (aiAnimation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiAnimation const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiAnimation const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Animation_GetDuration___(void * jarg1) {
  float jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  result = (float_t)((XnorCore::Animation const *)arg1)->GetDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Animation_GetFrameCount___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  result = ((XnorCore::Animation const *)arg1)->GetFrameCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Animation_GetFramerate___(void * jarg1) {
  float jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  result = (float_t)((XnorCore::Animation const *)arg1)->GetFramerate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Animation_GetFrameDuration___(void * jarg1) {
  float jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  result = (float_t)((XnorCore::Animation const *)arg1)->GetFrameDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Animation_GetBoneKeyFrame___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Animation *arg1 = (XnorCore::Animation *) 0 ;
  XnorCore::Bone *arg2 = 0 ;
  XnorCore::List< XnorCore::Animation::KeyFrame > *result = 0 ;
  
  arg1 = (XnorCore::Animation *)jarg1; 
  arg2 = (XnorCore::Bone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Bone const & is null", 0);
    return 0;
  } 
  result = (XnorCore::List< XnorCore::Animation::KeyFrame > *) &((XnorCore::Animation const *)arg1)->GetBoneKeyFrame((XnorCore::Bone const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Mesh_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,5 > *result = 0 ;
  
  result = (std::array< char_t const *,5 > *)&XnorCore::Mesh::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Mesh_models_set___(void * jarg1, void * jarg2) {
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  XnorCore::List< XnorCore::Pointer< XnorCore::Model > > *arg2 = (XnorCore::List< XnorCore::Pointer< XnorCore::Model > > *) 0 ;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  arg2 = (XnorCore::List< XnorCore::Pointer< XnorCore::Model > > *)jarg2; 
  if (arg1) (arg1)->models = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Mesh_models_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  XnorCore::List< XnorCore::Pointer< XnorCore::Model > > *result = 0 ;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  result = (XnorCore::List< XnorCore::Pointer< XnorCore::Model > > *)& ((arg1)->models);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Mesh__SWIG_0___() {
  void * jresult ;
  XnorCore::Mesh *result = 0 ;
  
  result = (XnorCore::Mesh *)new XnorCore::Mesh();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Mesh__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Mesh *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Mesh *)new XnorCore::Mesh(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Mesh_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Mesh___(void * jarg1) {
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Mesh_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Mesh_CreateInInterface___(void * jarg1) {
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Mesh_GetAnimation___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  XnorCore::Mesh *arg1 = (XnorCore::Mesh *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Animation > > result;
  
  arg1 = (XnorCore::Mesh *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->GetAnimation(arg2);
  jresult = new XnorCore::Pointer< XnorCore::Animation >(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XnorfCore_ResourceManager_ReservedShaderPrefix_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)XnorCore::ResourceManager::ReservedShaderPrefix;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XnorfCore_ResourceManager_GuidMapFilePath_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)XnorCore::ResourceManager::GuidMapFilePath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_LoadAll___() {
  XnorCore::ResourceManager::LoadAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_LoadGuidMap___() {
  XnorCore::ResourceManager::LoadGuidMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_SaveGuidMap___() {
  XnorCore::ResourceManager::SaveGuidMap();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Contains__SWIG_0___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool_t)XnorCore::ResourceManager::Contains((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Contains__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Pointer< XnorCore::File > *arg1 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Pointer< XnorCore::File > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)XnorCore::ResourceManager::Contains((XnorCore::Pointer< XnorCore::File > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Rename__SWIG_0___(const char * jarg1, const char * jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::ResourceManager::Rename((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Rename__SWIG_1___(void * jarg1, const char * jarg2) {
  XnorCore::Pointer< XnorCore::Resource > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Resource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Resource > const & is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::ResourceManager::Rename((XnorCore::Pointer< XnorCore::Resource > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Unload___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::ResourceManager::Unload((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_UnloadAll___() {
  XnorCore::ResourceManager::UnloadAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_VertexFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,3 > *result = 0 ;
  
  result = (std::array< char_t const *,3 > *)&XnorCore::Shader::VertexFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_FragmentFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,3 > *result = 0 ;
  
  result = (std::array< char_t const *,3 > *)&XnorCore::Shader::FragmentFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_GeometryFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,2 > *result = 0 ;
  
  result = (std::array< char_t const *,2 > *)&XnorCore::Shader::GeometryFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Shader_FileExtensionToType___(const char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  XnorCore::ShaderPipeline::ShaderPipeline result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (XnorCore::ShaderPipeline::ShaderPipeline)XnorCore::Shader::FileExtensionToType((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Shader__SWIG_0___() {
  void * jresult ;
  XnorCore::Shader *result = 0 ;
  
  result = (XnorCore::Shader *)new XnorCore::Shader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Shader__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Shader *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Shader *)new XnorCore::Shader(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_2___(void * jarg1, char * jarg2, long long jarg3, int jarg4) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  char_t *arg2 = (char_t *) 0 ;
  int64_t arg3 ;
  XnorCore::ShaderPipeline::ShaderPipeline arg4 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (char_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (XnorCore::ShaderPipeline::ShaderPipeline)jarg4; 
  result = (bool_t)(arg1)->Load((char_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_CreateInInterface___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_DestroyInInterface___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Recompile___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->Recompile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Unload___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetInt___(void * jarg1, const char * jarg2, int jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int32_t)jarg3; 
  ((XnorCore::Shader const *)arg1)->SetInt((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetBool___(void * jarg1, const char * jarg2, unsigned int jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  bool_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  ((XnorCore::Shader const *)arg1)->SetBool((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetFloat___(void * jarg1, const char * jarg2, float jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  float_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float_t)jarg3; 
  ((XnorCore::Shader const *)arg1)->SetFloat((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetVec2___(void * jarg1, const char * jarg2,  Vector2*  jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Vector2 *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3; 
  ((XnorCore::Shader const *)arg1)->SetVec2((std::string const &)*arg2,(Vector2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetVec3___(void * jarg1, const char * jarg2,  Vector3*  jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3; 
  ((XnorCore::Shader const *)arg1)->SetVec3((std::string const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetVec4___(void * jarg1, const char * jarg2,  Vector4*  jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3; 
  ((XnorCore::Shader const *)arg1)->SetVec4((std::string const &)*arg2,(Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetMat4___(void * jarg1, const char * jarg2,  Matrix*  jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3; 
  ((XnorCore::Shader const *)arg1)->SetMat4((std::string const &)*arg2,(Matrix const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  result = (uint32_t)((XnorCore::Shader const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Use___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  ((XnorCore::Shader const *)arg1)->Use();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Unuse___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  ((XnorCore::Shader const *)arg1)->Unuse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetDepthFunction___(void * jarg1, int jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::DepthFunction::DepthFunction arg2 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::DepthFunction::DepthFunction)jarg2; 
  (arg1)->SetDepthFunction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetBlendFunction___(void * jarg1, void * jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::BlendFunction *arg2 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::BlendFunction *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::BlendFunction const & is null", 0);
    return ;
  } 
  (arg1)->SetBlendFunction((XnorCore::BlendFunction const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetFaceCullingInfo___(void * jarg1, void * jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::ShaderProgramCullInfo *arg2 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::ShaderProgramCullInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::ShaderProgramCullInfo const & is null", 0);
    return ;
  } 
  (arg1)->SetFaceCullingInfo((XnorCore::ShaderProgramCullInfo const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Shader___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GamepadAxisCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::GamepadAxisCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GamepadButtonCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::GamepadButtonCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GamepadButtonStatusCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::GamepadButtonStatusCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_GamepadInput_NullAnalogValue_get___() {
  float jresult ;
  float result;
  
  result = (float)XnorCore::GamepadInput::NullAnalogValue;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GamepadInput_isConnected_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isConnected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GamepadInput_isConnected_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  result = (bool_t) ((arg1)->isConnected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GamepadInput_axisValues_set___(void * jarg1, void * jarg2) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *arg2 = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *) 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  arg2 = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *)jarg2; 
  if (arg1) (arg1)->axisValues = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GamepadInput_axisValues_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *result = 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  result = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *)& ((arg1)->axisValues);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_GamepadInput___() {
  void * jresult ;
  XnorCore::GamepadInput *result = 0 ;
  
  result = (XnorCore::GamepadInput *)new XnorCore::GamepadInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_GamepadInput___(void * jarg1) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_KeyCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::KeyCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_KeyStatusCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::KeyStatusCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MouseButtonCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::MouseButtonCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MouseButtonStatusCount_get___() {
  unsigned int jresult ;
  size_t result;
  
  result = XnorCore::MouseButtonStatusCount;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Input_mouseLocked_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Input::mouseLocked = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_mouseLocked_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Input::mouseLocked;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetKey__SWIG_0___(int jarg1, int jarg2) {
  unsigned int jresult ;
  XnorCore::Key arg1 ;
  XnorCore::KeyStatus arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::Key)jarg1; 
  arg2 = (XnorCore::KeyStatus)jarg2; 
  result = (bool_t)XnorCore::Input::GetKey(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetKey__SWIG_1___(int jarg1) {
  unsigned int jresult ;
  XnorCore::Key arg1 ;
  bool_t result;
  
  arg1 = (XnorCore::Key)jarg1; 
  result = (bool_t)XnorCore::Input::GetKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetMouseButton__SWIG_0___(int jarg1, int jarg2) {
  unsigned int jresult ;
  XnorCore::MouseButton arg1 ;
  XnorCore::MouseButtonStatus arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::MouseButton)jarg1; 
  arg2 = (XnorCore::MouseButtonStatus)jarg2; 
  result = (bool_t)XnorCore::Input::GetMouseButton(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetMouseButton__SWIG_1___(int jarg1) {
  unsigned int jresult ;
  XnorCore::MouseButton arg1 ;
  bool_t result;
  
  arg1 = (XnorCore::MouseButton)jarg1; 
  result = (bool_t)XnorCore::Input::GetMouseButton(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetGamepadButton__SWIG_0___(unsigned int jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  uint32_t arg1 ;
  XnorCore::GamepadButton arg2 ;
  XnorCore::GamepadButtonStatus arg3 ;
  bool_t result;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (XnorCore::GamepadButton)jarg2; 
  arg3 = (XnorCore::GamepadButtonStatus)jarg3; 
  result = (bool_t)XnorCore::Input::GetGamepadButton(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetGamepadButton__SWIG_1___(unsigned int jarg1, int jarg2) {
  unsigned int jresult ;
  uint32_t arg1 ;
  XnorCore::GamepadButton arg2 ;
  bool_t result;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (XnorCore::GamepadButton)jarg2; 
  result = (bool_t)XnorCore::Input::GetGamepadButton(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Time_GetTotalTime___() {
  float jresult ;
  float result;
  
  result = (float)XnorCore::Time::SWIGTEMPLATEDISAMBIGUATOR GetTotalTime< float_t >();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Time_GetLastTotalTime___() {
  float jresult ;
  float result;
  
  result = (float)XnorCore::Time::SWIGTEMPLATEDISAMBIGUATOR GetLastTotalTime< float_t >();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Time_GetDeltaTime___() {
  float jresult ;
  float result;
  
  result = (float)XnorCore::Time::SWIGTEMPLATEDISAMBIGUATOR GetDeltaTime< float_t >();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Time_GetTotalFrameCount___() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)XnorCore::Time::SWIGTEMPLATEDISAMBIGUATOR GetTotalFrameCount< uint32_t >();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_enable_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Component_enable_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Component *)jarg1; 
  result = (bool_t) ((arg1)->enable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Component___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_Begin___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_Update___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_PrePhysics___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->PrePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_PostPhysics___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->PostPhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_OnRendering___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->OnRendering();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_Destroy___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Component_GetEntity___(void * jarg1) {
  void * jresult ;
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  result = (XnorCore::Entity *)((XnorCore::Component const *)arg1)->GetEntity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Component_GetTransform___(void * jarg1) {
  void * jresult ;
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  XnorCore::Transform *result = 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  result = (XnorCore::Transform *) &((XnorCore::Component const *)arg1)->GetTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_color_set___(void * jarg1,  XnorCore::Color*  jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  XnorCore::Color *arg2 = (XnorCore::Color *) 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT  XnorCore::Color*  SWIGSTDCALL CSharp_XnorfCore_Light_color_get___(void * jarg1) {
  XnorCore::Color*  jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  XnorCore::Color *result = 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (XnorCore::Color *)& ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Light_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_castShadow_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->castShadow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Light_castShadow_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (bool_t) ((arg1)->castShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_near_set___(void * jarg1, float jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->near = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Light_near_get___(void * jarg1) {
  float jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (float_t) ((arg1)->near);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_far_set___(void * jarg1, float jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->far = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Light_far_get___(void * jarg1) {
  float jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (float_t) ((arg1)->far);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Light___() {
  void * jresult ;
  XnorCore::Light *result = 0 ;
  
  result = (XnorCore::Light *)new XnorCore::Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Light___(void * jarg1) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_leftRight_set___(void * jarg1,  Vector2*  jarg2) {
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->leftRight = *arg2;
}


SWIGEXPORT  Vector2*  SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_leftRight_get___(void * jarg1) {
  Vector2*  jresult ;
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  result = (Vector2 *)& ((arg1)->leftRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_bottomTop_set___(void * jarg1,  Vector2*  jarg2) {
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->bottomTop = *arg2;
}


SWIGEXPORT  Vector2*  SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_bottomTop_get___(void * jarg1) {
  Vector2*  jresult ;
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  result = (Vector2 *)& ((arg1)->bottomTop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_DirectionalLight___() {
  void * jresult ;
  XnorCore::DirectionalLight *result = 0 ;
  
  result = (XnorCore::DirectionalLight *)new XnorCore::DirectionalLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_DirectionalLight___(void * jarg1) {
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_GetLightDirection___(void * jarg1) {
  Data12  jresult ;
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  result = ((XnorCore::DirectionalLight const *)arg1)->GetLightDirection();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_PointLight___() {
  void * jresult ;
  XnorCore::PointLight *result = 0 ;
  
  result = (XnorCore::PointLight *)new XnorCore::PointLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_PointLight___(void * jarg1) {
  XnorCore::PointLight *arg1 = (XnorCore::PointLight *) 0 ;
  
  arg1 = (XnorCore::PointLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLight_cutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->cutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLight_cutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  result = (float_t) ((arg1)->cutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLight_outerCutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->outerCutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLight_outerCutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  result = (float_t) ((arg1)->outerCutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SpotLight___() {
  void * jresult ;
  XnorCore::SpotLight *result = 0 ;
  
  result = (XnorCore::SpotLight *)new XnorCore::SpotLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SpotLight___(void * jarg1) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_SpotLight_GetLightDirection___(void * jarg1) {
  Data12  jresult ;
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  result = ((XnorCore::SpotLight const *)arg1)->GetLightDirection();
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_position_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Camera_position_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_front_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->front = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Camera_front_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->front);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_up_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->up = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Camera_up_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->up);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_right_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->right = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_Camera_right_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->right);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_near_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->near = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_near_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->near);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_far_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->far = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_far_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->far);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_fov_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->fov = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_fov_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->fov);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_leftRight_set___(void * jarg1,  Vector2*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->leftRight = *arg2;
}


SWIGEXPORT  Vector2*  SWIGSTDCALL CSharp_XnorfCore_Camera_leftRight_get___(void * jarg1) {
  Vector2*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector2 *)& ((arg1)->leftRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_bottomtop_set___(void * jarg1,  Vector2*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2 *arg2 = (Vector2 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->bottomtop = *arg2;
}


SWIGEXPORT  Vector2*  SWIGSTDCALL CSharp_XnorfCore_Camera_bottomtop_get___(void * jarg1) {
  Vector2*  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector2 *)& ((arg1)->bottomtop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_isOrthographic_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isOrthographic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Camera_isOrthographic_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (bool_t) ((arg1)->isOrthographic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Camera___() {
  void * jresult ;
  XnorCore::Camera *result = 0 ;
  
  result = (XnorCore::Camera *)new XnorCore::Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Camera___(void * jarg1) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetProjection___(void * jarg1,  Data8  jarg2,  Matrix*  jarg3) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2i arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = *(Vector2i*) &jarg2; 
  arg3 = jarg3; 
  ((XnorCore::Camera const *)arg1)->GetProjection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetView___(void * jarg1,  Matrix*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  ((XnorCore::Camera const *)arg1)->GetView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetVp___(void * jarg1,  Data8  jarg2,  Matrix*  jarg3) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2i arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = *(Vector2i*) &jarg2; 
  arg3 = jarg3; 
  ((XnorCore::Camera const *)arg1)->GetVp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_LookAt__SWIG_0___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  (arg1)->LookAt((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_LookAt__SWIG_1___(void * jarg1,  Vector3*  jarg2,  Vector3*  jarg3) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  (arg1)->LookAt((Vector3 const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT  Data8  SWIGSTDCALL CSharp_XnorfCore_Camera_ProjectOn___(void * jarg1,  Vector3*  jarg2,  Data8  jarg3,  Matrix*  jarg4) {
  Data8  jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector2i arg3 ;
  Matrix *arg4 = 0 ;
  Vector2i result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = jarg2; 
  arg3 = *(Vector2i*) &jarg3; 
  arg4 = jarg4; 
  result = ((XnorCore::Camera const *)arg1)->ProjectOn((Vector3 const &)*arg2,arg3,(Matrix const &)*arg4);
  jresult = *(Data8*) &result; 
  return jresult;
}


SWIGEXPORT  Data64  SWIGSTDCALL CSharp_XnorfCore_Camera_Perspective___(float jarg1, float jarg2, float jarg3, float jarg4) {
  Data64  jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = XnorCore::Camera::Perspective(arg1,arg2,arg3,arg4);
  jresult = *(Data64*) &result; 
  return jresult;
}


SWIGEXPORT  Data64  SWIGSTDCALL CSharp_XnorfCore_Camera_LookAtRH___( Vector3*  jarg1,  Vector3*  jarg2,  Vector3*  jarg3) {
  Data64  jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  result = XnorCore::Camera::LookAtRH((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = *(Data64*) &result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraComponent_camera_set___(void * jarg1, void * jarg2) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  XnorCore::Camera *arg2 = (XnorCore::Camera *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  arg2 = (XnorCore::Camera *)jarg2; 
  if (arg1) (arg1)->camera = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CameraComponent_camera_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  XnorCore::Camera *result = 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  result = (XnorCore::Camera *)& ((arg1)->camera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CameraComponent___() {
  void * jresult ;
  XnorCore::CameraComponent *result = 0 ;
  
  result = (XnorCore::CameraComponent *)new XnorCore::CameraComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CameraComponent___(void * jarg1) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraComponent_Update___(void * jarg1) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraComponent_Begin___(void * jarg1) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioBuffer__SWIG_0___() {
  void * jresult ;
  XnorCore::AudioBuffer *result = 0 ;
  
  result = (XnorCore::AudioBuffer *)new XnorCore::AudioBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioBuffer__SWIG_1___(int jarg1) {
  void * jresult ;
  int32_t arg1 ;
  XnorCore::AudioBuffer *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  result = (XnorCore::AudioBuffer *)new XnorCore::AudioBuffer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioBuffer__SWIG_2___(void * jarg1) {
  void * jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  XnorCore::AudioBuffer *result = 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (XnorCore::AudioBuffer *)new XnorCore::AudioBuffer((XnorCore::AudioTrack const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_AudioBuffer___(void * jarg1) {
  XnorCore::AudioBuffer *arg1 = (XnorCore::AudioBuffer *) 0 ;
  
  arg1 = (XnorCore::AudioBuffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioBuffer_SetData__SWIG_0___(void * jarg1, void * jarg2) {
  XnorCore::AudioBuffer *arg1 = (XnorCore::AudioBuffer *) 0 ;
  XnorCore::AudioTrack *arg2 = (XnorCore::AudioTrack *) 0 ;
  
  arg1 = (XnorCore::AudioBuffer *)jarg1; 
  arg2 = (XnorCore::AudioTrack *)jarg2; 
  (arg1)->SetData((XnorCore::AudioTrack const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioBuffer_SetData__SWIG_1___(void * jarg1, void * jarg2, int jarg3, unsigned short jarg4, unsigned short jarg5, int jarg6) {
  XnorCore::AudioBuffer *arg1 = (XnorCore::AudioBuffer *) 0 ;
  void *arg2 = (void *) 0 ;
  int32_t arg3 ;
  uint16_t arg4 ;
  uint16_t arg5 ;
  int32_t arg6 ;
  
  arg1 = (XnorCore::AudioBuffer *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  arg5 = (uint16_t)jarg5; 
  arg6 = (int32_t)jarg6; 
  (arg1)->SetData((void const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AudioBuffer_GetHandle___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::AudioBuffer *arg1 = (XnorCore::AudioBuffer *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::AudioBuffer *)jarg1; 
  result = (uint32_t)((XnorCore::AudioBuffer const *)arg1)->GetHandle();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_AudioTrack_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,4 > *result = 0 ;
  
  result = (std::array< char_t const *,4 > *)&XnorCore::AudioTrack::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioTrack__SWIG_0___() {
  void * jresult ;
  XnorCore::AudioTrack *result = 0 ;
  
  result = (XnorCore::AudioTrack *)new XnorCore::AudioTrack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioTrack__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::AudioTrack *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::AudioTrack *)new XnorCore::AudioTrack(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_AudioTrack___(void * jarg1) {
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AudioTrack_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AudioTrack_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioTrack_CreateInInterface___(void * jarg1) {
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  (arg1)->CreateInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioTrack_DestroyInInterface___(void * jarg1) {
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  (arg1)->DestroyInInterface();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioTrack_Unload___(void * jarg1) {
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_AudioTrack_GetDataSize___(void * jarg1) {
  int jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (int32_t)((XnorCore::AudioTrack const *)arg1)->GetDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_XnorfCore_AudioTrack_GetChannels___(void * jarg1) {
  unsigned short jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  uint16_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (uint16_t)((XnorCore::AudioTrack const *)arg1)->GetChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_AudioTrack_GetSampleRate___(void * jarg1) {
  int jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (int32_t)((XnorCore::AudioTrack const *)arg1)->GetSampleRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_XnorfCore_AudioTrack_GetBitDepth___(void * jarg1) {
  unsigned short jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  uint16_t result;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (uint16_t)((XnorCore::AudioTrack const *)arg1)->GetBitDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_AudioTrack_GetBuffer___(void * jarg1) {
  void * jresult ;
  XnorCore::AudioTrack *arg1 = (XnorCore::AudioTrack *) 0 ;
  XnorCore::AudioBuffer *result = 0 ;
  
  arg1 = (XnorCore::AudioTrack *)jarg1; 
  result = (XnorCore::AudioBuffer *)((XnorCore::AudioTrack const *)arg1)->GetBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioListener_dopplerEffect_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dopplerEffect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AudioListener_dopplerEffect_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  result = (bool_t) ((arg1)->dopplerEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioListener___() {
  void * jresult ;
  XnorCore::AudioListener *result = 0 ;
  
  result = (XnorCore::AudioListener *)new XnorCore::AudioListener();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_AudioListener___(void * jarg1) {
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioListener_Update___(void * jarg1) {
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_AudioListener_GetVolume___(void * jarg1) {
  float jresult ;
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  result = (float_t)((XnorCore::AudioListener const *)arg1)->GetVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioListener_SetVolume___(void * jarg1, float jarg2) {
  XnorCore::AudioListener *arg1 = (XnorCore::AudioListener *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::AudioListener *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetVolume(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_audioTrack_set___(void * jarg1, void * jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  XnorCore::Pointer< XnorCore::AudioTrack > *arg2 = (XnorCore::Pointer< XnorCore::AudioTrack > *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::AudioTrack > *)jarg2; 
  if (arg1) (arg1)->audioTrack = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_AudioSource_audioTrack_get___(void * jarg1) {
  void * jresult ;
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  XnorCore::Pointer< XnorCore::AudioTrack > *result = 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::AudioTrack > *)& ((arg1)->audioTrack);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_AudioSource___() {
  void * jresult ;
  XnorCore::AudioSource *result = 0 ;
  
  result = (XnorCore::AudioSource *)new XnorCore::AudioSource();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_AudioSource___(void * jarg1) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_Begin___(void * jarg1) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_Update___(void * jarg1) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_Play__SWIG_0___(void * jarg1) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  (arg1)->Play();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_Play__SWIG_1___(void * jarg1, void * jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  XnorCore::AudioTrack *arg2 = 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = (XnorCore::AudioTrack *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::AudioTrack & is null", 0);
    return ;
  } 
  (arg1)->Play(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_SetBuffer___(void * jarg1, void * jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  XnorCore::AudioBuffer *arg2 = (XnorCore::AudioBuffer *) 0 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = (XnorCore::AudioBuffer *)jarg2; 
  (arg1)->SetBuffer((XnorCore::AudioBuffer const *)arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_AudioSource_GetVolume___(void * jarg1) {
  float jresult ;
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  result = (float_t)((XnorCore::AudioSource const *)arg1)->GetVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_SetVolume___(void * jarg1, float jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetVolume(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_AudioSource_GetPitch___(void * jarg1) {
  float jresult ;
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  result = (float_t)((XnorCore::AudioSource const *)arg1)->GetPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_SetPitch___(void * jarg1, float jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetPitch(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_AudioSource_GetLooping___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  result = (bool_t)((XnorCore::AudioSource const *)arg1)->GetLooping();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AudioSource_SetLooping___(void * jarg1, unsigned int jarg2) {
  XnorCore::AudioSource *arg1 = (XnorCore::AudioSource *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::AudioSource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetLooping(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionData_penetrationDepth_set___(void * jarg1, float jarg2) {
  XnorCore::CollisionData *arg1 = (XnorCore::CollisionData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::CollisionData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->penetrationDepth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CollisionData_penetrationDepth_get___(void * jarg1) {
  float jresult ;
  XnorCore::CollisionData *arg1 = (XnorCore::CollisionData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::CollisionData *)jarg1; 
  result = (float_t) ((arg1)->penetrationDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CollisionData_normal_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::CollisionData *arg1 = (XnorCore::CollisionData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::CollisionData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_CollisionData_normal_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::CollisionData *arg1 = (XnorCore::CollisionData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::CollisionData *)jarg1; 
  result = (Vector3 *)& ((arg1)->normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CollisionData___() {
  void * jresult ;
  XnorCore::CollisionData *result = 0 ;
  
  result = (XnorCore::CollisionData *)new XnorCore::CollisionData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CollisionData___(void * jarg1) {
  XnorCore::CollisionData *arg1 = (XnorCore::CollisionData *) 0 ;
  
  arg1 = (XnorCore::CollisionData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Collider___() {
  void * jresult ;
  XnorCore::Collider *result = 0 ;
  
  result = (XnorCore::Collider *)new XnorCore::Collider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Collider___(void * jarg1) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_Begin___(void * jarg1) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_Update___(void * jarg1) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_PrePhysics___(void * jarg1) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  (arg1)->PrePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_PostPhysics___(void * jarg1) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  (arg1)->PostPhysics();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Collider_IsTrigger___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (bool_t)((XnorCore::Collider const *)arg1)->IsTrigger();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_AddForce___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = jarg2; 
  ((XnorCore::Collider const *)arg1)->AddForce((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_AddImpulse___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = jarg2; 
  ((XnorCore::Collider const *)arg1)->AddImpulse((Vector3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerEnter_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg2; 
  if (arg1) (arg1)->onTriggerEnter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerEnter_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)& ((arg1)->onTriggerEnter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerStay_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg2; 
  if (arg1) (arg1)->onTriggerStay = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerStay_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)& ((arg1)->onTriggerStay);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerExit_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg2; 
  if (arg1) (arg1)->onTriggerExit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onTriggerExit_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)& ((arg1)->onTriggerExit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionEnter_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg2; 
  if (arg1) (arg1)->onCollisionEnter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionEnter_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)& ((arg1)->onCollisionEnter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionStay_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)jarg2; 
  if (arg1) (arg1)->onCollisionStay = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionStay_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider *,XnorCore::CollisionData const & > *)& ((arg1)->onCollisionStay);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionExit_set___(void * jarg1, void * jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *) 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)jarg2; 
  if (arg1) (arg1)->onCollisionExit = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Collider_onCollisionExit_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *result = 0 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Event< XnorCore::Collider *,XnorCore::Collider * > *)& ((arg1)->onCollisionExit);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Collider_constraints_set___(void * jarg1, int jarg2) {
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Collider::ColliderConstraints arg2 ;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  arg2 = (XnorCore::Collider::ColliderConstraints)jarg2; 
  if (arg1) (arg1)->constraints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Collider_constraints_get___(void * jarg1) {
  int jresult ;
  XnorCore::Collider *arg1 = (XnorCore::Collider *) 0 ;
  XnorCore::Collider::ColliderConstraints result;
  
  arg1 = (XnorCore::Collider *)jarg1; 
  result = (XnorCore::Collider::ColliderConstraints) ((arg1)->constraints);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_BoxCollider___() {
  void * jresult ;
  XnorCore::BoxCollider *result = 0 ;
  
  result = (XnorCore::BoxCollider *)new XnorCore::BoxCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_BoxCollider___(void * jarg1) {
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BoxCollider_Begin___(void * jarg1) {
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BoxCollider_Update___(void * jarg1) {
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BoxCollider_center_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->center = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_BoxCollider_center_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  result = (Vector3 *)& ((arg1)->center);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BoxCollider_size_set___(void * jarg1,  Vector3*  jarg2) {
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT  Vector3*  SWIGSTDCALL CSharp_XnorfCore_BoxCollider_size_get___(void * jarg1) {
  Vector3*  jresult ;
  XnorCore::BoxCollider *arg1 = (XnorCore::BoxCollider *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::BoxCollider *)jarg1; 
  result = (Vector3 *)& ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_height_set___(void * jarg1, float jarg2) {
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_height_get___(void * jarg1) {
  float jresult ;
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  result = (float_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_radius_set___(void * jarg1, float jarg2) {
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_radius_get___(void * jarg1) {
  float jresult ;
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  result = (float_t) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CapsuleCollider___() {
  void * jresult ;
  XnorCore::CapsuleCollider *result = 0 ;
  
  result = (XnorCore::CapsuleCollider *)new XnorCore::CapsuleCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CapsuleCollider___(void * jarg1) {
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_Begin___(void * jarg1) {
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_Update___(void * jarg1) {
  XnorCore::CapsuleCollider *arg1 = (XnorCore::CapsuleCollider *) 0 ;
  
  arg1 = (XnorCore::CapsuleCollider *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_MeshCollider___() {
  void * jresult ;
  XnorCore::MeshCollider *result = 0 ;
  
  result = (XnorCore::MeshCollider *)new XnorCore::MeshCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_MeshCollider___(void * jarg1) {
  XnorCore::MeshCollider *arg1 = (XnorCore::MeshCollider *) 0 ;
  
  arg1 = (XnorCore::MeshCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MeshCollider_Begin___(void * jarg1) {
  XnorCore::MeshCollider *arg1 = (XnorCore::MeshCollider *) 0 ;
  
  arg1 = (XnorCore::MeshCollider *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MeshCollider_Update___(void * jarg1) {
  XnorCore::MeshCollider *arg1 = (XnorCore::MeshCollider *) 0 ;
  
  arg1 = (XnorCore::MeshCollider *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SphereCollider___() {
  void * jresult ;
  XnorCore::SphereCollider *result = 0 ;
  
  result = (XnorCore::SphereCollider *)new XnorCore::SphereCollider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SphereCollider___(void * jarg1) {
  XnorCore::SphereCollider *arg1 = (XnorCore::SphereCollider *) 0 ;
  
  arg1 = (XnorCore::SphereCollider *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SphereCollider_Begin___(void * jarg1) {
  XnorCore::SphereCollider *arg1 = (XnorCore::SphereCollider *) 0 ;
  
  arg1 = (XnorCore::SphereCollider *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SphereCollider_Update___(void * jarg1) {
  XnorCore::SphereCollider *arg1 = (XnorCore::SphereCollider *) 0 ;
  
  arg1 = (XnorCore::SphereCollider *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SphereCollider_radius_set___(void * jarg1, float jarg2) {
  XnorCore::SphereCollider *arg1 = (XnorCore::SphereCollider *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SphereCollider *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SphereCollider_radius_get___(void * jarg1) {
  float jresult ;
  XnorCore::SphereCollider *arg1 = (XnorCore::SphereCollider *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SphereCollider *)jarg1; 
  result = (float_t) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_mesh_set___(void * jarg1, void * jarg2) {
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Mesh > *arg2 = (XnorCore::Pointer< XnorCore::Mesh > *) 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Mesh > *)jarg2; 
  if (arg1) (arg1)->mesh = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_mesh_get___(void * jarg1) {
  void * jresult ;
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Mesh > *result = 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Mesh > *)& ((arg1)->mesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_material_set___(void * jarg1, void * jarg2) {
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  XnorCore::Material *arg2 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Material *)jarg2; 
  if (arg1) (arg1)->material = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_material_get___(void * jarg1) {
  void * jresult ;
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  XnorCore::Material *result = 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  result = (XnorCore::Material *)& ((arg1)->material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_drawModelAabb_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->drawModelAabb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_drawModelAabb_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  result = (bool_t) ((arg1)->drawModelAabb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_StaticMeshRenderer___() {
  void * jresult ;
  XnorCore::StaticMeshRenderer *result = 0 ;
  
  result = (XnorCore::StaticMeshRenderer *)new XnorCore::StaticMeshRenderer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_StaticMeshRenderer___(void * jarg1) {
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_GetAabb___(void * jarg1, void * jarg2) {
  XnorCore::StaticMeshRenderer *arg1 = (XnorCore::StaticMeshRenderer *) 0 ;
  XnorCore::Bound *arg2 = (XnorCore::Bound *) 0 ;
  
  arg1 = (XnorCore::StaticMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Bound *)jarg2; 
  ((XnorCore::StaticMeshRenderer const *)arg1)->GetAabb(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SkinnedMeshRenderer___() {
  void * jresult ;
  XnorCore::SkinnedMeshRenderer *result = 0 ;
  
  result = (XnorCore::SkinnedMeshRenderer *)new XnorCore::SkinnedMeshRenderer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_Begin___(void * jarg1) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_OnRendering___(void * jarg1) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  (arg1)->OnRendering();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_mesh_set___(void * jarg1, void * jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Mesh > *arg2 = (XnorCore::Pointer< XnorCore::Mesh > *) 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Mesh > *)jarg2; 
  if (arg1) (arg1)->mesh = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_mesh_get___(void * jarg1) {
  void * jresult ;
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Mesh > *result = 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Mesh > *)& ((arg1)->mesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_material_set___(void * jarg1, void * jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Material *arg2 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Material *)jarg2; 
  if (arg1) (arg1)->material = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_material_get___(void * jarg1) {
  void * jresult ;
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Material *result = 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  result = (XnorCore::Material *)& ((arg1)->material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_drawModelAabb_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->drawModelAabb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_drawModelAabb_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  result = (bool_t) ((arg1)->drawModelAabb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_StartAnimation___(void * jarg1, void * jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Animation > *arg2 = 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Animation > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Animation > const & is null", 0);
    return ;
  } 
  (arg1)->StartAnimation((XnorCore::Pointer< XnorCore::Animation > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_StartBlending___(void * jarg1, void * jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Animation > *arg2 = 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Animation > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Animation > const & is null", 0);
    return ;
  } 
  (arg1)->StartBlending((XnorCore::Pointer< XnorCore::Animation > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_SetCrossFadeDelta___(void * jarg1, float jarg2) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  arg2 = (float_t)jarg2; 
  (arg1)->SetCrossFadeDelta(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_GetMatrices___(void * jarg1) {
  void * jresult ;
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  XnorCore::List< Matrix > *result = 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  result = (XnorCore::List< Matrix > *) &((XnorCore::SkinnedMeshRenderer const *)arg1)->GetMatrices();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SkinnedMeshRenderer___(void * jarg1) {
  XnorCore::SkinnedMeshRenderer *arg1 = (XnorCore::SkinnedMeshRenderer *) 0 ;
  
  arg1 = (XnorCore::SkinnedMeshRenderer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ScriptComponent___() {
  void * jresult ;
  XnorCore::ScriptComponent *result = 0 ;
  
  result = (XnorCore::ScriptComponent *)new XnorCore::ScriptComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ScriptComponent___(void * jarg1) {
  XnorCore::ScriptComponent *arg1 = (XnorCore::ScriptComponent *) 0 ;
  
  arg1 = (XnorCore::ScriptComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Entity___() {
  void * jresult ;
  XnorCore::Entity *result = 0 ;
  
  result = (XnorCore::Entity *)new XnorCore::Entity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Entity___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_Transform_set___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Transform *arg2 = (XnorCore::Transform *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Transform *)jarg2; 
  if (arg1) (arg1)->transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_Transform_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Transform *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Transform *)& ((arg1)->transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_name_set___(void * jarg1, const char * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entity_name_get___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_AddComponent___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Component *arg2 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Component *)jarg2; 
  (arg1)->AddComponent(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetGuid___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Guid *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Guid *) &((XnorCore::Entity const *)arg1)->GetGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetParent___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Entity *)((XnorCore::Entity const *)arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_HasParent___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->HasParent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetChild___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  size_t arg2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (XnorCore::Entity *)((XnorCore::Entity const *)arg1)->GetChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_GetChildCount___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = ((XnorCore::Entity const *)arg1)->GetChildCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_HasChildren___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->HasChildren();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_IsParentOf___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->IsParentOf((XnorCore::Entity const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_SetParent___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_AddChild___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_RemoveChild___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_Begin___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_Update___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_PrePhysics___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->PrePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_PostPhysics___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->PostPhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_OnRendering___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->OnRendering();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_OperatorEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Entity const *)arg1)->operator ==((XnorCore::Entity const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetComponents___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::List< XnorCore::Component * > *) &((XnorCore::Entity const *)arg1)->GetComponents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Skybox___() {
  void * jresult ;
  XnorCore::Skybox *result = 0 ;
  
  result = (XnorCore::Skybox *)new XnorCore::Skybox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Skybox___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_Initialize___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  (arg1)->Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_LoadCubeMap___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  std::array< std::string,6 > *arg2 = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (std::array< std::string,6 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< std::string,6 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadCubeMap((std::array< std::string,6 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_LoadFromHdrTexture___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Texture > const & is null", 0);
    return ;
  } 
  ((XnorCore::Skybox const *)arg1)->LoadFromHdrTexture((XnorCore::Pointer< XnorCore::Texture > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_BindDesriptorSet___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  ((XnorCore::Skybox const *)arg1)->BindDesriptorSet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_UnbindDesriptorSet___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  ((XnorCore::Skybox const *)arg1)->UnbindDesriptorSet();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skybox_GetSkyboxAlbedoColor___(void * jarg1) {
  void * jresult ;
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  result = (XnorCore::Cubemap *)((XnorCore::Skybox const *)arg1)->GetSkyboxAlbedoColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_skybox_set___(void * jarg1, void * jarg2) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Skybox *arg2 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Skybox *)jarg2; 
  if (arg1) (arg1)->skybox = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_skybox_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Skybox *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  result = (XnorCore::Skybox *)& ((arg1)->skybox);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Scene___() {
  void * jresult ;
  XnorCore::Scene *result = 0 ;
  
  result = (XnorCore::Scene *)new XnorCore::Scene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Scene___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_Initialize___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_Begin___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_Update___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_PrePhysics___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->PrePhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_PostPhysics___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->PostPhysics();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_OnRendering___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->OnRendering();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_FindEntityById___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Entity *)(arg1)->FindEntityById((XnorCore::Guid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_FindEntityByName___(void * jarg1, const char * jarg2) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  std::string *arg2 = 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (XnorCore::Entity *)(arg1)->FindEntityByName((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_CreateEntity__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  std::string *arg2 = 0 ;
  XnorCore::Entity *arg3 = (XnorCore::Entity *) 0 ;
  std::unique_ptr< std::string > rvrdeleter2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  arg3 = (XnorCore::Entity *)jarg3; 
  result = (XnorCore::Entity *)(arg1)->CreateEntity((std::string const &&)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_CreateEntity__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::unique_ptr< std::string > rvrdeleter2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (XnorCore::Entity *)(arg1)->CreateEntity((std::string const &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_DestroyEntity___(void * jarg1, void * jarg2) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->DestroyEntity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Scene_HasEntity___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (bool_t)((XnorCore::Scene const *)arg1)->HasEntity((XnorCore::Entity const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_GetEntities___(void * jarg1) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::List< XnorCore::Entity * > *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  result = (XnorCore::List< XnorCore::Entity * > *) &((XnorCore::Scene const *)arg1)->GetEntities();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Scene_GetEntityIndex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (uint32_t)((XnorCore::Scene const *)arg1)->GetEntityIndex((XnorCore::Entity const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AlignImGuiCursor__SWIG_0___(float jarg1, float jarg2) {
  float_t arg1 ;
  float_t arg2 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  XnorCore::Utils::AlignImGuiCursor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AlignImGuiCursor__SWIG_1___(float jarg1) {
  float_t arg1 ;
  
  arg1 = (float_t)jarg1; 
  XnorCore::Utils::AlignImGuiCursor(arg1);
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_HumanizeString___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::HumanizeString((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_HumanizeVariableName___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::HumanizeVariableName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_RemoveNamespaces___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::RemoveNamespaces((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_RemapValue__SWIG_0___(float jarg1,  Data8  jarg2,  Data8  jarg3) {
  float jresult ;
  float_t arg1 ;
  Vector2 arg2 ;
  Vector2 arg3 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = *(Vector2*) &jarg2; 
  arg3 = *(Vector2*) &jarg3; 
  result = (float_t)XnorCore::Utils::RemapValue(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_RemapValue__SWIG_1___(unsigned int jarg1,  Data8  jarg2,  Data8  jarg3) {
  unsigned int jresult ;
  size_t arg1 ;
  Vector2i arg2 ;
  Vector2i arg3 ;
  size_t result;
  
  arg1 = (size_t)jarg1; 
  arg2 = *(Vector2i*) &jarg2; 
  arg3 = *(Vector2i*) &jarg3; 
  result = XnorCore::Utils::RemapValue(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_NormalizeAngle___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)XnorCore::Utils::NormalizeAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_NormalizeAngles___( Data12  jarg1) {
  Data12  jresult ;
  Vector3 arg1 ;
  Vector3 result;
  
  arg1 = *(Vector3*) &jarg1; 
  result = XnorCore::Utils::NormalizeAngles(SWIG_STD_MOVE(arg1));
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT  Data12  SWIGSTDCALL CSharp_XnorfCore_GetQuaternionEulerAngles___( Quaternion*  jarg1) {
  Data12  jresult ;
  Quaternion *arg1 = 0 ;
  Vector3 result;
  
  arg1 = jarg1; 
  result = XnorCore::Utils::GetQuaternionEulerAngles((Quaternion const &)*arg1);
  jresult = *(Data12*) &result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenInExplorer__SWIG_0___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Utils::OpenInExplorer((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenInExplorer__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::filesystem::path *arg1 = 0 ;
  bool_t arg2 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  XnorCore::Utils::OpenInExplorer((std::filesystem::path const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenFile___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Utils::OpenFile((std::filesystem::path const &)*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_StringEqualsIgnoreCase___(const char * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool_t)XnorCore::Utils::StringEqualsIgnoreCase((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TerminalCommand__SWIG_0___(const char * jarg1, unsigned int jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  bool_t arg2 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = jarg2 ? true : false; 
  result = (int32_t)XnorCore::Utils::TerminalCommand((std::string const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TerminalCommand__SWIG_1___(const char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)XnorCore::Utils::TerminalCommand((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateEmptyFile___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Utils::CreateEmptyFile((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_OnAttachToParent___(void * jarg1) {
  XnorCore::Entity *arg1 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::OnAttachToParent(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_Update___(void * jarg1) {
  XnorCore::List< XnorCore::Entity * > *arg1 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Entity * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::List< XnorCore::Entity * > const & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::Update((XnorCore::List< XnorCore::Entity * > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_UpdateTransform___(void * jarg1) {
  XnorCore::Entity *arg1 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::UpdateTransform(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_Begin___() {
  XnorCore::World::Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_Update___() {
  XnorCore::World::Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_OnRendering___() {
  XnorCore::World::OnRendering();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_isPlaying_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::World::isPlaying = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_World_isPlaying_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::World::isPlaying;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_hasStarted_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::World::hasStarted = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_World_hasStarted_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::World::hasStarted;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_scene_set___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  XnorCore::World::scene = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_World_scene_get___() {
  void * jresult ;
  XnorCore::Scene *result = 0 ;
  
  result = (XnorCore::Scene *)XnorCore::World::scene;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT  Data8  SWIGSTDCALL CSharp_XnorfCore_Screen_GetSize___() {
  Data8  jresult ;
  Vector2i result;
  
  result = XnorCore::Screen::GetSize();
  jresult = *(Data8*) &result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Screen_GetRefreshRate___() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)XnorCore::Screen::GetRefreshRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Screen_Initialize___() {
  XnorCore::Screen::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_resizeFrameBuffer_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Window::resizeFrameBuffer = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Window_resizeFrameBuffer_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Window::resizeFrameBuffer;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Initialize___() {
  XnorCore::Window::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Shutdown___() {
  XnorCore::Window::Shutdown();
}


SWIGEXPORT  Data8  SWIGSTDCALL CSharp_XnorfCore_Window_GetSize___() {
  Data8  jresult ;
  Vector2i result;
  
  result = XnorCore::Window::GetSize();
  jresult = *(Data8*) &result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Window_ShouldClose___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Window::ShouldClose();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_PollEvents___() {
  XnorCore::Window::PollEvents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_MakeContextCurrent___() {
  XnorCore::Window::MakeContextCurrent();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Window_GetHandle___() {
  void * jresult ;
  GLFWwindow *result = 0 ;
  
  result = (GLFWwindow *)XnorCore::Window::GetHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Show___() {
  XnorCore::Window::Show();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Hide___() {
  XnorCore::Window::Hide();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetIcon___(void * jarg1) {
  XnorCore::Texture *arg1 = 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Texture & is null", 0);
    return ;
  } 
  XnorCore::Window::SetIcon(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetCursorHidden___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Window::SetCursorHidden(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetCursorPosition___( Data8  jarg1) {
  Vector2 arg1 ;
  
  arg1 = *(Vector2*) &jarg1; 
  XnorCore::Window::SetCursorPosition(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT XnorCore::Entry * SWIGSTDCALL CSharp_XnorfCore_Directory_SWIGUpcast___(XnorCore::Directory *jarg1) {
    return (XnorCore::Entry *)jarg1;
}

SWIGEXPORT XnorCore::Entry * SWIGSTDCALL CSharp_XnorfCore_File_SWIGUpcast___(XnorCore::File *jarg1) {
    return (XnorCore::Entry *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Cubemap_SWIGUpcast___(XnorCore::Cubemap *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Texture_SWIGUpcast___(XnorCore::Texture *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Font_SWIGUpcast___(XnorCore::Font *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Model_SWIGUpcast___(XnorCore::Model *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Skeleton_SWIGUpcast___(XnorCore::Skeleton *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Animation_SWIGUpcast___(XnorCore::Animation *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Mesh_SWIGUpcast___(XnorCore::Mesh *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Shader_SWIGUpcast___(XnorCore::Shader *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_Light_SWIGUpcast___(XnorCore::Light *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_SWIGUpcast___(XnorCore::DirectionalLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_PointLight_SWIGUpcast___(XnorCore::PointLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_SpotLight_SWIGUpcast___(XnorCore::SpotLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_CameraComponent_SWIGUpcast___(XnorCore::CameraComponent *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_AudioTrack_SWIGUpcast___(XnorCore::AudioTrack *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_AudioListener_SWIGUpcast___(XnorCore::AudioListener *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_AudioSource_SWIGUpcast___(XnorCore::AudioSource *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_Collider_SWIGUpcast___(XnorCore::Collider *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Collider * SWIGSTDCALL CSharp_XnorfCore_BoxCollider_SWIGUpcast___(XnorCore::BoxCollider *jarg1) {
    return (XnorCore::Collider *)jarg1;
}

SWIGEXPORT XnorCore::Collider * SWIGSTDCALL CSharp_XnorfCore_CapsuleCollider_SWIGUpcast___(XnorCore::CapsuleCollider *jarg1) {
    return (XnorCore::Collider *)jarg1;
}

SWIGEXPORT XnorCore::Collider * SWIGSTDCALL CSharp_XnorfCore_MeshCollider_SWIGUpcast___(XnorCore::MeshCollider *jarg1) {
    return (XnorCore::Collider *)jarg1;
}

SWIGEXPORT XnorCore::Collider * SWIGSTDCALL CSharp_XnorfCore_SphereCollider_SWIGUpcast___(XnorCore::SphereCollider *jarg1) {
    return (XnorCore::Collider *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_StaticMeshRenderer_SWIGUpcast___(XnorCore::StaticMeshRenderer *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_SkinnedMeshRenderer_SWIGUpcast___(XnorCore::SkinnedMeshRenderer *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_ScriptComponent_SWIGUpcast___(XnorCore::ScriptComponent *jarg1) {
    return (XnorCore::Component *)jarg1;
}

#ifdef __cplusplus
}
#endif

