/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CoreC(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CoreC(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CoreC(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <array>
#include <algorithm>
#include <stdexcept>


#include <unordered_map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include "Maths/math.hpp"


#include <format>

#include "csharp/dotnet_utils.hpp"

#include "file/directory.hpp"
#include "file/entry.hpp"
#include "file/file.hpp"
#include "file/file_manager.hpp"

#include "input/gamepad_input.hpp"
#include "input/input.hpp"
#include "input/keyboard_input.hpp"
#include "input/mouse_input.hpp"
#include "input/time.hpp"

#include "rendering/light/directional_light.hpp"
#include "rendering/light/light.hpp"
#include "rendering/light/point_light.hpp"
#include "rendering/light/spot_light.hpp"

#include "rendering/render_systems/light_manager.hpp"
#include "rendering/render_systems/skybox_renderer.hpp"
#include "rendering/render_systems/tone_mapping.hpp"

#include "rendering/camera.hpp"
#include "rendering/frame_buffer.hpp"
#include "rendering/material.hpp"
#include "rendering/render_pass.hpp"
#include "rendering/renderer.hpp"
#include "rendering/rhi.hpp"
#include "rendering/rhi_typedef.hpp"
#include "rendering/uniform_buffer.hpp"
#include "rendering/vertex.hpp"
#include "rendering/viewport.hpp"
#include "rendering/viewport_data.hpp"

#include "resource/cubemap.hpp"
#include "resource/font.hpp"
#include "resource/model.hpp"
#include "resource/resource.hpp"
#include "resource/resource_manager.hpp"
#include "resource/shader.hpp"
#include "resource/texture.hpp"

#include "scene/component/camera_component.hpp"
#include "scene/component/mesh_renderer.hpp"
#include "scene/component/script_component.hpp"

#include "scene/component.hpp"
#include "scene/entity.hpp"
#include "scene/scene.hpp"

#include "serialization/serializer.hpp"

#include "utils/color.hpp"
#include "utils/formatter.hpp"
#include "utils/guid.hpp"
#include "utils/list.hpp"
#include "utils/logger.hpp"
#include "utils/meta_programming.hpp"
#include "utils/pointer.hpp"
#include "utils/reference_counter.hpp"
#include "utils/ts_queue.hpp"
#include "utils/utils.hpp"

#include "world/scene_graph.hpp"
#include "world/skybox.hpp"
#include "world/world.hpp"

#include "application.hpp"
#include "core.hpp"
#include "screen.hpp"
#include "transform.hpp"
#include "window.hpp"


#include <memory>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ZERO_get___() {
  float jresult ;
  float result;
  
  result = (float)(1e-6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Zero_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Zero;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Pi_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Pi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiTimes2_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiTimes2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiOver2_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiOver2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PiOver4_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::PiOver4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Deg2Rad_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Deg2Rad;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Rad2Deg_get___() {
  float jresult ;
  float_t result;
  
  result = (float_t)Calc::Rad2Deg;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Sign___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Sign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Abs___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::Abs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Approach___(void * jarg1, float jarg2, float jarg3) {
  float_t *arg1 = 0 ;
  float_t arg2 ;
  float_t arg3 ;
  
  arg1 = (float_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float_t & is null", 0);
    return ;
  } 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  Calc::Approach(*arg1,arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_YoYo___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)Calc::YoYo(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OnInterval___(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  result = (bool_t)Calc::OnInterval(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_IsZero__SWIG_0___(float jarg1) {
  unsigned int jresult ;
  float_t arg1 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  result = (bool_t)Calc::IsZero(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_IsZero__SWIG_1___(float jarg1, float jarg2) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (bool_t)Calc::IsZero(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Equals___(float jarg1, float jarg2) {
  unsigned int jresult ;
  float_t arg1 ;
  float_t arg2 ;
  bool_t result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (bool_t)Calc::Equals(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SineInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::SineInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuadInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuadInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CubicInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CubicInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuartInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuartInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_QuintInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::QuintInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ExpoInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ExpoInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_CircInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::CircInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BackInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BackInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_ElasticInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::ElasticInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceIn___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceIn(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_BounceInOut___(float jarg1) {
  float jresult ;
  float arg1 ;
  float result;
  
  arg1 = (float)jarg1; 
  result = (float)Easing::BounceInOut(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m00_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m00 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m00_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m10_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m10 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m10_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m20_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m20 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m20_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m30_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m30 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m30_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m01_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m01 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m01_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m11_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m11_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m21_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m21_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m31_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m31 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m31_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m31);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m02_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m02 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m02_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m12_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m12_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m22_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m22_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m32_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m32 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m32_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m03_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m03 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m03_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m03);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m13_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m13 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m13_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m23_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m23 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m23_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_m33_set___(void * jarg1, float jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m33 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_m33_get___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t) ((arg1)->m33);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Identity__SWIG_0___() {
  void * jresult ;
  Matrix result;
  
  result = Matrix::Identity();
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Identity__SWIG_1___(void * jarg1) {
  Matrix *arg1 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  Matrix::Identity(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Translation__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Translation((Vector3 const &)*arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Translation__SWIG_1___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix *)jarg2; 
  Matrix::Translation((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_0___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Vector3 *arg2 = 0 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Rotation(arg1,(Vector3 const &)*arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_1___(float jarg1, void * jarg2, void * jarg3) {
  float_t arg1 ;
  Vector3 *arg2 = 0 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (Matrix *)jarg3; 
  Matrix::Rotation(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationX__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix::RotationX(arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationX__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix *)jarg2; 
  Matrix::RotationX(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationX__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix::RotationX(arg1,arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationX__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix *)jarg3; 
  Matrix::RotationX(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationY__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix::RotationY(arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationY__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix *)jarg2; 
  Matrix::RotationY(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationY__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix::RotationY(arg1,arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationY__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix *)jarg3; 
  Matrix::RotationY(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationZ__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix::RotationZ(arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationZ__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix *)jarg2; 
  Matrix::RotationZ(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationZ__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix::RotationZ(arg1,arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_RotationZ__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix *)jarg3; 
  Matrix::RotationZ(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_2___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Rotation((Vector3 const &)*arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_3___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix *)jarg2; 
  Matrix::Rotation((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_4___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Matrix result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = Matrix::Rotation((Quaternion const &)*arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_5___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg2 = (Matrix *)jarg2; 
  Matrix::Rotation((Quaternion const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_6___(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Rotation(arg1,arg2,(Vector3 const &)*arg3);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Rotation__SWIG_7___(float jarg1, float jarg2, void * jarg3, void * jarg4) {
  float_t arg1 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Matrix *arg4 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix *)jarg4; 
  Matrix::Rotation(arg1,arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Scaling__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Scaling((Vector3 const &)*arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Scaling__SWIG_1___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix *)jarg2; 
  Matrix::Scaling((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Trs((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix *arg4 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix *)jarg4; 
  Matrix::Trs((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_2___(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Trs((Vector3 const &)*arg1,arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_3___(void * jarg1, float jarg2, void * jarg3, void * jarg4, void * jarg5) {
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Vector3 *arg4 = 0 ;
  Matrix *arg5 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Vector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg5 = (Matrix *)jarg5; 
  Matrix::Trs((Vector3 const &)*arg1,arg2,(Vector3 const &)*arg3,(Vector3 const &)*arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_4___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Trs((Vector3 const &)*arg1,(Matrix const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_5___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector3 *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix *arg4 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix *)jarg4; 
  Matrix::Trs((Vector3 const &)*arg1,(Matrix const &)*arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_6___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::Trs((Vector3 const &)*arg1,(Quaternion const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Trs__SWIG_7___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector3 *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix *arg4 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix *)jarg4; 
  Matrix::Trs((Vector3 const &)*arg1,(Quaternion const &)*arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_LookAt__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix::LookAt((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_LookAt__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix *arg4 = (Matrix *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix *)jarg4; 
  Matrix::LookAt((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Perspective__SWIG_0___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = Matrix::Perspective(arg1,arg2,arg3,arg4);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Perspective__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  Matrix *arg5 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  arg5 = (Matrix *)jarg5; 
  Matrix::Perspective(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Orthographic__SWIG_0___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  float_t arg5 ;
  float_t arg6 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  arg5 = (float_t)jarg5; 
  arg6 = (float_t)jarg6; 
  result = Matrix::Orthographic(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Orthographic__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, void * jarg7) {
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  float_t arg5 ;
  float_t arg6 ;
  Matrix *arg7 = (Matrix *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  arg5 = (float_t)jarg5; 
  arg6 = (float_t)jarg6; 
  arg7 = (Matrix *)jarg7; 
  Matrix::Orthographic(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_Decompose___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  Vector3 *arg5 = (Vector3 *) 0 ;
  Vector4 *arg6 = (Vector4 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  arg5 = (Vector3 *)jarg5; 
  arg6 = (Vector4 *)jarg6; 
  result = (bool_t)(arg1)->Decompose(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix__SWIG_0___() {
  void * jresult ;
  Matrix *result = 0 ;
  
  result = (Matrix *)new Matrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix__SWIG_1___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Matrix *)new Matrix(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix__SWIG_2___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Matrix *)new Matrix((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix__SWIG_3___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 *arg3 = 0 ;
  Vector4 *arg4 = 0 ;
  Matrix *result = 0 ;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg4 = (Vector4 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = (Matrix *)new Matrix((Vector4 const &)*arg1,(Vector4 const &)*arg2,(Vector4 const &)*arg3,(Vector4 const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix__SWIG_4___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  float_t arg5 ;
  float_t arg6 ;
  float_t arg7 ;
  float_t arg8 ;
  float_t arg9 ;
  float_t arg10 ;
  float_t arg11 ;
  float_t arg12 ;
  float_t arg13 ;
  float_t arg14 ;
  float_t arg15 ;
  float_t arg16 ;
  Matrix *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  arg5 = (float_t)jarg5; 
  arg6 = (float_t)jarg6; 
  arg7 = (float_t)jarg7; 
  arg8 = (float_t)jarg8; 
  arg9 = (float_t)jarg9; 
  arg10 = (float_t)jarg10; 
  arg11 = (float_t)jarg11; 
  arg12 = (float_t)jarg12; 
  arg13 = (float_t)jarg13; 
  arg14 = (float_t)jarg14; 
  arg15 = (float_t)jarg15; 
  arg16 = (float_t)jarg16; 
  result = (Matrix *)new Matrix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_DebugPrint___(void * jarg1) {
  Matrix *arg1 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  ((Matrix const *)arg1)->DebugPrint();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_IsDiagonal___(void * jarg1) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (bool_t)((Matrix const *)arg1)->IsDiagonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_IsIdentity___(void * jarg1) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (bool_t)((Matrix const *)arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_IsNull___(void * jarg1) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (bool_t)((Matrix const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_IsSymmetric___(void * jarg1) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (bool_t)((Matrix const *)arg1)->IsSymmetric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix_IsAntisymmetric___(void * jarg1) {
  unsigned int jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (bool_t)((Matrix const *)arg1)->IsAntisymmetric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Diagonal__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Vector4 result;
  
  arg1 = (Matrix *)jarg1; 
  result = ((Matrix const *)arg1)->Diagonal();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Diagonal__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  ((Matrix const *)arg1)->Diagonal(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_Trace___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t)((Matrix const *)arg1)->Trace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_Determinant___(void * jarg1) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  result = (float_t)((Matrix const *)arg1)->Determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Transposed__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1; 
  result = ((Matrix const *)arg1)->Transposed();
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Transposed__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  ((Matrix const *)arg1)->Transposed(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_Inverted__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1; 
  result = ((Matrix const *)arg1)->Inverted();
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix_Inverted__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  ((Matrix const *)arg1)->Inverted(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix_At___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float_t result;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float_t)((Matrix const *)arg1)->At(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  size_t arg2 ;
  Vector4 result;
  
  arg1 = (Matrix *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((Matrix const *)arg1)->operator [](arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix_ToMatrix3___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix3 result;
  
  arg1 = (Matrix *)jarg1; 
  result = ((Matrix const *)arg1)->operator Matrix3();
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Matrix___(void * jarg1) {
  Matrix *arg1 = (Matrix *) 0 ;
  
  arg1 = (Matrix *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = operator -((Matrix const &)*arg1);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = operator +((Matrix const &)*arg1,(Matrix const &)*arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = operator -((Matrix const &)*arg1,(Matrix const &)*arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_0___(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  float_t arg2 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator *((Matrix const &)*arg1,arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_1___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Matrix arg2 ;
  Matrix const *argp2 ;
  Matrix result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Matrix *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator *((Matrix const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator *((Matrix const &)*arg1,(Vector4 const &)*arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_4___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = operator *((Matrix const &)*arg1,(Matrix const &)*arg2);
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = (bool_t)operator ==((Matrix const &)*arg1,(Matrix const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  bool_t result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = (bool_t)operator !=((Matrix const &)*arg1,(Matrix const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m00_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m00 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m00_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m10_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m10 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m10_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m20_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m20 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m20_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m01_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m01 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m01_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m11_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m11 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m11_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m21_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m21 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m21_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m02_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m02 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m02_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m12_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m12 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m12_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_m22_set___(void * jarg1, float jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->m22 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_m22_get___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t) ((arg1)->m22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Identity__SWIG_0___() {
  void * jresult ;
  Matrix3 result;
  
  result = Matrix3::Identity();
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Identity__SWIG_1___(void * jarg1) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  Matrix3::Identity(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_0___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Vector3 *arg2 = 0 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix3::Rotation(arg1,(Vector3 const &)*arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_1___(float jarg1, void * jarg2, void * jarg3) {
  float_t arg1 ;
  Vector3 *arg2 = 0 ;
  Matrix3 *arg3 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (Matrix3 *)jarg3; 
  Matrix3::Rotation(arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationX__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix3::RotationX(arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationX__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::RotationX(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationX__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix3::RotationX(arg1,arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationX__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 *arg3 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix3 *)jarg3; 
  Matrix3::RotationX(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationY__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix3::RotationY(arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationY__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::RotationY(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationY__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix3::RotationY(arg1,arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationY__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 *arg3 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix3 *)jarg3; 
  Matrix3::RotationY(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationZ__SWIG_0___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  result = Matrix3::RotationZ(arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationZ__SWIG_1___(float jarg1, void * jarg2) {
  float_t arg1 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::RotationZ(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationZ__SWIG_2___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = Matrix3::RotationZ(arg1,arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_RotationZ__SWIG_3___(float jarg1, float jarg2, void * jarg3) {
  float_t arg1 ;
  float_t arg2 ;
  Matrix3 *arg3 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Matrix3 *)jarg3; 
  Matrix3::RotationZ(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_2___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix3::Rotation((Vector3 const &)*arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_3___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::Rotation((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_4___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Matrix3 result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = Matrix3::Rotation((Quaternion const &)*arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_5___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = 0 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::Rotation((Quaternion const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_6___(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix3::Rotation(arg1,arg2,(Vector3 const &)*arg3);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Rotation__SWIG_7___(float jarg1, float jarg2, void * jarg3, void * jarg4) {
  float_t arg1 ;
  float_t arg2 ;
  Vector3 *arg3 = 0 ;
  Matrix3 *arg4 = (Matrix3 *) 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg4 = (Matrix3 *)jarg4; 
  Matrix3::Rotation(arg1,arg2,(Vector3 const &)*arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Scaling__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Matrix3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Matrix3::Scaling((Vector3 const &)*arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Scaling__SWIG_1___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Matrix3 *)jarg2; 
  Matrix3::Scaling((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix3__SWIG_0___() {
  void * jresult ;
  Matrix3 *result = 0 ;
  
  result = (Matrix3 *)new Matrix3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix3__SWIG_1___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Matrix3 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Matrix3 *)new Matrix3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix3__SWIG_2___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Matrix3 *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Matrix3 *)new Matrix3((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix3__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  Matrix3 *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = (Matrix3 *)new Matrix3((Vector3 const &)*arg1,(Vector3 const &)*arg2,(Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Matrix3__SWIG_4___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  float_t arg5 ;
  float_t arg6 ;
  float_t arg7 ;
  float_t arg8 ;
  float_t arg9 ;
  Matrix3 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  arg5 = (float_t)jarg5; 
  arg6 = (float_t)jarg6; 
  arg7 = (float_t)jarg7; 
  arg8 = (float_t)jarg8; 
  arg9 = (float_t)jarg9; 
  result = (Matrix3 *)new Matrix3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_DebugPrint___(void * jarg1) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  ((Matrix3 const *)arg1)->DebugPrint();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix3_IsDiagonal___(void * jarg1) {
  unsigned int jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (bool_t)((Matrix3 const *)arg1)->IsDiagonal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix3_IsIdentity___(void * jarg1) {
  unsigned int jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (bool_t)((Matrix3 const *)arg1)->IsIdentity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix3_IsNull___(void * jarg1) {
  unsigned int jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (bool_t)((Matrix3 const *)arg1)->IsNull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix3_IsSymmetric___(void * jarg1) {
  unsigned int jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (bool_t)((Matrix3 const *)arg1)->IsSymmetric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Matrix3_IsAntisymmetric___(void * jarg1) {
  unsigned int jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (bool_t)((Matrix3 const *)arg1)->IsAntisymmetric();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Diagonal__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Vector3 result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = ((Matrix3 const *)arg1)->Diagonal();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Diagonal__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  ((Matrix3 const *)arg1)->Diagonal(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_Trace___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t)((Matrix3 const *)arg1)->Trace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_Determinant___(void * jarg1) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = (float_t)((Matrix3 const *)arg1)->Determinant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Transposed__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = ((Matrix3 const *)arg1)->Transposed();
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Transposed__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (Matrix3 *)jarg2; 
  ((Matrix3 const *)arg1)->Transposed(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_Inverted__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = ((Matrix3 const *)arg1)->Inverted();
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Matrix3_Inverted__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Matrix3 *arg2 = (Matrix3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (Matrix3 *)jarg2; 
  ((Matrix3 const *)arg1)->Inverted(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Matrix3_At___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  float jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  float_t result;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (float_t)((Matrix3 const *)arg1)->At(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  size_t arg2 ;
  Vector3 result;
  
  arg1 = (Matrix3 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((Matrix3 const *)arg1)->operator [](arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Matrix3_ToMatrix___(void * jarg1) {
  void * jresult ;
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  Matrix result;
  
  arg1 = (Matrix3 *)jarg1; 
  result = ((Matrix3 const *)arg1)->operator Matrix();
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Matrix3___(void * jarg1) {
  Matrix3 *arg1 = (Matrix3 *) 0 ;
  
  arg1 = (Matrix3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_2___(void * jarg1) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = operator -((Matrix3 const &)*arg1);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = operator +((Matrix3 const &)*arg1,(Matrix3 const &)*arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = operator -((Matrix3 const &)*arg1,(Matrix3 const &)*arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_5___(void * jarg1, float jarg2) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  float_t arg2 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator *((Matrix3 const &)*arg1,arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_6___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Matrix3 arg2 ;
  Matrix3 const *argp2 ;
  Matrix3 result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Matrix3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Matrix3 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_7___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator *((Matrix3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_8___(void * jarg1, void * jarg2) {
  void * jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  Matrix3 result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = operator *((Matrix3 const &)*arg1,(Matrix3 const &)*arg2);
  jresult = new Matrix3(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = (bool_t)operator ==((Matrix3 const &)*arg1,(Matrix3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Matrix3 *arg1 = 0 ;
  Matrix3 *arg2 = 0 ;
  bool_t result;
  
  arg1 = (Matrix3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  arg2 = (Matrix3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix3 const & is null", 0);
    return 0;
  } 
  result = (bool_t)operator !=((Matrix3 const &)*arg1,(Matrix3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector2_x_set___(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_x_get___(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float_t) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector2_y_set___(void * jarg1, float jarg2) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_y_get___(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float_t) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_Zero___() {
  void * jresult ;
  Vector2 result;
  
  result = Vector2::Zero();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_UnitX___() {
  void * jresult ;
  Vector2 result;
  
  result = Vector2::UnitX();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_UnitY___() {
  void * jresult ;
  Vector2 result;
  
  result = Vector2::UnitY();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_Dot___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  float_t result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2::Dot(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_Cross___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  float_t result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2::Cross(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_Determinant___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  float_t result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2::Determinant(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_Lerp___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  float_t arg3 ;
  Vector2 *argp1 ;
  Vector2 *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float_t)jarg3; 
  result = Vector2::Lerp(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),arg3);
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2__SWIG_0___() {
  void * jresult ;
  Vector2 *result = 0 ;
  
  result = (Vector2 *)new Vector2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2__SWIG_1___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Vector2 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Vector2 *)new Vector2(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2__SWIG_2___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Vector2 *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Vector2 *)new Vector2((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2__SWIG_3___(float jarg1, float jarg2) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  Vector2 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (Vector2 *)new Vector2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_Length___(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float_t)((Vector2 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_SquaredLength___(void * jarg1) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  float_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (float_t)((Vector2 const *)arg1)->SquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_Normalized___(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 result;
  
  arg1 = (Vector2 *)jarg1; 
  result = ((Vector2 const *)arg1)->Normalized();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_Normal___(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2 result;
  
  arg1 = (Vector2 *)jarg1; 
  result = ((Vector2 const *)arg1)->Normal();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector2_IsInfinity___(void * jarg1) {
  unsigned int jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  bool_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (bool_t)((Vector2 const *)arg1)->IsInfinity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector2_IsNaN___(void * jarg1) {
  unsigned int jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  bool_t result;
  
  arg1 = (Vector2 *)jarg1; 
  result = (bool_t)((Vector2 const *)arg1)->IsNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  size_t arg2 ;
  float_t result;
  
  arg1 = (Vector2 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float_t)((Vector2 const *)arg1)->operator [](arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_ToVector2i___(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector2i result;
  
  arg1 = (Vector2 *)jarg1; 
  result = ((Vector2 const *)arg1)->operator Vector2i();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_ToVector3___(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector3 result;
  
  arg1 = (Vector2 *)jarg1; 
  result = ((Vector2 const *)arg1)->operator Vector3();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2_ToVector4___(void * jarg1) {
  void * jresult ;
  Vector2 *arg1 = (Vector2 *) 0 ;
  Vector4 result;
  
  arg1 = (Vector2 *)jarg1; 
  result = ((Vector2 const *)arg1)->operator Vector4();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Vector2___(void * jarg1) {
  Vector2 *arg1 = (Vector2 *) 0 ;
  
  arg1 = (Vector2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator +(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_4___(void * jarg1) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 const *argp1 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = operator -(SWIG_STD_MOVE(arg1));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_5___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator -(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_9___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_10___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  float_t arg2 ;
  Vector2 const *argp1 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator *(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_11___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp2 ;
  Vector2 result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator /(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_1___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2 arg1 ;
  float_t arg2 ;
  Vector2 const *argp1 ;
  Vector2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator /(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator ==(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2 arg1 ;
  Vector2 arg2 ;
  Vector2 const *argp1 ;
  Vector2 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator !=(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector2i_x_set___(void * jarg1, int jarg2) {
  Vector2i *arg1 = (Vector2i *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Vector2i *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Vector2i_x_get___(void * jarg1) {
  int jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  int32_t result;
  
  arg1 = (Vector2i *)jarg1; 
  result = (int32_t) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector2i_y_set___(void * jarg1, int jarg2) {
  Vector2i *arg1 = (Vector2i *) 0 ;
  int32_t arg2 ;
  
  arg1 = (Vector2i *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Vector2i_y_get___(void * jarg1) {
  int jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  int32_t result;
  
  arg1 = (Vector2i *)jarg1; 
  result = (int32_t) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_Zero___() {
  void * jresult ;
  Vector2i result;
  
  result = Vector2i::Zero();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_UnitX___() {
  void * jresult ;
  Vector2i result;
  
  result = Vector2i::UnitX();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_UnitY___() {
  void * jresult ;
  Vector2i result;
  
  result = Vector2i::UnitY();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2i_Dot___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i *argp1 ;
  Vector2i *argp2 ;
  float_t result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2i::Dot(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2i_Cross___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i *argp1 ;
  Vector2i *argp2 ;
  float_t result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2i::Cross(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2i_Determinant___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i *argp1 ;
  Vector2i *argp2 ;
  float_t result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float_t)Vector2i::Determinant(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2i__SWIG_0___() {
  void * jresult ;
  Vector2i *result = 0 ;
  
  result = (Vector2i *)new Vector2i();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2i__SWIG_1___(int jarg1) {
  void * jresult ;
  int32_t arg1 ;
  Vector2i *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  result = (Vector2i *)new Vector2i(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2i__SWIG_2___(void * jarg1) {
  void * jresult ;
  int32_t *arg1 = (int32_t *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (int32_t *)jarg1; 
  result = (Vector2i *)new Vector2i((int32_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector2i__SWIG_3___(int jarg1, int jarg2) {
  void * jresult ;
  int32_t arg1 ;
  int32_t arg2 ;
  Vector2i *result = 0 ;
  
  arg1 = (int32_t)jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (Vector2i *)new Vector2i(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2i_Length___(void * jarg1) {
  float jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  float_t result;
  
  arg1 = (Vector2i *)jarg1; 
  result = (float_t)((Vector2i const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector2i_SquaredLength___(void * jarg1) {
  float jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  float_t result;
  
  arg1 = (Vector2i *)jarg1; 
  result = (float_t)((Vector2i const *)arg1)->SquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_Normalized___(void * jarg1) {
  void * jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  Vector2 result;
  
  arg1 = (Vector2i *)jarg1; 
  result = ((Vector2i const *)arg1)->Normalized();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_Normal___(void * jarg1) {
  void * jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  Vector2 result;
  
  arg1 = (Vector2i *)jarg1; 
  result = ((Vector2i const *)arg1)->Normal();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Vector2i_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  size_t arg2 ;
  int32_t result;
  
  arg1 = (Vector2i *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int32_t)((Vector2i const *)arg1)->operator [](arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_ToVector2___(void * jarg1) {
  void * jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  Vector2 result;
  
  arg1 = (Vector2i *)jarg1; 
  result = ((Vector2i const *)arg1)->operator Vector2();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_ToVector3___(void * jarg1) {
  void * jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  Vector3 result;
  
  arg1 = (Vector2i *)jarg1; 
  result = ((Vector2i const *)arg1)->operator Vector3();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector2i_ToVector4___(void * jarg1) {
  void * jresult ;
  Vector2i *arg1 = (Vector2i *) 0 ;
  Vector4 result;
  
  arg1 = (Vector2i *)jarg1; 
  result = ((Vector2i const *)arg1)->operator Vector4();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Vector2i___(void * jarg1) {
  Vector2i *arg1 = (Vector2i *) 0 ;
  
  arg1 = (Vector2i *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  Vector2i result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator +(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_6___(void * jarg1) {
  void * jresult ;
  Vector2i arg1 ;
  Vector2i const *argp1 ;
  Vector2i result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = operator -(SWIG_STD_MOVE(arg1));
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_7___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  Vector2i result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator -(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_12___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  Vector2i result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_13___(void * jarg1, int jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  int32_t arg2 ;
  Vector2i const *argp1 ;
  Vector2i result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int32_t)jarg2; 
  result = operator *(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_14___(int jarg1, void * jarg2) {
  void * jresult ;
  int32_t arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp2 ;
  Vector2i result;
  
  arg1 = (int32_t)jarg1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  Vector2 result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator /(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_3___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector2i arg1 ;
  float_t arg2 ;
  Vector2i const *argp1 ;
  Vector2 result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator /(SWIG_STD_MOVE(arg1),arg2);
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  bool_t result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator ==(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector2i arg1 ;
  Vector2i arg2 ;
  Vector2i const *argp1 ;
  Vector2i const *argp2 ;
  bool_t result;
  
  argp1 = (Vector2i *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator !=(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_x_set___(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_x_get___(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float_t) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_y_set___(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_y_get___(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float_t) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_z_set___(void * jarg1, float jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_z_get___(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float_t) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Zero__SWIG_0___() {
  void * jresult ;
  Vector3 result;
  
  result = Vector3::Zero();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_Zero__SWIG_1___(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  Vector3::Zero(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitX__SWIG_0___() {
  void * jresult ;
  Vector3 result;
  
  result = Vector3::UnitX();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitX__SWIG_1___(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  Vector3::UnitX(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitY__SWIG_0___() {
  void * jresult ;
  Vector3 result;
  
  result = Vector3::UnitY();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitY__SWIG_1___(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  Vector3::UnitY(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitZ__SWIG_0___() {
  void * jresult ;
  Vector3 result;
  
  result = Vector3::UnitZ();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_UnitZ__SWIG_1___(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  Vector3::UnitZ(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_Dot___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = (float_t)Vector3::Dot((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Cross__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Vector3::Cross((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_Cross__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3; 
  Vector3::Cross((Vector3 const &)*arg1,(Vector3 const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Lerp__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  float_t arg3 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg3 = (float_t)jarg3; 
  result = Vector3::Lerp((Vector3 const &)*arg1,(Vector3 const &)*arg2,arg3);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_Lerp__SWIG_1___(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  float_t arg3 ;
  Vector3 *arg4 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg3 = (float_t)jarg3; 
  arg4 = (Vector3 *)jarg4; 
  Vector3::Lerp((Vector3 const &)*arg1,(Vector3 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Combine___(void * jarg1, void * jarg2, float jarg3, float jarg4) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  float_t arg3 ;
  float_t arg4 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = Vector3::Combine((Vector3 const &)*arg1,(Vector3 const &)*arg2,arg3,arg4);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector3__SWIG_0___() {
  void * jresult ;
  Vector3 *result = 0 ;
  
  result = (Vector3 *)new Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector3__SWIG_1___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Vector3 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Vector3 *)new Vector3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector3__SWIG_2___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Vector3 *)new Vector3((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector3__SWIG_3___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  Vector3 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  result = (Vector3 *)new Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_Length___(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float_t)((Vector3 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Rescaled___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t arg2 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (float_t)jarg2; 
  result = (arg1)->Rescaled(arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_SquaredLength___(void * jarg1) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (float_t)((Vector3 const *)arg1)->SquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_Normalized__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1; 
  result = ((Vector3 const *)arg1)->Normalized();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector3_Normalized__SWIG_1___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  ((Vector3 const *)arg1)->Normalized(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector3_IsInfinity___(void * jarg1) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  bool_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (bool_t)((Vector3 const *)arg1)->IsInfinity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector3_IsNaN___(void * jarg1) {
  unsigned int jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  bool_t result;
  
  arg1 = (Vector3 *)jarg1; 
  result = (bool_t)((Vector3 const *)arg1)->IsNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector3_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  size_t arg2 ;
  float_t result;
  
  arg1 = (Vector3 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float_t)((Vector3 const *)arg1)->operator [](arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_ToVector2___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector2 result;
  
  arg1 = (Vector3 *)jarg1; 
  result = ((Vector3 const *)arg1)->operator Vector2();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector3_ToVector4___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = (Vector3 *) 0 ;
  Vector4 result;
  
  arg1 = (Vector3 *)jarg1; 
  result = ((Vector3 const *)arg1)->operator Vector4();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Vector3___(void * jarg1) {
  Vector3 *arg1 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_4___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator +((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_8___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator -((Vector3 const &)*arg1);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_9___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator -((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_15___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator *((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_16___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator *((Vector3 const &)*arg1,arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_17___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Vector3 arg2 ;
  Vector3 const *argp2 ;
  Vector3 result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_4___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator /((Vector3 const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_5___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator /((Vector3 const &)*arg1,arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_4___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector3 arg1 ;
  Vector3 arg2 ;
  Vector3 const *argp1 ;
  Vector3 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator ==(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_4___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector3 arg1 ;
  Vector3 arg2 ;
  Vector3 const *argp1 ;
  Vector3 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator !=(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_x_set___(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_x_get___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_y_set___(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_y_get___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_z_set___(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_z_get___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_w_set___(void * jarg1, float jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t arg2 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_w_get___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_Zero__SWIG_0___() {
  void * jresult ;
  Vector4 result;
  
  result = Vector4::Zero();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_Zero__SWIG_1___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  Vector4::Zero(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitX__SWIG_0___() {
  void * jresult ;
  Vector4 result;
  
  result = Vector4::UnitX();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitX__SWIG_1___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  Vector4::UnitX(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitY__SWIG_0___() {
  void * jresult ;
  Vector4 result;
  
  result = Vector4::UnitY();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitY__SWIG_1___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  Vector4::UnitY(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitZ__SWIG_0___() {
  void * jresult ;
  Vector4 result;
  
  result = Vector4::UnitZ();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitZ__SWIG_1___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  Vector4::UnitZ(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitW__SWIG_0___() {
  void * jresult ;
  Vector4 result;
  
  result = Vector4::UnitW();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_UnitW__SWIG_1___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  Vector4::UnitW(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector4__SWIG_0___() {
  void * jresult ;
  Vector4 *result = 0 ;
  
  result = (Vector4 *)new Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector4__SWIG_1___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Vector4 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Vector4 *)new Vector4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector4__SWIG_2___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Vector4 *)new Vector4((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Vector4__SWIG_3___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  Vector4 *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = (Vector4 *)new Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_Length___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t)((Vector4 const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_SquaredLength___(void * jarg1) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (float_t)((Vector4 const *)arg1)->SquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_Normalized__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1; 
  result = ((Vector4 const *)arg1)->Normalized();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_Normalized__SWIG_1___(void * jarg1, void * jarg2) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  ((Vector4 const *)arg1)->Normalized(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector4_IsInfinity___(void * jarg1) {
  unsigned int jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  bool_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (bool_t)((Vector4 const *)arg1)->IsInfinity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Vector4_IsNaN___(void * jarg1) {
  unsigned int jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  bool_t result;
  
  arg1 = (Vector4 *)jarg1; 
  result = (bool_t)((Vector4 const *)arg1)->IsNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_Dot___(void * jarg1, void * jarg2) {
  float jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = (float_t)Vector4::Dot((Vector4 const &)*arg1,(Vector4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_Lerp__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  float_t arg3 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg3 = (float_t)jarg3; 
  result = Vector4::Lerp((Vector4 const &)*arg1,(Vector4 const &)*arg2,arg3);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Vector4_Lerp__SWIG_1___(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  float_t arg3 ;
  Vector4 *arg4 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return ;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return ;
  } 
  arg3 = (float_t)jarg3; 
  arg4 = (Vector4 *)jarg4; 
  Vector4::Lerp((Vector4 const &)*arg1,(Vector4 const &)*arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Vector4_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  size_t arg2 ;
  float_t result;
  
  arg1 = (Vector4 *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float_t)((Vector4 const *)arg1)->operator [](arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_ToVector2___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector2 result;
  
  arg1 = (Vector4 *)jarg1; 
  result = ((Vector4 const *)arg1)->operator Vector2();
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_ToVector3___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Vector3 result;
  
  arg1 = (Vector4 *)jarg1; 
  result = ((Vector4 const *)arg1)->operator Vector3();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Vector4_ToMatrix___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = (Vector4 *) 0 ;
  Matrix result;
  
  arg1 = (Vector4 *)jarg1; 
  result = ((Vector4 const *)arg1)->operator Matrix();
  jresult = new Matrix(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Vector4___(void * jarg1) {
  Vector4 *arg1 = (Vector4 *) 0 ;
  
  arg1 = (Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_5___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator +((Vector4 const &)*arg1,(Vector4 const &)*arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_10___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator -((Vector4 const &)*arg1);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_11___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator -((Vector4 const &)*arg1,(Vector4 const &)*arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_18___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator *((Vector4 const &)*arg1,(Vector4 const &)*arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_19___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  float_t arg2 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator *((Vector4 const &)*arg1,arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_20___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Vector4 arg2 ;
  Vector4 const *argp2 ;
  Vector4 result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_6___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Vector4 *arg2 = 0 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = operator /((Vector4 const &)*arg1,(Vector4 const &)*arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_7___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  float_t arg2 ;
  Vector4 result;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator /((Vector4 const &)*arg1,arg2);
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_5___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector4 arg1 ;
  Vector4 arg2 ;
  Vector4 const *argp1 ;
  Vector4 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector4 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator ==(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_5___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Vector4 arg1 ;
  Vector4 arg2 ;
  Vector4 const *argp1 ;
  Vector4 const *argp2 ;
  bool_t result;
  
  argp1 = (Vector4 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4 const", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Vector4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector4 const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool_t)operator !=(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_imaginary_set___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->imaginary = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_imaginary_get___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  result = (Vector3 *)& ((arg1)->imaginary);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_real_set___(void * jarg1, float jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t arg2 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->real = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_real_get___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t) ((arg1)->real);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Zero__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::Zero();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Zero__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::Zero(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitX__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::UnitX();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitX__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::UnitX(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitY__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::UnitY();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitY__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::UnitY(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitZ__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::UnitZ();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitZ__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::UnitZ(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitW__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::UnitW();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_UnitW__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::UnitW(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Identity__SWIG_0___() {
  void * jresult ;
  Quaternion result;
  
  result = Quaternion::Identity();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Identity__SWIG_1___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  Quaternion::Identity(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromAxisAngle__SWIG_0___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Quaternion result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = Quaternion::FromAxisAngle((Vector3 const &)*arg1,arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromAxisAngle__SWIG_1___(void * jarg1, float jarg2, void * jarg3) {
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Quaternion *arg3 = (Quaternion *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (float_t)jarg2; 
  arg3 = (Quaternion *)jarg3; 
  Quaternion::FromAxisAngle((Vector3 const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromEuler__SWIG_0___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Quaternion result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = Quaternion::FromEuler((Vector3 const &)*arg1);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromEuler__SWIG_1___(void * jarg1, void * jarg2) {
  Vector3 *arg1 = 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2; 
  Quaternion::FromEuler((Vector3 const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromRotationMatrix__SWIG_0___(void * jarg1) {
  void * jresult ;
  Matrix *arg1 = 0 ;
  Quaternion result;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = Quaternion::FromRotationMatrix((Matrix const &)*arg1);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_FromRotationMatrix__SWIG_1___(void * jarg1, void * jarg2) {
  Matrix *arg1 = 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Matrix *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2; 
  Quaternion::FromRotationMatrix((Matrix const &)*arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_ToEuler__SWIG_0___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Vector3 result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = Quaternion::ToEuler((Quaternion const &)*arg1);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_ToEuler__SWIG_1___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg2 = (Vector3 *)jarg2; 
  Quaternion::ToEuler((Quaternion const &)*arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_Dot___(void * jarg1, void * jarg2) {
  float jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = (float_t)Quaternion::Dot((Quaternion const &)*arg1,(Quaternion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Lerp__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  float_t arg3 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg3 = (float_t)jarg3; 
  result = Quaternion::Lerp((Quaternion const &)*arg1,(Quaternion const &)*arg2,arg3);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Lerp__SWIG_1___(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  float_t arg3 ;
  Quaternion *arg4 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg3 = (float_t)jarg3; 
  arg4 = (Quaternion *)jarg4; 
  Quaternion::Lerp((Quaternion const &)*arg1,(Quaternion const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Slerp__SWIG_0___(void * jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  float_t arg3 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg3 = (float_t)jarg3; 
  result = Quaternion::Slerp((Quaternion const &)*arg1,(Quaternion const &)*arg2,arg3);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Slerp__SWIG_1___(void * jarg1, void * jarg2, float jarg3, void * jarg4) {
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  float_t arg3 ;
  Quaternion *arg4 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg3 = (float_t)jarg3; 
  arg4 = (Quaternion *)jarg4; 
  Quaternion::Slerp((Quaternion const &)*arg1,(Quaternion const &)*arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Rotate__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Vector3 result;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = Quaternion::Rotate((Vector3 const &)*arg1,(Quaternion const &)*arg2);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Rotate__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  Vector3 *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Vector3 *arg3 = (Vector3 *) 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return ;
  } 
  arg3 = (Vector3 *)jarg3; 
  Quaternion::Rotate((Vector3 const &)*arg1,(Quaternion const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_0___() {
  void * jresult ;
  Quaternion *result = 0 ;
  
  result = (Quaternion *)new Quaternion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_1___(void * jarg1) {
  void * jresult ;
  Vector4 *arg1 = 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Vector4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return 0;
  } 
  result = (Quaternion *)new Quaternion((Vector4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_2___(void * jarg1, float jarg2) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  float_t arg2 ;
  Quaternion *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = (Quaternion *)new Quaternion((Vector3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_3___(void * jarg1) {
  void * jresult ;
  Vector3 *arg1 = 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = (Quaternion *)new Quaternion((Vector3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_4___(float jarg1) {
  void * jresult ;
  float_t arg1 ;
  Quaternion *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  result = (Quaternion *)new Quaternion(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_5___(void * jarg1) {
  void * jresult ;
  float_t *arg1 = (float_t *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (float_t *)jarg1; 
  result = (Quaternion *)new Quaternion((float_t const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Quaternion__SWIG_6___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  Quaternion *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = (Quaternion *)new Quaternion(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_X___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->X();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_Y___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->Y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_Z___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->Z();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_W___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->W();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Conjugate__SWIG_0___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1; 
  result = ((Quaternion const *)arg1)->Conjugate();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Conjugate__SWIG_1___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  ((Quaternion const *)arg1)->Conjugate(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Normalized__SWIG_0___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1; 
  result = ((Quaternion const *)arg1)->Normalized();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Normalized__SWIG_1___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  ((Quaternion const *)arg1)->Normalized(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_Length___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->Length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_SquaredLength___(void * jarg1) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (float_t)((Quaternion const *)arg1)->SquaredLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Quaternion_IsInfinity___(void * jarg1) {
  unsigned int jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  bool_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (bool_t)((Quaternion const *)arg1)->IsInfinity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Quaternion_IsNaN___(void * jarg1) {
  unsigned int jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  bool_t result;
  
  arg1 = (Quaternion *)jarg1; 
  result = (bool_t)((Quaternion const *)arg1)->IsNaN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_Inverted__SWIG_0___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1; 
  result = ((Quaternion const *)arg1)->Inverted();
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Quaternion_Inverted__SWIG_1___(void * jarg1, void * jarg2) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  Quaternion *arg2 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (Quaternion *)jarg2; 
  ((Quaternion const *)arg1)->Inverted(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Quaternion_OperatorIndex___(void * jarg1, unsigned int jarg2) {
  float jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  size_t arg2 ;
  float_t result;
  
  arg1 = (Quaternion *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (float_t)((Quaternion const *)arg1)->operator [](arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_ToVector3___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector3 result;
  
  arg1 = (Quaternion *)jarg1; 
  result = ((Quaternion const *)arg1)->operator Vector3();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Quaternion_ToVector4___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = (Quaternion *) 0 ;
  Vector4 result;
  
  arg1 = (Quaternion *)jarg1; 
  result = ((Quaternion const *)arg1)->operator Vector4();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Quaternion___(void * jarg1) {
  Quaternion *arg1 = (Quaternion *) 0 ;
  
  arg1 = (Quaternion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_6___(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = operator +((Quaternion const &)*arg1,(Quaternion const &)*arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_12___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = operator -((Quaternion const &)*arg1);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorSub__SWIG_13___(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = operator -((Quaternion const &)*arg1,(Quaternion const &)*arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_21___(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Quaternion *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Quaternion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = operator *((Quaternion const &)*arg1,(Quaternion const &)*arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_22___(void * jarg1, void * jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Vector3 *arg2 = 0 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  result = operator *((Quaternion const &)*arg1,(Vector3 const &)*arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_23___(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  float_t arg2 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator *((Quaternion const &)*arg1,arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_24___(float jarg1, void * jarg2) {
  void * jresult ;
  float_t arg1 ;
  Quaternion arg2 ;
  Quaternion const *argp2 ;
  Quaternion result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion const", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(arg1,SWIG_STD_MOVE(arg2));
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorDiv__SWIG_8___(void * jarg1, float jarg2) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  float_t arg2 ;
  Quaternion result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  arg2 = (float_t)jarg2; 
  result = operator /((Quaternion const &)*arg1,arg2);
  jresult = new Quaternion(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorEq__SWIG_6___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quaternion arg1 ;
  Quaternion arg2 ;
  Quaternion *argp1 ;
  Quaternion *argp2 ;
  bool result;
  
  argp1 = (Quaternion *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)operator ==(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_OperatorNotEq__SWIG_6___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Quaternion arg1 ;
  Quaternion arg2 ;
  Quaternion *argp1 ;
  Quaternion *argp2 ;
  bool result;
  
  argp1 = (Quaternion *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Quaternion *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Quaternion", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)operator !=(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_minimumConsoleLevel_set___(int jarg1) {
  XnorCore::Logger::LogLevel arg1 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  XnorCore::Logger::minimumConsoleLevel = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Logger_minimumConsoleLevel_get___() {
  int jresult ;
  XnorCore::Logger::LogLevel result;
  
  result = (XnorCore::Logger::LogLevel)XnorCore::Logger::minimumConsoleLevel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_minimumFileLevel_set___(int jarg1) {
  XnorCore::Logger::LogLevel arg1 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  XnorCore::Logger::minimumFileLevel = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Logger_minimumFileLevel_get___() {
  int jresult ;
  XnorCore::Logger::LogLevel result;
  
  result = (XnorCore::Logger::LogLevel)XnorCore::Logger::minimumFileLevel;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_OpenFile___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Logger::OpenFile((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_OpenDefaultFile___() {
  XnorCore::Logger::OpenDefaultFile();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Logger_HasFileOpen___() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)XnorCore::Logger::HasFileOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_CloseFile___() {
  XnorCore::Logger::CloseFile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_Synchronize___() {
  XnorCore::Logger::Synchronize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogString___(int jarg1, const char * jarg2) {
  XnorCore::Logger::LogLevel arg1 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Logger::LogLevel)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR Log< >(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogTempDebugString___(const char * jarg1, char * jarg2, int jarg3) {
  std::string *arg1 = 0 ;
  char_t *arg2 = (char_t *) 0 ;
  int32_t arg3 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (char_t *)jarg2; 
  arg3 = (int32_t)jarg3; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogTempDebug< >((std::string const &)*arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogDebugString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogDebug< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogInfoString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogInfo< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogWarningString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogWarning< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogErrorString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogError< >((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Logger_LogFatalString___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::Logger::SWIGTEMPLATEDISAMBIGUATOR LogFatal< >((std::string const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Construct___() {
  void * jresult ;
  XnorCore::Construct *result = 0 ;
  
  result = (XnorCore::Construct *)new XnorCore::Construct();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Construct___(void * jarg1) {
  XnorCore::Construct *arg1 = (XnorCore::Construct *) 0 ;
  
  arg1 = (XnorCore::Construct *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Guid___() {
  void * jresult ;
  XnorCore::Guid *result = 0 ;
  
  result = (XnorCore::Guid *)new XnorCore::Guid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Guid_New___() {
  void * jresult ;
  XnorCore::Guid result;
  
  result = XnorCore::Guid::New();
  jresult = new XnorCore::Guid(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Guid_OperatorEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Guid const *)arg1)->operator ==((XnorCore::Guid const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Guid_FromString___(char * jarg1) {
  void * jresult ;
  char_t *arg1 = (char_t *) 0 ;
  XnorCore::Guid result;
  
  arg1 = (char_t *)jarg1; 
  result = XnorCore::Guid::FromString((char const *)arg1);
  jresult = new XnorCore::Guid(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Guid_ToString___(void * jarg1) {
  const char * jresult ;
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  result = ((XnorCore::Guid const *)arg1)->operator std::string();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Guid___(void * jarg1) {
  XnorCore::Guid *arg1 = (XnorCore::Guid *) 0 ;
  
  arg1 = (XnorCore::Guid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Resource___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_CreateInRhi___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->CreateInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_DestroyInRhi___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->DestroyInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_Unload___(void * jarg1) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_0___(void * jarg1, void * jarg2, long long jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t arg4 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool_t)(arg1)->Reload((uint8_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Reload((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool_t)(arg1)->Reload((XnorCore::Pointer< XnorCore::File > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Reload((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_4___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool_t)(arg1)->Reload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_Reload__SWIG_5___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)(arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_IsLoaded___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)((XnorCore::Resource const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Resource_IsLoadedInRhi___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (bool_t)((XnorCore::Resource const *)arg1)->IsLoadedInRhi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Resource_GetName___(void * jarg1) {
  const char * jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = ((XnorCore::Resource const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  std::string arg2 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->SetName(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Resource_SetGuid___(void * jarg1, void * jarg2) {
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return ;
  } 
  (arg1)->SetGuid((XnorCore::Guid const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Resource_GetGuid___(void * jarg1) {
  void * jresult ;
  XnorCore::Resource *arg1 = (XnorCore::Resource *) 0 ;
  XnorCore::Guid *result = 0 ;
  
  arg1 = (XnorCore::Resource *)jarg1; 
  result = (XnorCore::Guid *) &((XnorCore::Resource const *)arg1)->GetGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Entry___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_Unload___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_Reload___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)(arg1)->Reload();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_OpenInExplorer___(void * jarg1) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  ((XnorCore::Entry const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entry_GetPath___(void * jarg1) {
  void * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::filesystem::path *result = 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (std::filesystem::path *) &((XnorCore::Entry const *)arg1)->GetPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entry_GetPathString___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = ((XnorCore::Entry const *)arg1)->GetPathString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entry_GetName___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = ((XnorCore::Entry const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entry_GetLoaded___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (bool_t)((XnorCore::Entry const *)arg1)->GetLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entry_SetParent___(void * jarg1, void * jarg2) {
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  XnorCore::Pointer< XnorCore::Directory > *arg2 = 0 ;
  std::unique_ptr< XnorCore::Pointer< XnorCore::Directory > > rvrdeleter2 ;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Directory > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Directory > && is null", 0);
    return ;
  }
  rvrdeleter2.reset(arg2); 
  (arg1)->SetParent((XnorCore::Pointer< XnorCore::Directory > &&)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entry_GetParent___(void * jarg1) {
  void * jresult ;
  XnorCore::Entry *arg1 = (XnorCore::Entry *) 0 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  arg1 = (XnorCore::Entry *)jarg1; 
  result = (arg1)->GetParent();
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Directory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  std::unique_ptr< std::filesystem::path > rvrdeleter1 ;
  XnorCore::Directory *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (XnorCore::Directory *)new XnorCore::Directory((std::filesystem::path &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Directory___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Directory_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_Unload___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_OpenInExplorer___(void * jarg1) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  ((XnorCore::Directory const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildEntries___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::Entry > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::Entry > > *) &((XnorCore::Directory const *)arg1)->GetChildEntries();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildFiles___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::File > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::File > > *) &((XnorCore::Directory const *)arg1)->GetChildFiles();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Directory_GetChildDirectories___(void * jarg1) {
  void * jresult ;
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::vector< XnorCore::Pointer< XnorCore::Directory > > *result = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  result = (std::vector< XnorCore::Pointer< XnorCore::Directory > > *) &((XnorCore::Directory const *)arg1)->GetChildDirectories();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Directory_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::Directory *arg1 = (XnorCore::Directory *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Directory *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_File___(void * jarg1) {
  void * jresult ;
  std::filesystem::path *arg1 = 0 ;
  std::unique_ptr< std::filesystem::path > rvrdeleter1 ;
  XnorCore::File *result = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path && is null", 0);
    return 0;
  }
  rvrdeleter1.reset(arg1); 
  result = (XnorCore::File *)new XnorCore::File((std::filesystem::path &&)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_File___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_File_Load___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (bool_t)(arg1)->Load();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_Unload___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_OpenInExplorer___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  ((XnorCore::File const *)arg1)->OpenInExplorer();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_OpenFile___(void * jarg1) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  ((XnorCore::File const *)arg1)->OpenFile();
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_File_GetFileType___(void * jarg1) {
  int jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  XnorCore::File::Type result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (XnorCore::File::Type)((XnorCore::File const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_File_GetNameNoExtension___(void * jarg1) {
  const char * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetNameNoExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_File_GetExtension___(void * jarg1) {
  const char * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetExtension();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_XnorfCore_File_GetSize___(void * jarg1) {
  long long jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  int64_t result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = (int64_t)((XnorCore::File const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_File_SetName___(void * jarg1, const char * jarg2) {
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::File *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_File_GetResource___(void * jarg1) {
  void * jresult ;
  XnorCore::File *arg1 = (XnorCore::File *) 0 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Resource > > result;
  
  arg1 = (XnorCore::File *)jarg1; 
  result = ((XnorCore::File const *)arg1)->GetResource();
  jresult = new XnorCore::Pointer< XnorCore::Resource >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_Add___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::File > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::Add(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::File >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_Load___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::File > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::Load(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::File >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_AddDirectory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::AddDirectory(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FileManager_LoadDirectory___(void * jarg1) {
  void * jresult ;
  std::filesystem::path arg1 ;
  std::filesystem::path *argp1 ;
  SwigValueWrapper< XnorCore::Pointer< XnorCore::Directory > > result;
  
  argp1 = (std::filesystem::path *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::filesystem::path", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::FileManager::LoadDirectory(SWIG_STD_MOVE(arg1));
  jresult = new XnorCore::Pointer< XnorCore::Directory >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_FileManager_Contains___(void * jarg1) {
  unsigned int jresult ;
  std::filesystem::path *arg1 = 0 ;
  bool result;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return 0;
  } 
  result = (bool)XnorCore::FileManager::Contains((std::filesystem::path const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Rename__SWIG_0___(void * jarg1, void * jarg2) {
  std::filesystem::path *arg1 = 0 ;
  std::filesystem::path *arg2 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Rename((std::filesystem::path const &)*arg1,(std::filesystem::path const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Rename__SWIG_1___(void * jarg1, void * jarg2) {
  XnorCore::Pointer< XnorCore::Entry > *arg1 = 0 ;
  std::filesystem::path *arg2 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Entry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Entry > const & is null", 0);
    return ;
  } 
  arg2 = (std::filesystem::path *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Rename((XnorCore::Pointer< XnorCore::Entry > const &)*arg1,(std::filesystem::path const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Unload__SWIG_0___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Unload((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_Unload__SWIG_1___(void * jarg1) {
  XnorCore::Pointer< XnorCore::Entry > *arg1 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Entry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Entry > const & is null", 0);
    return ;
  } 
  XnorCore::FileManager::Unload((XnorCore::Pointer< XnorCore::Entry > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_FileManager_UnloadAll___() {
  XnorCore::FileManager::UnloadAll();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxSpotLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxSpotLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxPointLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxPointLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MaxDirectionalLights_get___() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)XnorCore::MaxDirectionalLights;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_enableCullFace_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableCullFace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_enableCullFace_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  bool result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (bool) ((arg1)->enableCullFace);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_cullFace_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::CullFace::CullFace arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = (XnorCore::CullFace::CullFace)jarg2; 
  if (arg1) (arg1)->cullFace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_cullFace_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::CullFace::CullFace result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (XnorCore::CullFace::CullFace) ((arg1)->cullFace);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_frontFace_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::FrontFace::FrontFace arg2 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  arg2 = (XnorCore::FrontFace::FrontFace)jarg2; 
  if (arg1) (arg1)->frontFace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderProgramCullInfo_frontFace_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  XnorCore::FrontFace::FrontFace result;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  result = (XnorCore::FrontFace::FrontFace) ((arg1)->frontFace);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderProgramCullInfo___() {
  void * jresult ;
  XnorCore::ShaderProgramCullInfo *result = 0 ;
  
  result = (XnorCore::ShaderProgramCullInfo *)new XnorCore::ShaderProgramCullInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderProgramCullInfo___(void * jarg1) {
  XnorCore::ShaderProgramCullInfo *arg1 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderProgramCullInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_code_set___(void * jarg1, const char * jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->code = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_ShaderCode_code_get___(void * jarg1) {
  const char * jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (std::string *) & ((arg1)->code);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_codeLength_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->codeLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCode_codeLength_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (int32_t) ((arg1)->codeLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCode_type_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  XnorCore::ShaderType::ShaderType arg2 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  arg2 = (XnorCore::ShaderType::ShaderType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCode_type_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  XnorCore::ShaderType::ShaderType result;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  result = (XnorCore::ShaderType::ShaderType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderCode___() {
  void * jresult ;
  XnorCore::ShaderCode *result = 0 ;
  
  result = (XnorCore::ShaderCode *)new XnorCore::ShaderCode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderCode___(void * jarg1) {
  XnorCore::ShaderCode *arg1 = (XnorCore::ShaderCode *) 0 ;
  
  arg1 = (XnorCore::ShaderCode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_attachment_set___(void * jarg1, int jarg2) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  XnorCore::Attachment::Attachment arg2 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  arg2 = (XnorCore::Attachment::Attachment)jarg2; 
  if (arg1) (arg1)->attachment = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_attachment_get___(void * jarg1) {
  int jresult ;
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  XnorCore::Attachment::Attachment result;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  result = (XnorCore::Attachment::Attachment) ((arg1)->attachment);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_isDrawingOn_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDrawingOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_RenderTargetInfo_isDrawingOn_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  bool result;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  result = (bool) ((arg1)->isDrawingOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_RenderTargetInfo___() {
  void * jresult ;
  XnorCore::RenderTargetInfo *result = 0 ;
  
  result = (XnorCore::RenderTargetInfo *)new XnorCore::RenderTargetInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_RenderTargetInfo___(void * jarg1) {
  XnorCore::RenderTargetInfo *arg1 = (XnorCore::RenderTargetInfo *) 0 ;
  
  arg1 = (XnorCore::RenderTargetInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_data_set___(void * jarg1, void * jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_data_get___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (void *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_size_set___(void * jarg1, void * jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (Vector2i *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_size_get___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_filtering_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureFiltering::TextureFiltering)jarg2; 
  if (arg1) (arg1)->filtering = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_filtering_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureFiltering::TextureFiltering) ((arg1)->filtering);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_wrapping_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureWrapping::TextureWrapping)jarg2; 
  if (arg1) (arg1)->wrapping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_wrapping_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureWrapping::TextureWrapping) ((arg1)->wrapping);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_format_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureFormat::TextureFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_format_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureFormat::TextureFormat) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_internalFormat_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg2; 
  if (arg1) (arg1)->internalFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_internalFormat_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::TextureInternalFormat::TextureInternalFormat) ((arg1)->internalFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_dataType_set___(void * jarg1, int jarg2) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::DataType::DataType arg2 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  arg2 = (XnorCore::DataType::DataType)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_TextureCreateInfo_dataType_get___(void * jarg1) {
  int jresult ;
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  XnorCore::DataType::DataType result;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  result = (XnorCore::DataType::DataType) ((arg1)->dataType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_TextureCreateInfo___() {
  void * jresult ;
  XnorCore::TextureCreateInfo *result = 0 ;
  
  result = (XnorCore::TextureCreateInfo *)new XnorCore::TextureCreateInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_TextureCreateInfo___(void * jarg1) {
  XnorCore::TextureCreateInfo *arg1 = (XnorCore::TextureCreateInfo *) 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_datas_set___(void * jarg1, void * jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  std::array< void *,6 > *arg2 = (std::array< void *,6 > *) 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (std::array< void *,6 > *)jarg2; 
  if (arg1) (arg1)->datas = (std::array< void *,6 > const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_datas_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  std::array< void *,6 > *result = 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (std::array< void *,6 > *) ((arg1)->datas);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_size_set___(void * jarg1, void * jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (Vector2i *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_size_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_filtering_set___(void * jarg1, int jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering arg2 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (XnorCore::TextureFiltering::TextureFiltering)jarg2; 
  if (arg1) (arg1)->filtering = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_filtering_get___(void * jarg1) {
  int jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering result;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (XnorCore::TextureFiltering::TextureFiltering) ((arg1)->filtering);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_wrapping_set___(void * jarg1, int jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping arg2 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (XnorCore::TextureWrapping::TextureWrapping)jarg2; 
  if (arg1) (arg1)->wrapping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_wrapping_get___(void * jarg1) {
  int jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping result;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (XnorCore::TextureWrapping::TextureWrapping) ((arg1)->wrapping);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_format_set___(void * jarg1, int jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat arg2 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (XnorCore::TextureFormat::TextureFormat)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_format_get___(void * jarg1) {
  int jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureFormat::TextureFormat result;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (XnorCore::TextureFormat::TextureFormat) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_internalFormat_set___(void * jarg1, int jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg2 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg2; 
  if (arg1) (arg1)->internalFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_internalFormat_get___(void * jarg1) {
  int jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat result;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (XnorCore::TextureInternalFormat::TextureInternalFormat) ((arg1)->internalFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_dataType_set___(void * jarg1, int jarg2) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::DataType::DataType arg2 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  arg2 = (XnorCore::DataType::DataType)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_CreateCubeMapInfo_dataType_get___(void * jarg1) {
  int jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  XnorCore::DataType::DataType result;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  result = (XnorCore::DataType::DataType) ((arg1)->dataType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CreateCubeMapInfo___() {
  void * jresult ;
  XnorCore::CreateCubeMapInfo *result = 0 ;
  
  result = (XnorCore::CreateCubeMapInfo *)new XnorCore::CreateCubeMapInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CreateCubeMapInfo___(void * jarg1) {
  XnorCore::CreateCubeMapInfo *arg1 = (XnorCore::CreateCubeMapInfo *) 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_view_set___(void * jarg1, void * jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->view = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_view_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->view);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_projection_set___(void * jarg1, void * jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->projection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_projection_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->projection);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_cameraPos_set___(void * jarg1, void * jarg2) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->cameraPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CameraUniformData_cameraPos_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  result = (Vector3 *)& ((arg1)->cameraPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CameraUniformData___() {
  void * jresult ;
  XnorCore::CameraUniformData *result = 0 ;
  
  result = (XnorCore::CameraUniformData *)new XnorCore::CameraUniformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CameraUniformData___(void * jarg1) {
  XnorCore::CameraUniformData *arg1 = (XnorCore::CameraUniformData *) 0 ;
  
  arg1 = (XnorCore::CameraUniformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_model_set___(void * jarg1, void * jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->model = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_model_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->model);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_normalInvertMatrix_set___(void * jarg1, void * jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->normalInvertMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_normalInvertMatrix_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (Matrix *)& ((arg1)->normalInvertMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_meshRenderIndex_set___(void * jarg1, unsigned long long jarg2) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->meshRenderIndex = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_XnorfCore_ModelUniformData_meshRenderIndex_get___(void * jarg1) {
  unsigned long long jresult ;
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  uint64_t result;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  result = (uint64_t) ((arg1)->meshRenderIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ModelUniformData___() {
  void * jresult ;
  XnorCore::ModelUniformData *result = 0 ;
  
  result = (XnorCore::ModelUniformData *)new XnorCore::ModelUniformData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ModelUniformData___(void * jarg1) {
  XnorCore::ModelUniformData *arg1 = (XnorCore::ModelUniformData *) 0 ;
  
  arg1 = (XnorCore::ModelUniformData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_isBlending_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBlending = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_isBlending_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (bool_t) ((arg1)->isBlending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_sValue_set___(void * jarg1, int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = (XnorCore::BlendValue::BlendValue)jarg2; 
  if (arg1) (arg1)->sValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_sValue_get___(void * jarg1) {
  int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (XnorCore::BlendValue::BlendValue) ((arg1)->sValue);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_BlendFunction_dValue_set___(void * jarg1, int jarg2) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue arg2 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  arg2 = (XnorCore::BlendValue::BlendValue)jarg2; 
  if (arg1) (arg1)->dValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_BlendFunction_dValue_get___(void * jarg1) {
  int jresult ;
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  XnorCore::BlendValue::BlendValue result;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  result = (XnorCore::BlendValue::BlendValue) ((arg1)->dValue);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_BlendFunction___() {
  void * jresult ;
  XnorCore::BlendFunction *result = 0 ;
  
  result = (XnorCore::BlendFunction *)new XnorCore::BlendFunction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_BlendFunction___(void * jarg1) {
  XnorCore::BlendFunction *arg1 = (XnorCore::BlendFunction *) 0 ;
  
  arg1 = (XnorCore::BlendFunction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_depthFunction_set___(void * jarg1, int jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::DepthFunction::DepthFunction arg2 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::DepthFunction::DepthFunction)jarg2; 
  if (arg1) (arg1)->depthFunction = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_depthFunction_get___(void * jarg1) {
  int jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::DepthFunction::DepthFunction result;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::DepthFunction::DepthFunction) ((arg1)->depthFunction);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_blendFunction_set___(void * jarg1, void * jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::BlendFunction *arg2 = (XnorCore::BlendFunction *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::BlendFunction *)jarg2; 
  if (arg1) (arg1)->blendFunction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_blendFunction_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::BlendFunction *result = 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::BlendFunction *)& ((arg1)->blendFunction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_shaderProgramCullInfo_set___(void * jarg1, void * jarg2) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::ShaderProgramCullInfo *arg2 = (XnorCore::ShaderProgramCullInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  arg2 = (XnorCore::ShaderProgramCullInfo *)jarg2; 
  if (arg1) (arg1)->shaderProgramCullInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShaderCreateInfo_shaderProgramCullInfo_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  XnorCore::ShaderProgramCullInfo *result = 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  result = (XnorCore::ShaderProgramCullInfo *)& ((arg1)->shaderProgramCullInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShaderCreateInfo___() {
  void * jresult ;
  XnorCore::ShaderCreateInfo *result = 0 ;
  
  result = (XnorCore::ShaderCreateInfo *)new XnorCore::ShaderCreateInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShaderCreateInfo___(void * jarg1) {
  XnorCore::ShaderCreateInfo *arg1 = (XnorCore::ShaderCreateInfo *) 0 ;
  
  arg1 = (XnorCore::ShaderCreateInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_color_set___(void * jarg1, void * jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_PointLightData_color_get___(void * jarg1) {
  void * jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PointLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_position_set___(void * jarg1, void * jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_PointLightData_position_get___(void * jarg1) {
  void * jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_PointLightData_radius_set___(void * jarg1, float jarg2) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_PointLightData_radius_get___(void * jarg1) {
  float jresult ;
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  result = (float_t) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_PointLightData___() {
  void * jresult ;
  XnorCore::PointLightData *result = 0 ;
  
  result = (XnorCore::PointLightData *)new XnorCore::PointLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_PointLightData___(void * jarg1) {
  XnorCore::PointLightData *arg1 = (XnorCore::PointLightData *) 0 ;
  
  arg1 = (XnorCore::PointLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_color_set___(void * jarg1, void * jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SpotLightData_color_get___(void * jarg1) {
  void * jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_position_set___(void * jarg1, void * jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SpotLightData_position_get___(void * jarg1) {
  void * jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_cutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->cutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_cutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->cutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_direction_set___(void * jarg1, void * jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_SpotLightData_direction_get___(void * jarg1) {
  void * jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLightData_outerCutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->outerCutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLightData_outerCutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  result = (float_t) ((arg1)->outerCutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SpotLightData___() {
  void * jresult ;
  XnorCore::SpotLightData *result = 0 ;
  
  result = (XnorCore::SpotLightData *)new XnorCore::SpotLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SpotLightData___(void * jarg1) {
  XnorCore::SpotLightData *arg1 = (XnorCore::SpotLightData *) 0 ;
  
  arg1 = (XnorCore::SpotLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_color_set___(void * jarg1, void * jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_color_get___(void * jarg1) {
  void * jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_direction_set___(void * jarg1, void * jarg2) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->direction = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_DirectionalLightData_direction_get___(void * jarg1) {
  void * jresult ;
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  result = (Vector3 *)& ((arg1)->direction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_DirectionalLightData___() {
  void * jresult ;
  XnorCore::DirectionalLightData *result = 0 ;
  
  result = (XnorCore::DirectionalLightData *)new XnorCore::DirectionalLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_DirectionalLightData___(void * jarg1) {
  XnorCore::DirectionalLightData *arg1 = (XnorCore::DirectionalLightData *) 0 ;
  
  arg1 = (XnorCore::DirectionalLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfPointLight_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nbrOfPointLight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfPointLight_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->nbrOfPointLight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfSpotLight_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nbrOfSpotLight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_nbrOfSpotLight_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->nbrOfSpotLight);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_padding1_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->padding1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_padding1_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->padding1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_padding2_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->padding2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GpuLightData_padding2_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (uint32_t) ((arg1)->padding2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_pointLightData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::PointLightData *arg2 = (XnorCore::PointLightData *) (XnorCore::PointLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::PointLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::PointLightData *b = (XnorCore::PointLightData *) arg1->pointLightData;
    for (ii = 0; ii < (size_t)XnorCore::MaxPointLights; ii++) b[ii] = *((XnorCore::PointLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_pointLightData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::PointLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::PointLightData *)(XnorCore::PointLightData *) ((arg1)->pointLightData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_spotLightData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::SpotLightData *arg2 = (XnorCore::SpotLightData *) (XnorCore::SpotLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::SpotLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::SpotLightData *b = (XnorCore::SpotLightData *) arg1->spotLightData;
    for (ii = 0; ii < (size_t)XnorCore::MaxSpotLights; ii++) b[ii] = *((XnorCore::SpotLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_spotLightData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::SpotLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::SpotLightData *)(XnorCore::SpotLightData *) ((arg1)->spotLightData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GpuLightData_directionalData_set___(void * jarg1, void * jarg2) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::DirectionalLightData *arg2 = (XnorCore::DirectionalLightData *) (XnorCore::DirectionalLightData *)0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  arg2 = (XnorCore::DirectionalLightData *)jarg2; 
  {
    size_t ii;
    XnorCore::DirectionalLightData *b = (XnorCore::DirectionalLightData *) arg1->directionalData;
    for (ii = 0; ii < (size_t)XnorCore::MaxDirectionalLights; ii++) b[ii] = *((XnorCore::DirectionalLightData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GpuLightData_directionalData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  XnorCore::DirectionalLightData *result = 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  result = (XnorCore::DirectionalLightData *)(XnorCore::DirectionalLightData *) ((arg1)->directionalData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_GpuLightData___() {
  void * jresult ;
  XnorCore::GpuLightData *result = 0 ;
  
  result = (XnorCore::GpuLightData *)new XnorCore::GpuLightData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_GpuLightData___(void * jarg1) {
  XnorCore::GpuLightData *arg1 = (XnorCore::GpuLightData *) 0 ;
  
  arg1 = (XnorCore::GpuLightData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShadowMappingData_lightSpaceMatrix_set___(void * jarg1, void * jarg2) {
  XnorCore::ShadowMappingData *arg1 = (XnorCore::ShadowMappingData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ShadowMappingData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->lightSpaceMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShadowMappingData_lightSpaceMatrix_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShadowMappingData *arg1 = (XnorCore::ShadowMappingData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ShadowMappingData *)jarg1; 
  result = (Matrix *)& ((arg1)->lightSpaceMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ShadowMappingData_model_set___(void * jarg1, void * jarg2) {
  XnorCore::ShadowMappingData *arg1 = (XnorCore::ShadowMappingData *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::ShadowMappingData *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->model = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ShadowMappingData_model_get___(void * jarg1) {
  void * jresult ;
  XnorCore::ShadowMappingData *arg1 = (XnorCore::ShadowMappingData *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::ShadowMappingData *)jarg1; 
  result = (Matrix *)& ((arg1)->model);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ShadowMappingData___() {
  void * jresult ;
  XnorCore::ShadowMappingData *result = 0 ;
  
  result = (XnorCore::ShadowMappingData *)new XnorCore::ShadowMappingData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ShadowMappingData___(void * jarg1) {
  XnorCore::ShadowMappingData *arg1 = (XnorCore::ShadowMappingData *) 0 ;
  
  arg1 = (XnorCore::ShadowMappingData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_albedoColor_set___(void * jarg1, void * jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->albedoColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_MaterialData_albedoColor_get___(void * jarg1) {
  void * jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (Vector3 *)& ((arg1)->albedoColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAlbedoMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasAlbedoMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAlbedoMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasAlbedoMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasMetallicMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasMetallicMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasMetallicMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasMetallicMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasRoughnessMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasRoughnessMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasRoughnessMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasRoughnessMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasNormalMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasNormalMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasNormalMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasNormalMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAmbiantOcclusionMap_set___(void * jarg1, int jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->hasAmbiantOcclusionMap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_MaterialData_hasAmbiantOcclusionMap_get___(void * jarg1) {
  int jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (int32_t) ((arg1)->hasAmbiantOcclusionMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_metallic_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->metallic = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_metallic_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->metallic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_roughness_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->roughness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_roughness_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->roughness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_reflectance_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->reflectance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_reflectance_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->reflectance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissive_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->emissive = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_emissive_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->emissive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MaterialData_ambiantOccusion_set___(void * jarg1, float jarg2) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->ambiantOccusion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_MaterialData_ambiantOccusion_get___(void * jarg1) {
  float jresult ;
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  result = (float_t) ((arg1)->ambiantOccusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_MaterialData___() {
  void * jresult ;
  XnorCore::MaterialData *result = 0 ;
  
  result = (XnorCore::MaterialData *)new XnorCore::MaterialData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_MaterialData___(void * jarg1) {
  XnorCore::MaterialData *arg1 = (XnorCore::MaterialData *) 0 ;
  
  arg1 = (XnorCore::MaterialData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_frameBuffer_set___(void * jarg1, void * jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::FrameBuffer *arg2 = (XnorCore::FrameBuffer *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (XnorCore::FrameBuffer *)jarg2; 
  if (arg1) (arg1)->frameBuffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_frameBuffer_get___(void * jarg1) {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::FrameBuffer *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (XnorCore::FrameBuffer *) ((arg1)->frameBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaOffset_set___(void * jarg1, void * jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (Vector2i *)jarg2; 
  if (arg1) (arg1)->renderAreaOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaOffset_get___(void * jarg1) {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->renderAreaOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaExtent_set___(void * jarg1, void * jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *arg2 = (Vector2i *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (Vector2i *)jarg2; 
  if (arg1) (arg1)->renderAreaExtent = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_renderAreaExtent_get___(void * jarg1) {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector2i *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector2i *)& ((arg1)->renderAreaExtent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearBufferFlags_set___(void * jarg1, int jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::BufferFlag::BufferFlag arg2 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (XnorCore::BufferFlag::BufferFlag)jarg2; 
  if (arg1) (arg1)->clearBufferFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearBufferFlags_get___(void * jarg1) {
  int jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  XnorCore::BufferFlag::BufferFlag result;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (XnorCore::BufferFlag::BufferFlag) ((arg1)->clearBufferFlags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearColor_set___(void * jarg1, void * jarg2) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector4 *arg2 = (Vector4 *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  arg2 = (Vector4 *)jarg2; 
  if (arg1) (arg1)->clearColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_RenderPassBeginInfo_clearColor_get___(void * jarg1) {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  Vector4 *result = 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  result = (Vector4 *)& ((arg1)->clearColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_RenderPassBeginInfo___() {
  void * jresult ;
  XnorCore::RenderPassBeginInfo *result = 0 ;
  
  result = (XnorCore::RenderPassBeginInfo *)new XnorCore::RenderPassBeginInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_RenderPassBeginInfo___(void * jarg1) {
  XnorCore::RenderPassBeginInfo *arg1 = (XnorCore::RenderPassBeginInfo *) 0 ;
  
  arg1 = (XnorCore::RenderPassBeginInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Cubemap__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::array< std::string,6 > *arg1 = 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (std::array< std::string,6 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< std::string,6 > const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Cubemap *)new XnorCore::Cubemap((std::array< std::string,6 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Cubemap__SWIG_1___(void * jarg1) {
  void * jresult ;
  XnorCore::CreateCubeMapInfo *arg1 = 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::CreateCubeMapInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::CreateCubeMapInfo const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Cubemap *)new XnorCore::Cubemap((XnorCore::CreateCubeMapInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_CreateInRhi___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->CreateInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_DestroyInRhi___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->DestroyInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_Unload___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_BindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Cubemap const *)arg1)->BindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Cubemap_UnBindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Cubemap const *)arg1)->UnBindTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Cubemap_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  result = (uint32_t)((XnorCore::Cubemap const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Cubemap_GetSize___(void * jarg1) {
  void * jresult ;
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  Vector2i result;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  result = ((XnorCore::Cubemap const *)arg1)->GetSize();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Cubemap___(void * jarg1) {
  XnorCore::Cubemap *arg1 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Cubemap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Font_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,1 > *result = 0 ;
  
  result = (std::array< char_t const *,1 > *)&XnorCore::Font::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Font___() {
  void * jresult ;
  XnorCore::Font *result = 0 ;
  
  result = (XnorCore::Font *)new XnorCore::Font();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Font___(void * jarg1) {
  XnorCore::Font *arg1 = (XnorCore::Font *) 0 ;
  
  arg1 = (XnorCore::Font *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_Aabb_min_set___(void * jarg1, void * jarg2) {
  XnorCore::Model::Aabb *arg1 = (XnorCore::Model::Aabb *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Model::Aabb *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->min = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Model_Aabb_min_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Model::Aabb *arg1 = (XnorCore::Model::Aabb *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Model::Aabb *)jarg1; 
  result = (Vector3 *)& ((arg1)->min);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_Aabb_max_set___(void * jarg1, void * jarg2) {
  XnorCore::Model::Aabb *arg1 = (XnorCore::Model::Aabb *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Model::Aabb *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->max = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Model_Aabb_max_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Model::Aabb *arg1 = (XnorCore::Model::Aabb *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Model::Aabb *)jarg1; 
  result = (Vector3 *)& ((arg1)->max);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Model_Aabb___() {
  void * jresult ;
  XnorCore::Model::Aabb *result = 0 ;
  
  result = (XnorCore::Model::Aabb *)new XnorCore::Model::Aabb();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Model_Aabb___(void * jarg1) {
  XnorCore::Model::Aabb *arg1 = (XnorCore::Model::Aabb *) 0 ;
  
  arg1 = (XnorCore::Model::Aabb *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Model_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,58 > *result = 0 ;
  
  result = (std::array< char_t const *,58 > *)&XnorCore::Model::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Model__SWIG_0___() {
  void * jresult ;
  XnorCore::Model *result = 0 ;
  
  result = (XnorCore::Model *)new XnorCore::Model();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Model__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Model *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Model *)new XnorCore::Model(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Model___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_Load__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  aiMesh *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  arg2 = (aiMesh *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "aiMesh const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((aiMesh const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_CreateInRhi___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->CreateInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_DestroyInRhi___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->DestroyInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Model_Unload___(void * jarg1) {
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  
  arg1 = (XnorCore::Model *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Model_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  result = (uint32_t)((XnorCore::Model const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Model_GetAabb___(void * jarg1) {
  void * jresult ;
  XnorCore::Model *arg1 = (XnorCore::Model *) 0 ;
  XnorCore::Model::Aabb result;
  
  arg1 = (XnorCore::Model *)jarg1; 
  result = ((XnorCore::Model const *)arg1)->GetAabb();
  jresult = new XnorCore::Model::Aabb(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XnorfCore_ResourceManager_ReservedShaderPrefix_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)XnorCore::ResourceManager::ReservedShaderPrefix;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XnorfCore_ResourceManager_GuidMapFilePath_get___() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)XnorCore::ResourceManager::GuidMapFilePath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_LoadAll___() {
  XnorCore::ResourceManager::LoadAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_LoadGuidMap___() {
  XnorCore::ResourceManager::LoadGuidMap();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Contains__SWIG_0___(const char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool_t)XnorCore::ResourceManager::Contains((std::string const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Contains__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Pointer< XnorCore::File > *arg1 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Pointer< XnorCore::File > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)XnorCore::ResourceManager::Contains((XnorCore::Pointer< XnorCore::File > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Rename__SWIG_0___(const char * jarg1, const char * jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::ResourceManager::Rename((std::string const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Rename__SWIG_1___(void * jarg1, const char * jarg2) {
  XnorCore::Pointer< XnorCore::Resource > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Pointer< XnorCore::Resource > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Resource > const & is null", 0);
    return ;
  } 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  XnorCore::ResourceManager::Rename((XnorCore::Pointer< XnorCore::Resource > const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_Unload___(const char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  XnorCore::ResourceManager::Unload((std::string const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ResourceManager_UnloadAll___() {
  XnorCore::ResourceManager::UnloadAll();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_VertexFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,3 > *result = 0 ;
  
  result = (std::array< char_t const *,3 > *)&XnorCore::Shader::VertexFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_FragmentFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,3 > *result = 0 ;
  
  result = (std::array< char_t const *,3 > *)&XnorCore::Shader::FragmentFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_GeometryFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,2 > *result = 0 ;
  
  result = (std::array< char_t const *,2 > *)&XnorCore::Shader::GeometryFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Shader_ComputeFileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,2 > *result = 0 ;
  
  result = (std::array< char_t const *,2 > *)&XnorCore::Shader::ComputeFileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Shader_FileExtensionToType___(const char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  XnorCore::ShaderType::ShaderType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (XnorCore::ShaderType::ShaderType)XnorCore::Shader::FileExtensionToType((std::string const &)*arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Shader__SWIG_0___() {
  void * jresult ;
  XnorCore::Shader *result = 0 ;
  
  result = (XnorCore::Shader *)new XnorCore::Shader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Shader__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Shader *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Shader *)new XnorCore::Shader(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_0___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_Load__SWIG_2___(void * jarg1, char * jarg2, long long jarg3, int jarg4) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  char_t *arg2 = (char_t *) 0 ;
  int64_t arg3 ;
  XnorCore::ShaderType::ShaderType arg4 ;
  bool_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (char_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (XnorCore::ShaderType::ShaderType)jarg4; 
  result = (bool_t)(arg1)->Load((char_t const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_CreateInRhi___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->CreateInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_DestroyInRhi___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->DestroyInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Recompile___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->Recompile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Unload___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetInt___(void * jarg1, const char * jarg2, int jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int32_t)jarg3; 
  ((XnorCore::Shader const *)arg1)->SetInt((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetBool___(void * jarg1, const char * jarg2, unsigned int jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  bool_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  ((XnorCore::Shader const *)arg1)->SetBool((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetFloat___(void * jarg1, const char * jarg2, float jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  float_t arg3 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float_t)jarg3; 
  ((XnorCore::Shader const *)arg1)->SetFloat((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetVec3___(void * jarg1, const char * jarg2, void * jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Vector3 *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  ((XnorCore::Shader const *)arg1)->SetVec3((std::string const &)*arg2,(Vector3 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetVec4___(void * jarg1, const char * jarg2, void * jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Vector4 *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Vector4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector4 const & is null", 0);
    return ;
  } 
  ((XnorCore::Shader const *)arg1)->SetVec4((std::string const &)*arg2,(Vector4 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetMat4___(void * jarg1, const char * jarg2, void * jarg3) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  std::string *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (Matrix *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return ;
  } 
  ((XnorCore::Shader const *)arg1)->SetMat4((std::string const &)*arg2,(Matrix const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Shader_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  result = (uint32_t)((XnorCore::Shader const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Use___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  ((XnorCore::Shader const *)arg1)->Use();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_Unuse___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  ((XnorCore::Shader const *)arg1)->Unuse();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetDepthFunction___(void * jarg1, int jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::DepthFunction::DepthFunction arg2 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::DepthFunction::DepthFunction)jarg2; 
  (arg1)->SetDepthFunction(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetBlendFunction___(void * jarg1, void * jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::BlendFunction *arg2 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::BlendFunction *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::BlendFunction const & is null", 0);
    return ;
  } 
  (arg1)->SetBlendFunction((XnorCore::BlendFunction const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Shader_SetFaceCullingInfo___(void * jarg1, void * jarg2) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  XnorCore::ShaderProgramCullInfo *arg2 = 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  arg2 = (XnorCore::ShaderProgramCullInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::ShaderProgramCullInfo const & is null", 0);
    return ;
  } 
  (arg1)->SetFaceCullingInfo((XnorCore::ShaderProgramCullInfo const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Shader___(void * jarg1) {
  XnorCore::Shader *arg1 = (XnorCore::Shader *) 0 ;
  
  arg1 = (XnorCore::Shader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_desiredChannels_set___(void * jarg1, int jarg2) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  int32_t arg2 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->desiredChannels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_desiredChannels_get___(void * jarg1) {
  int jresult ;
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  result = (int32_t) ((arg1)->desiredChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_flipVertically_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->flipVertically = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_LoadOptions_flipVertically_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  result = (bool_t) ((arg1)->flipVertically);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture_LoadOptions___() {
  void * jresult ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  result = (XnorCore::Texture::LoadOptions *)new XnorCore::Texture::LoadOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Texture_LoadOptions___(void * jarg1) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_defaultLoadOptions_set___(void * jarg1) {
  XnorCore::Texture::LoadOptions *arg1 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture::LoadOptions *)jarg1; 
  XnorCore::Texture::defaultLoadOptions = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_defaultLoadOptions_get___() {
  void * jresult ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  result = (XnorCore::Texture::LoadOptions *)&XnorCore::Texture::defaultLoadOptions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_FileExtensions_get___() {
  void * jresult ;
  std::array< char_t const *,11 > *result = 0 ;
  
  result = (std::array< char_t const *,11 > *)&XnorCore::Texture::FileExtensions;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_loadData_set___(void * jarg1, void * jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Texture::LoadOptions *arg2 = (XnorCore::Texture::LoadOptions *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (XnorCore::Texture::LoadOptions *)jarg2; 
  if (arg1) (arg1)->loadData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_loadData_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Texture::LoadOptions *result = 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::Texture::LoadOptions *)& ((arg1)->loadData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_0___() {
  void * jresult ;
  XnorCore::Texture *result = 0 ;
  
  result = (XnorCore::Texture *)new XnorCore::Texture();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_1___(const char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  XnorCore::Texture *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (XnorCore::Texture *)new XnorCore::Texture(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_Load__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::Pointer< XnorCore::File > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::File > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::File > const & is null", 0);
    return 0;
  } 
  result = (bool_t)(arg1)->Load((XnorCore::Pointer< XnorCore::File > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_2___(void * jarg1) {
  void * jresult ;
  XnorCore::TextureCreateInfo *arg1 = 0 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::TextureCreateInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::TextureCreateInfo const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Texture *)new XnorCore::Texture((XnorCore::TextureCreateInfo const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Texture__SWIG_3___(int jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::TextureInternalFormat::TextureInternalFormat arg1 ;
  Vector2i arg2 ;
  Vector2i *argp2 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::TextureInternalFormat::TextureInternalFormat)jarg1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (XnorCore::Texture *)new XnorCore::Texture(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Texture___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_Load__SWIG_1___(void * jarg1, void * jarg2, long long jarg3) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int64_t arg3 ;
  bool_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  arg3 = (int64_t)jarg3; 
  result = (bool_t)(arg1)->Load((uint8_t const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_CreateInRhi___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->CreateInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_DestroyInRhi___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->DestroyInRhi();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_Unload___(void * jarg1) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  (arg1)->Unload();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Texture_GetSize___(void * jarg1) {
  void * jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  Vector2i result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = ((XnorCore::Texture const *)arg1)->GetSize();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetDataChannels___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (int32_t)((XnorCore::Texture const *)arg1)->GetDataChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetChannels___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  int32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (int32_t)((XnorCore::Texture const *)arg1)->GetChannels();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_BindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Texture const *)arg1)->BindTexture(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Texture_UnbindTexture___(void * jarg1, unsigned int jarg2) {
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  ((XnorCore::Texture const *)arg1)->UnbindTexture(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Texture_GetId___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (uint32_t)((XnorCore::Texture const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureFiltering___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureFiltering::TextureFiltering result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureFiltering::TextureFiltering)((XnorCore::Texture const *)arg1)->GetTextureFiltering();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureWrapping___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureWrapping::TextureWrapping result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureWrapping::TextureWrapping)((XnorCore::Texture const *)arg1)->GetTextureWrapping();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetInternalFormat___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureInternalFormat::TextureInternalFormat result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureInternalFormat::TextureInternalFormat)((XnorCore::Texture const *)arg1)->GetInternalFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Texture_GetTextureFormat___(void * jarg1) {
  int jresult ;
  XnorCore::Texture *arg1 = (XnorCore::Texture *) 0 ;
  XnorCore::TextureFormat::TextureFormat result;
  
  arg1 = (XnorCore::Texture *)jarg1; 
  result = (XnorCore::TextureFormat::TextureFormat)((XnorCore::Texture const *)arg1)->GetTextureFormat();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_GamepadInput_NullAnalogValue_get___() {
  float jresult ;
  float result;
  
  result = (float)XnorCore::GamepadInput::NullAnalogValue;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GamepadInput_isConnected_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isConnected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_GamepadInput_isConnected_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  result = (bool_t) ((arg1)->isConnected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_GamepadInput_axisValues_set___(void * jarg1, void * jarg2) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *arg2 = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *) 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  arg2 = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *)jarg2; 
  if (arg1) (arg1)->axisValues = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GamepadInput_axisValues_get___(void * jarg1) {
  void * jresult ;
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *result = 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  result = (std::array< float_t,static_cast< uint32_t > (XnorCore::GamepadAxis::Count) > *)& ((arg1)->axisValues);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_GamepadInput___() {
  void * jresult ;
  XnorCore::GamepadInput *result = 0 ;
  
  result = (XnorCore::GamepadInput *)new XnorCore::GamepadInput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_GamepadInput___(void * jarg1) {
  XnorCore::GamepadInput *arg1 = (XnorCore::GamepadInput *) 0 ;
  
  arg1 = (XnorCore::GamepadInput *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Input_mouseLocked_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Input::mouseLocked = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_mouseLocked_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Input::mouseLocked;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetKey__SWIG_0___(int jarg1, int jarg2) {
  unsigned int jresult ;
  XnorCore::Key::Key arg1 ;
  XnorCore::KeyStatus::KeyStatus arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::Key::Key)jarg1; 
  arg2 = (XnorCore::KeyStatus::KeyStatus)jarg2; 
  result = (bool_t)XnorCore::Input::GetKey(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetKey__SWIG_1___(int jarg1) {
  unsigned int jresult ;
  XnorCore::Key::Key arg1 ;
  bool_t result;
  
  arg1 = (XnorCore::Key::Key)jarg1; 
  result = (bool_t)XnorCore::Input::GetKey(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetMouseButton__SWIG_0___(int jarg1, int jarg2) {
  unsigned int jresult ;
  XnorCore::MouseButton::MouseButton arg1 ;
  XnorCore::MouseButtonStatus::MouseButtonStatus arg2 ;
  bool_t result;
  
  arg1 = (XnorCore::MouseButton::MouseButton)jarg1; 
  arg2 = (XnorCore::MouseButtonStatus::MouseButtonStatus)jarg2; 
  result = (bool_t)XnorCore::Input::GetMouseButton(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetMouseButton__SWIG_1___(int jarg1) {
  unsigned int jresult ;
  XnorCore::MouseButton::MouseButton arg1 ;
  bool_t result;
  
  arg1 = (XnorCore::MouseButton::MouseButton)jarg1; 
  result = (bool_t)XnorCore::Input::GetMouseButton(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Input_GetGamepadButton___(unsigned int jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  uint32_t arg1 ;
  XnorCore::GamepadButton::GamepadButton arg2 ;
  XnorCore::GamepadButtonStatus::GamepadButtonStatus arg3 ;
  bool_t result;
  
  arg1 = (uint32_t)jarg1; 
  arg2 = (XnorCore::GamepadButton::GamepadButton)jarg2; 
  arg3 = (XnorCore::GamepadButtonStatus::GamepadButtonStatus)jarg3; 
  result = (bool_t)XnorCore::Input::GetGamepadButton(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Input_HandleEvent___() {
  XnorCore::Input::HandleEvent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Input_Initialize___() {
  XnorCore::Input::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Input_Update___() {
  XnorCore::Input::Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Time_Update___() {
  XnorCore::Time::Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_entity_set___(void * jarg1, void * jarg2) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  if (arg1) (arg1)->entity = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Component_entity_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  result = (XnorCore::Entity *) ((arg1)->entity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Component___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_Begin___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Component_Update___(void * jarg1) {
  XnorCore::Component *arg1 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Component *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_White___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::White();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Gray___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Gray();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Black___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Black();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Red___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Red();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Green___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Green();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Blue___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Blue();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Yellow___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Yellow();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Cyan___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Cyan();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_Magenta___() {
  void * jresult ;
  XnorCore::ColorRgb result;
  
  result = XnorCore::ColorRgb::Magenta();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgb_r_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgb_r_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = (uint8_t) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgb_g_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgb_g_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = (uint8_t) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgb_b_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgb_b_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = (uint8_t) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgb__SWIG_0___() {
  void * jresult ;
  XnorCore::ColorRgb *result = 0 ;
  
  result = (XnorCore::ColorRgb *)new XnorCore::ColorRgb();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgb__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  XnorCore::ColorRgb *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (XnorCore::ColorRgb *)new XnorCore::ColorRgb(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgb__SWIG_2___(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  XnorCore::ColorRgb *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (XnorCore::ColorRgb *)new XnorCore::ColorRgb(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_ToColorRgba___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  XnorCore::ColorRgba result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = ((XnorCore::ColorRgb const *)arg1)->operator XnorCore::ColorRgba();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_ToColorHsva___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  XnorCore::ColorHsva result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = ((XnorCore::ColorRgb const *)arg1)->operator XnorCore::ColorHsva();
  jresult = new XnorCore::ColorHsva(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgb_ToColorf___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  XnorCore::Colorf result;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  result = ((XnorCore::ColorRgb const *)arg1)->operator XnorCore::Colorf();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ColorRgb___(void * jarg1) {
  XnorCore::ColorRgb *arg1 = (XnorCore::ColorRgb *) 0 ;
  
  arg1 = (XnorCore::ColorRgb *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_White___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::White();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Gray___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Gray();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Black___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Black();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Red___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Red();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Green___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Green();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Blue___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Blue();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Yellow___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Yellow();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Cyan___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Cyan();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_Magenta___() {
  void * jresult ;
  XnorCore::ColorRgba result;
  
  result = XnorCore::ColorRgba::Magenta();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgba_r_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgba_r_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = (uint8_t) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgba_g_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgba_g_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = (uint8_t) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgba_b_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgba_b_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = (uint8_t) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorRgba_a_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorRgba_a_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = (uint8_t) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgba__SWIG_0___() {
  void * jresult ;
  XnorCore::ColorRgba *result = 0 ;
  
  result = (XnorCore::ColorRgba *)new XnorCore::ColorRgba();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgba__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  XnorCore::ColorRgba *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (XnorCore::ColorRgba *)new XnorCore::ColorRgba(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgba__SWIG_2___(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  XnorCore::ColorRgba *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (XnorCore::ColorRgba *)new XnorCore::ColorRgba(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorRgba__SWIG_3___(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  XnorCore::ColorRgba *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (XnorCore::ColorRgba *)new XnorCore::ColorRgba(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_ToColorRgb___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  XnorCore::ColorRgb result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = ((XnorCore::ColorRgba const *)arg1)->operator XnorCore::ColorRgb();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_ToColorHsva___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  XnorCore::ColorHsva result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = ((XnorCore::ColorRgba const *)arg1)->operator XnorCore::ColorHsva();
  jresult = new XnorCore::ColorHsva(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorRgba_ToColorf___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  XnorCore::Colorf result;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  result = ((XnorCore::ColorRgba const *)arg1)->operator XnorCore::Colorf();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ColorRgba___(void * jarg1) {
  XnorCore::ColorRgba *arg1 = (XnorCore::ColorRgba *) 0 ;
  
  arg1 = (XnorCore::ColorRgba *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_White___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::White();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Gray___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Gray();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Black___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Black();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Red___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Red();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Green___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Green();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Blue___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Blue();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Yellow___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Yellow();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Cyan___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Cyan();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_Magenta___() {
  void * jresult ;
  XnorCore::Colorf result;
  
  result = XnorCore::Colorf::Magenta();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Colorf_r_set___(void * jarg1, float jarg2) {
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Colorf_r_get___(void * jarg1) {
  float jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = (float_t) ((arg1)->r);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Colorf_g_set___(void * jarg1, float jarg2) {
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Colorf_g_get___(void * jarg1) {
  float jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = (float_t) ((arg1)->g);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Colorf_b_set___(void * jarg1, float jarg2) {
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Colorf_b_get___(void * jarg1) {
  float jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = (float_t) ((arg1)->b);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Colorf_a_set___(void * jarg1, float jarg2) {
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Colorf_a_get___(void * jarg1) {
  float jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = (float_t) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Colorf__SWIG_0___() {
  void * jresult ;
  XnorCore::Colorf *result = 0 ;
  
  result = (XnorCore::Colorf *)new XnorCore::Colorf();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Colorf__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  float_t arg4 ;
  XnorCore::Colorf *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  arg4 = (float_t)jarg4; 
  result = (XnorCore::Colorf *)new XnorCore::Colorf(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Colorf__SWIG_2___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float_t arg1 ;
  float_t arg2 ;
  float_t arg3 ;
  XnorCore::Colorf *result = 0 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  arg3 = (float_t)jarg3; 
  result = (XnorCore::Colorf *)new XnorCore::Colorf(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_ToColorRgb___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  XnorCore::ColorRgb result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = ((XnorCore::Colorf const *)arg1)->operator XnorCore::ColorRgb();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_ToColorRgba___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  XnorCore::ColorRgba result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = ((XnorCore::Colorf const *)arg1)->operator XnorCore::ColorRgba();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_ToColorHsva___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  XnorCore::ColorHsva result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = ((XnorCore::Colorf const *)arg1)->operator XnorCore::ColorHsva();
  jresult = new XnorCore::ColorHsva(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_ToVector3___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  Vector3 result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = ((XnorCore::Colorf const *)arg1)->operator Vector3();
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Colorf_ToVector4___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  Vector4 result;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  result = ((XnorCore::Colorf const *)arg1)->operator Vector4();
  jresult = new Vector4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Colorf___(void * jarg1) {
  XnorCore::Colorf *arg1 = (XnorCore::Colorf *) 0 ;
  
  arg1 = (XnorCore::Colorf *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorHsva_h_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorHsva_h_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = (uint8_t) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorHsva_s_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->s = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorHsva_s_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = (uint8_t) ((arg1)->s);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorHsva_v_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorHsva_v_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = (uint8_t) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ColorHsva_a_set___(void * jarg1, unsigned char jarg2) {
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_XnorfCore_ColorHsva_a_get___(void * jarg1) {
  unsigned char jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  uint8_t result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = (uint8_t) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorHsva__SWIG_0___() {
  void * jresult ;
  XnorCore::ColorHsva *result = 0 ;
  
  result = (XnorCore::ColorHsva *)new XnorCore::ColorHsva();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorHsva__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  uint32_t arg1 ;
  XnorCore::ColorHsva *result = 0 ;
  
  arg1 = (uint32_t)jarg1; 
  result = (XnorCore::ColorHsva *)new XnorCore::ColorHsva(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorHsva__SWIG_2___(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3, unsigned char jarg4) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  XnorCore::ColorHsva *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (uint8_t)jarg4; 
  result = (XnorCore::ColorHsva *)new XnorCore::ColorHsva(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ColorHsva__SWIG_3___(unsigned char jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  XnorCore::ColorHsva *result = 0 ;
  
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (XnorCore::ColorHsva *)new XnorCore::ColorHsva(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorHsva_ToColorRgb___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  XnorCore::ColorRgb result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = ((XnorCore::ColorHsva const *)arg1)->operator XnorCore::ColorRgb();
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorHsva_ToColorRgba___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  XnorCore::ColorRgba result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = ((XnorCore::ColorHsva const *)arg1)->operator XnorCore::ColorRgba();
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ColorHsva_ToColorf___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  XnorCore::Colorf result;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  result = ((XnorCore::ColorHsva const *)arg1)->operator XnorCore::Colorf();
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ColorHsva___(void * jarg1) {
  XnorCore::ColorHsva *arg1 = (XnorCore::ColorHsva *) 0 ;
  
  arg1 = (XnorCore::ColorHsva *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_7___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::ColorRgb arg1 ;
  XnorCore::ColorRgb arg2 ;
  XnorCore::ColorRgb *argp1 ;
  XnorCore::ColorRgb *argp2 ;
  XnorCore::ColorRgb result;
  
  argp1 = (XnorCore::ColorRgb *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgb", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (XnorCore::ColorRgb *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgb", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator +(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_25___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::ColorRgb arg1 ;
  XnorCore::ColorRgb arg2 ;
  XnorCore::ColorRgb *argp1 ;
  XnorCore::ColorRgb *argp2 ;
  XnorCore::ColorRgb result;
  
  argp1 = (XnorCore::ColorRgb *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgb", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (XnorCore::ColorRgb *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgb", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new XnorCore::ColorRgb(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_8___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::ColorRgba arg1 ;
  XnorCore::ColorRgba arg2 ;
  XnorCore::ColorRgba *argp1 ;
  XnorCore::ColorRgba *argp2 ;
  XnorCore::ColorRgba result;
  
  argp1 = (XnorCore::ColorRgba *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgba", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (XnorCore::ColorRgba *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgba", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator +(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_26___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::ColorRgba arg1 ;
  XnorCore::ColorRgba arg2 ;
  XnorCore::ColorRgba *argp1 ;
  XnorCore::ColorRgba *argp2 ;
  XnorCore::ColorRgba result;
  
  argp1 = (XnorCore::ColorRgba *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgba", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (XnorCore::ColorRgba *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgba", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = operator *(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2));
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_27___(void * jarg1, float jarg2) {
  void * jresult ;
  XnorCore::ColorRgba arg1 ;
  float_t arg2 ;
  XnorCore::ColorRgba *argp1 ;
  XnorCore::ColorRgba result;
  
  argp1 = (XnorCore::ColorRgba *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgba", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator *(SWIG_STD_MOVE(arg1),arg2);
  jresult = new XnorCore::ColorRgba(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorAdd__SWIG_9___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Colorf *arg1 = 0 ;
  XnorCore::Colorf *arg2 = 0 ;
  XnorCore::Colorf result;
  
  arg1 = (XnorCore::Colorf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Colorf const & is null", 0);
    return 0;
  } 
  arg2 = (XnorCore::Colorf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Colorf const & is null", 0);
    return 0;
  } 
  result = operator +((XnorCore::Colorf const &)*arg1,(XnorCore::Colorf const &)*arg2);
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_28___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Colorf *arg1 = 0 ;
  XnorCore::Colorf *arg2 = 0 ;
  XnorCore::Colorf result;
  
  arg1 = (XnorCore::Colorf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Colorf const & is null", 0);
    return 0;
  } 
  arg2 = (XnorCore::Colorf *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Colorf const & is null", 0);
    return 0;
  } 
  result = operator *((XnorCore::Colorf const &)*arg1,(XnorCore::Colorf const &)*arg2);
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_29___(void * jarg1, float jarg2) {
  void * jresult ;
  XnorCore::Colorf arg1 ;
  float_t arg2 ;
  XnorCore::Colorf *argp1 ;
  XnorCore::Colorf result;
  
  argp1 = (XnorCore::Colorf *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::Colorf", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator *(SWIG_STD_MOVE(arg1),arg2);
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_OperatorMul__SWIG_30___(void * jarg1, float jarg2) {
  void * jresult ;
  XnorCore::ColorHsva arg1 ;
  float_t arg2 ;
  XnorCore::ColorHsva *argp1 ;
  XnorCore::ColorHsva result;
  
  argp1 = (XnorCore::ColorHsva *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorHsva", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (float_t)jarg2; 
  result = operator *(SWIG_STD_MOVE(arg1),arg2);
  jresult = new XnorCore::ColorHsva(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_color_set___(void * jarg1, void * jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  XnorCore::Colorf *arg2 = (XnorCore::Colorf *) 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = (XnorCore::Colorf *)jarg2; 
  if (arg1) (arg1)->color = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Light_color_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  XnorCore::Colorf *result = 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (XnorCore::Colorf *)& ((arg1)->color);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Light_intensity_set___(void * jarg1, float jarg2) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->intensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Light_intensity_get___(void * jarg1) {
  float jresult ;
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Light *)jarg1; 
  result = (float_t) ((arg1)->intensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Light___() {
  void * jresult ;
  XnorCore::Light *result = 0 ;
  
  result = (XnorCore::Light *)new XnorCore::Light();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Light___(void * jarg1) {
  XnorCore::Light *arg1 = (XnorCore::Light *) 0 ;
  
  arg1 = (XnorCore::Light *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_DirectionalLight___() {
  void * jresult ;
  XnorCore::DirectionalLight *result = 0 ;
  
  result = (XnorCore::DirectionalLight *)new XnorCore::DirectionalLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_DirectionalLight___(void * jarg1) {
  XnorCore::DirectionalLight *arg1 = (XnorCore::DirectionalLight *) 0 ;
  
  arg1 = (XnorCore::DirectionalLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_PointLight___() {
  void * jresult ;
  XnorCore::PointLight *result = 0 ;
  
  result = (XnorCore::PointLight *)new XnorCore::PointLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_PointLight___(void * jarg1) {
  XnorCore::PointLight *arg1 = (XnorCore::PointLight *) 0 ;
  
  arg1 = (XnorCore::PointLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLight_cutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->cutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLight_cutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  result = (float_t) ((arg1)->cutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SpotLight_outerCutOff_set___(void * jarg1, float jarg2) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->outerCutOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_SpotLight_outerCutOff_get___(void * jarg1) {
  float jresult ;
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  result = (float_t) ((arg1)->outerCutOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_SpotLight___() {
  void * jresult ;
  XnorCore::SpotLight *result = 0 ;
  
  result = (XnorCore::SpotLight *)new XnorCore::SpotLight();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_SpotLight___(void * jarg1) {
  XnorCore::SpotLight *arg1 = (XnorCore::SpotLight *) 0 ;
  
  arg1 = (XnorCore::SpotLight *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_position_set___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Camera_position_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_front_set___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->front = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Camera_front_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->front);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_up_set___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->up = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Camera_up_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->up);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_right_set___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = (Vector3 *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2; 
  if (arg1) (arg1)->right = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Camera_right_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (Vector3 *)& ((arg1)->right);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_near_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->near = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_near_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->near);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_far_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->far = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_far_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->far);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_fov_set___(void * jarg1, float jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->fov = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Camera_fov_get___(void * jarg1) {
  float jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  result = (float_t) ((arg1)->fov);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetProjection___(void * jarg1, void * jarg2, void * jarg3) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2i arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector2i *argp2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Matrix *)jarg3; 
  ((XnorCore::Camera const *)arg1)->GetProjection(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetView___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  ((XnorCore::Camera const *)arg1)->GetView(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_GetVp___(void * jarg1, void * jarg2, void * jarg3) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector2i arg2 ;
  Matrix *arg3 = (Matrix *) 0 ;
  Vector2i *argp2 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  argp2 = (Vector2i *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Matrix *)jarg3; 
  ((XnorCore::Camera const *)arg1)->GetVp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Camera_LookAt___(void * jarg1, void * jarg2) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return ;
  } 
  (arg1)->LookAt((Vector3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Camera_ProjectOn___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  Vector3 *arg2 = 0 ;
  Vector2i arg3 ;
  Matrix *arg4 = 0 ;
  Vector2i *argp3 ;
  Vector2i result;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  arg2 = (Vector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Vector3 const & is null", 0);
    return 0;
  } 
  argp3 = (Vector2i *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2i", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (Matrix *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Matrix const & is null", 0);
    return 0;
  } 
  result = ((XnorCore::Camera const *)arg1)->ProjectOn((Vector3 const &)*arg2,arg3,(Matrix const &)*arg4);
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Camera___() {
  void * jresult ;
  XnorCore::Camera *result = 0 ;
  
  result = (XnorCore::Camera *)new XnorCore::Camera();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Camera___(void * jarg1) {
  XnorCore::Camera *arg1 = (XnorCore::Camera *) 0 ;
  
  arg1 = (XnorCore::Camera *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_CameraComponent_camera_set___(void * jarg1, void * jarg2) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  XnorCore::Camera *arg2 = (XnorCore::Camera *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  arg2 = (XnorCore::Camera *)jarg2; 
  if (arg1) (arg1)->camera = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_CameraComponent_camera_get___(void * jarg1) {
  void * jresult ;
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  XnorCore::Camera *result = 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  result = (XnorCore::Camera *)& ((arg1)->camera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_CameraComponent___() {
  void * jresult ;
  XnorCore::CameraComponent *result = 0 ;
  
  result = (XnorCore::CameraComponent *)new XnorCore::CameraComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_CameraComponent___(void * jarg1) {
  XnorCore::CameraComponent *arg1 = (XnorCore::CameraComponent *) 0 ;
  
  arg1 = (XnorCore::CameraComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_materialType_set___(void * jarg1, int jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::MaterialType arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::MaterialType)jarg2; 
  if (arg1) (arg1)->materialType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Material_materialType_get___(void * jarg1) {
  int jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::MaterialType result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::MaterialType) ((arg1)->materialType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_albedoTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->albedoTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_albedoTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->albedoTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_metallicTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->metallicTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_metallicTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->metallicTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_roughnessTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->roughnessTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_roughnessTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->roughnessTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_normalTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->normalTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_normalTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->normalTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_ambiantOcclusionTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = (XnorCore::Pointer< XnorCore::Texture > *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2; 
  if (arg1) (arg1)->ambiantOcclusionTexture = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_ambiantOcclusionTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Texture > *)& ((arg1)->ambiantOcclusionTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_albedoColor_set___(void * jarg1, void * jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Colorf *arg2 = (XnorCore::Colorf *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (XnorCore::Colorf *)jarg2; 
  if (arg1) (arg1)->albedoColor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Material_albedoColor_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  XnorCore::Colorf *result = 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (XnorCore::Colorf *)& ((arg1)->albedoColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_metallic_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->metallic = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_metallic_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->metallic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_roughness_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->roughness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_roughness_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->roughness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_reflectance_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->reflectance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_reflectance_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->reflectance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_emissive_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->emissive = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_emissive_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->emissive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusion_set___(void * jarg1, float jarg2) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t arg2 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  arg2 = (float_t)jarg2; 
  if (arg1) (arg1)->ambientOcclusion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_Material_ambientOcclusion_get___(void * jarg1) {
  float jresult ;
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  float_t result;
  
  arg1 = (XnorCore::Material *)jarg1; 
  result = (float_t) ((arg1)->ambientOcclusion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Material___() {
  void * jresult ;
  XnorCore::Material *result = 0 ;
  
  result = (XnorCore::Material *)new XnorCore::Material();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Material___(void * jarg1) {
  XnorCore::Material *arg1 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::Material *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_MeshRenderer___() {
  void * jresult ;
  XnorCore::MeshRenderer *result = 0 ;
  
  result = (XnorCore::MeshRenderer *)new XnorCore::MeshRenderer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_model_set___(void * jarg1, void * jarg2) {
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Model > *arg2 = (XnorCore::Pointer< XnorCore::Model > *) 0 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Model > *)jarg2; 
  if (arg1) (arg1)->model = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_model_get___(void * jarg1) {
  void * jresult ;
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  XnorCore::Pointer< XnorCore::Model > *result = 0 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  result = (XnorCore::Pointer< XnorCore::Model > *)& ((arg1)->model);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_material_set___(void * jarg1, void * jarg2) {
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  XnorCore::Material *arg2 = (XnorCore::Material *) 0 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  arg2 = (XnorCore::Material *)jarg2; 
  if (arg1) (arg1)->material = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_material_get___(void * jarg1) {
  void * jresult ;
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  XnorCore::Material *result = 0 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  result = (XnorCore::Material *)& ((arg1)->material);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_drawModelAabb_set___(void * jarg1, unsigned int jarg2) {
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  bool_t arg2 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->drawModelAabb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_drawModelAabb_get___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  result = (bool_t) ((arg1)->drawModelAabb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_MeshRenderer___(void * jarg1) {
  XnorCore::MeshRenderer *arg1 = (XnorCore::MeshRenderer *) 0 ;
  
  arg1 = (XnorCore::MeshRenderer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ScriptComponent___() {
  void * jresult ;
  XnorCore::ScriptComponent *result = 0 ;
  
  result = (XnorCore::ScriptComponent *)new XnorCore::ScriptComponent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ScriptComponent___(void * jarg1) {
  XnorCore::ScriptComponent *arg1 = (XnorCore::ScriptComponent *) 0 ;
  
  arg1 = (XnorCore::ScriptComponent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_GetPosition___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_SetPosition___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &(arg1)->SetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_GetRotationEulerAngle___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetRotationEulerAngle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotationEulerAngle___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &(arg1)->SetRotationEulerAngle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_GetRotation___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Quaternion *) &((XnorCore::Transform const *)arg1)->GetRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_SetRotation___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Quaternion *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Quaternion *) &(arg1)->SetRotation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_GetScale___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &((XnorCore::Transform const *)arg1)->GetScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_SetScale___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Vector3 *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Vector3 *) &(arg1)->SetScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Transform_GetChanged___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (bool_t)((XnorCore::Transform const *)arg1)->GetChanged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Transform_worldMatrix_set___(void * jarg1, void * jarg2) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Matrix *arg2 = (Matrix *) 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  arg2 = (Matrix *)jarg2; 
  if (arg1) (arg1)->worldMatrix = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Transform_worldMatrix_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  Matrix *result = 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  result = (Matrix *)& ((arg1)->worldMatrix);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Transform___() {
  void * jresult ;
  XnorCore::Transform *result = 0 ;
  
  result = (XnorCore::Transform *)new XnorCore::Transform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Transform___(void * jarg1) {
  XnorCore::Transform *arg1 = (XnorCore::Transform *) 0 ;
  
  arg1 = (XnorCore::Transform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ComponentList__SWIG_0___() {
  void * jresult ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  result = (XnorCore::List< XnorCore::Component * > *)new XnorCore::List< XnorCore::Component * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ComponentList__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (XnorCore::List< XnorCore::Component * > *)new XnorCore::List< XnorCore::Component * >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ComponentList__SWIG_2___(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  size_t arg1 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  result = (XnorCore::List< XnorCore::Component * > *)new XnorCore::List< XnorCore::Component * >(arg1,(XnorCore::Component *const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_ComponentList__SWIG_3___(void * jarg1) {
  void * jresult ;
  std::initializer_list< XnorCore::Component * > *arg1 = 0 ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  arg1 = (std::initializer_list< XnorCore::Component * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::initializer_list< XnorCore::Component * > const & is null", 0);
    return 0;
  } 
  result = (XnorCore::List< XnorCore::Component * > *)new XnorCore::List< XnorCore::Component * >((std::initializer_list< XnorCore::Component * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_ComponentList___(void * jarg1) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Reserve___(void * jarg1, unsigned int jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Clear___(void * jarg1) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Add__SWIG_0___(void * jarg1) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  (arg1)->Add();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Add__SWIG_1___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  (arg1)->Add((XnorCore::Component *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_AddRange__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = (XnorCore::Component **) 0 ;
  size_t arg3 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (XnorCore::Component **)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->AddRange((XnorCore::Component *const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_AddRange__SWIG_1___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  std::initializer_list< XnorCore::Component * > *arg2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (std::initializer_list< XnorCore::Component * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::initializer_list< XnorCore::Component * > const & is null", 0);
    return ;
  } 
  (arg1)->AddRange((std::initializer_list< XnorCore::Component * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_AddZeroed___(void * jarg1) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  (arg1)->AddZeroed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Fill___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  (arg1)->Fill((XnorCore::Component *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Insert__SWIG_0___(void * jarg1, unsigned int jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Insert(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Insert__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  size_t arg3 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  arg3 = (size_t)jarg3; 
  (arg1)->Insert((XnorCore::Component *const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_InsertZeroed___(void * jarg1, unsigned int jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->InsertZeroed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Remove___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  (arg1)->Remove((XnorCore::Component *const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_RemoveAt___(void * jarg1, unsigned int jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t arg2 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_RemoveRange___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->RemoveRange(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **arg2 = 0 ;
  XnorCore::Component *temp2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  temp2 = (XnorCore::Component *)jarg2;
  arg2 = (XnorCore::Component **)&temp2; 
  result = (bool_t)((XnorCore::List< XnorCore::Component * > const *)arg1)->Contains((XnorCore::Component *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_ComponentList_Iterate___(void * jarg1, void * jarg2) {
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  std::function< void (XnorCore::Component **,size_t) > *arg2 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (std::function< void (XnorCore::Component **,size_t) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< void (XnorCore::Component **,size_t) > const & is null", 0);
    return ;
  } 
  (arg1)->Iterate((std::function< void (XnorCore::Component **,size_t) > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_Exists___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  std::function< bool_t (XnorCore::Component *const *,size_t) > *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (std::function< bool_t (XnorCore::Component *const *,size_t) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool_t (XnorCore::Component *const *,size_t) > const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::List< XnorCore::Component * > const *)arg1)->Exists((std::function< bool_t (XnorCore::Component *const *,size_t) > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ComponentList_Find___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  std::function< bool_t (XnorCore::Component *const *,size_t) > *arg2 = 0 ;
  XnorCore::Component **result = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  arg2 = (std::function< bool_t (XnorCore::Component *const *,size_t) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool_t (XnorCore::Component *const *,size_t) > const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Component **)(arg1)->Find((std::function< bool_t (XnorCore::Component *const *,size_t) > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_IsValid___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = (bool_t)((XnorCore::List< XnorCore::Component * > const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetData___(void * jarg1) {
  void * jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  XnorCore::Component **result = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = (XnorCore::Component **)((XnorCore::List< XnorCore::Component * > const *)arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetSize___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->GetSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetCapacity___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->GetCapacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_ComponentList_GetTypeSize___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::List< XnorCore::Component * > *arg1 = (XnorCore::List< XnorCore::Component * > *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::List< XnorCore::Component * > *)jarg1; 
  result = ((XnorCore::List< XnorCore::Component * > const *)arg1)->GetTypeSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Entity___() {
  void * jresult ;
  XnorCore::Entity *result = 0 ;
  
  result = (XnorCore::Entity *)new XnorCore::Entity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Entity___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_transform_set___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Transform *arg2 = (XnorCore::Transform *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Transform *)jarg2; 
  if (arg1) (arg1)->transform = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_transform_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Transform *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Transform *)& ((arg1)->transform);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_name_set___(void * jarg1, const char * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_Entity_name_get___(void * jarg1) {
  const char * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_AddComponent___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Component *arg2 = (XnorCore::Component *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Component *)jarg2; 
  (arg1)->AddComponent(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetGuid___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Guid *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Guid *) &((XnorCore::Entity const *)arg1)->GetGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetParent___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::Entity *)((XnorCore::Entity const *)arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_HasParent___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->HasParent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetChild___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  size_t arg2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (XnorCore::Entity *)((XnorCore::Entity const *)arg1)->GetChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_GetChildCount___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  size_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = ((XnorCore::Entity const *)arg1)->GetChildCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_HasChildren___(void * jarg1) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->HasChildren();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_IsParentOf___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (bool_t)((XnorCore::Entity const *)arg1)->IsParentOf((XnorCore::Entity const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_SetParent___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->SetParent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_AddChild___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->AddChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_RemoveChild___(void * jarg1, void * jarg2) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->RemoveChild(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_Begin___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Entity_Update___(void * jarg1) {
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Entity_OperatorEq___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::Entity *arg2 = 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity const & is null", 0);
    return 0;
  } 
  result = (bool_t)((XnorCore::Entity const *)arg1)->operator ==((XnorCore::Entity const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Entity_GetComponents___(void * jarg1) {
  void * jresult ;
  XnorCore::Entity *arg1 = (XnorCore::Entity *) 0 ;
  XnorCore::List< XnorCore::Component * > *result = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1; 
  result = (XnorCore::List< XnorCore::Component * > *) &((XnorCore::Entity const *)arg1)->GetComponents();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Skybox___() {
  void * jresult ;
  XnorCore::Skybox *result = 0 ;
  
  result = (XnorCore::Skybox *)new XnorCore::Skybox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Skybox___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_Initialize___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  (arg1)->Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_LoadCubeMap___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  std::array< std::string,6 > *arg2 = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (std::array< std::string,6 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< std::string,6 > const & is null", 0);
    return ;
  } 
  (arg1)->LoadCubeMap((std::array< std::string,6 > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_LoadFromHdrTexture___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Pointer< XnorCore::Texture > *arg2 = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Pointer< XnorCore::Texture > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Pointer< XnorCore::Texture > const & is null", 0);
    return ;
  } 
  (arg1)->LoadFromHdrTexture((XnorCore::Pointer< XnorCore::Texture > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_irradianceMap_set___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *arg2 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Cubemap *)jarg2; 
  if (arg1) (arg1)->irradianceMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skybox_irradianceMap_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  result = (XnorCore::Cubemap *) ((arg1)->irradianceMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_cubeMap_set___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *arg2 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Cubemap *)jarg2; 
  if (arg1) (arg1)->cubeMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skybox_cubeMap_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  result = (XnorCore::Cubemap *) ((arg1)->cubeMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_prefilterMap_set___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *arg2 = (XnorCore::Cubemap *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Cubemap *)jarg2; 
  if (arg1) (arg1)->prefilterMap = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skybox_prefilterMap_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Cubemap *result = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  result = (XnorCore::Cubemap *) ((arg1)->prefilterMap);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Skybox_precomputeBrdfTexture_set___(void * jarg1, void * jarg2) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Texture *arg2 = (XnorCore::Texture *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  arg2 = (XnorCore::Texture *)jarg2; 
  if (arg1) (arg1)->precomputeBrdfTexture = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Skybox_precomputeBrdfTexture_get___(void * jarg1) {
  void * jresult ;
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  XnorCore::Texture *result = 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  result = (XnorCore::Texture *) ((arg1)->precomputeBrdfTexture);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_skybox_set___(void * jarg1) {
  XnorCore::Skybox *arg1 = (XnorCore::Skybox *) 0 ;
  
  arg1 = (XnorCore::Skybox *)jarg1; 
  XnorCore::Scene::skybox = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_skybox_get___() {
  void * jresult ;
  XnorCore::Skybox *result = 0 ;
  
  result = (XnorCore::Skybox *)&XnorCore::Scene::skybox;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_new_Scene___() {
  void * jresult ;
  XnorCore::Scene *result = 0 ;
  
  result = (XnorCore::Scene *)new XnorCore::Scene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_delete_Scene___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_Begin___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_Update___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_GetEntityById___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Guid *arg2 = 0 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Guid const & is null", 0);
    return 0;
  } 
  result = (XnorCore::Entity *)(arg1)->GetEntityById((XnorCore::Guid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_CreateEntity__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  std::string *arg2 = 0 ;
  XnorCore::Entity *arg3 = (XnorCore::Entity *) 0 ;
  std::unique_ptr< std::string > rvrdeleter2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  arg3 = (XnorCore::Entity *)jarg3; 
  result = (XnorCore::Entity *)(arg1)->CreateEntity((std::string const &&)*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_CreateEntity__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  std::string *arg2 = 0 ;
  std::unique_ptr< std::string > rvrdeleter2 ;
  XnorCore::Entity *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const && is null", 0);
    return 0;
  }
  rvrdeleter2.reset(arg2); 
  result = (XnorCore::Entity *)(arg1)->CreateEntity((std::string const &&)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Scene_DestroyEntity___(void * jarg1, void * jarg2) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  (arg1)->DestroyEntity(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Scene_HasEntity___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  bool_t result;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (bool_t)((XnorCore::Scene const *)arg1)->HasEntity((XnorCore::Entity const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Scene_GetEntities___(void * jarg1) {
  void * jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::List< XnorCore::Entity * > *result = 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  result = (XnorCore::List< XnorCore::Entity * > *) &(arg1)->GetEntities();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Scene_GetEntityIndex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  XnorCore::Entity *arg2 = (XnorCore::Entity *) 0 ;
  uint32_t result;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  arg2 = (XnorCore::Entity *)jarg2; 
  result = (uint32_t)((XnorCore::Scene const *)arg1)->GetEntityIndex((XnorCore::Entity const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AlignImGuiCursor__SWIG_0___(float jarg1, float jarg2) {
  float_t arg1 ;
  float_t arg2 ;
  
  arg1 = (float_t)jarg1; 
  arg2 = (float_t)jarg2; 
  XnorCore::Utils::AlignImGuiCursor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_AlignImGuiCursor__SWIG_1___(float jarg1) {
  float_t arg1 ;
  
  arg1 = (float_t)jarg1; 
  XnorCore::Utils::AlignImGuiCursor(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ToImVec___(void * jarg1) {
  void * jresult ;
  Vector2 arg1 ;
  Vector2 *argp1 ;
  ImVec2 result;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::Utils::ToImVec(SWIG_STD_MOVE(arg1));
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FromImVec___(void * jarg1) {
  void * jresult ;
  ImVec2 arg1 ;
  ImVec2 *argp1 ;
  Vector2 result;
  
  argp1 = (ImVec2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::Utils::FromImVec(SWIG_STD_MOVE(arg1));
  jresult = new Vector2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ToImCol__SWIG_0___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorRgb arg1 ;
  XnorCore::ColorRgb *argp1 ;
  ImVec4 result;
  
  argp1 = (XnorCore::ColorRgb *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorRgb", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::Utils::ToImCol(SWIG_STD_MOVE(arg1));
  jresult = new ImVec4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ToImCol__SWIG_1___(void * jarg1) {
  void * jresult ;
  XnorCore::Colorf *arg1 = 0 ;
  ImVec4 result;
  
  arg1 = (XnorCore::Colorf *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Colorf const & is null", 0);
    return 0;
  } 
  result = XnorCore::Utils::ToImCol((XnorCore::Colorf const &)*arg1);
  jresult = new ImVec4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_ToImCol__SWIG_2___(void * jarg1) {
  void * jresult ;
  XnorCore::ColorHsva arg1 ;
  XnorCore::ColorHsva *argp1 ;
  ImVec4 result;
  
  argp1 = (XnorCore::ColorHsva *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null XnorCore::ColorHsva", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::Utils::ToImCol(SWIG_STD_MOVE(arg1));
  jresult = new ImVec4(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_FromImCol___(void * jarg1) {
  void * jresult ;
  ImVec4 *arg1 = 0 ;
  XnorCore::Colorf result;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = XnorCore::Utils::FromImCol((ImVec4 const &)*arg1);
  jresult = new XnorCore::Colorf(result); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_HumanizeString___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::HumanizeString((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_HumanizeVariableName___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::HumanizeVariableName((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_XnorfCore_RemoveNamespaces___(const char * jarg1) {
  const char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = XnorCore::Utils::RemoveNamespaces((std::string const &)*arg1);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_RemapValue___(float jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  float_t arg1 ;
  Vector2 arg2 ;
  Vector2 arg3 ;
  Vector2 *argp2 ;
  Vector2 *argp3 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  argp2 = (Vector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Vector2 *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (float_t)XnorCore::Utils::RemapValue(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XnorfCore_NormalizeAngle___(float jarg1) {
  float jresult ;
  float_t arg1 ;
  float_t result;
  
  arg1 = (float_t)jarg1; 
  result = (float_t)XnorCore::Utils::NormalizeAngle(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_NormalizeAngles___(void * jarg1) {
  void * jresult ;
  Vector3 arg1 ;
  Vector3 *argp1 ;
  Vector3 result;
  
  argp1 = (Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = XnorCore::Utils::NormalizeAngles(SWIG_STD_MOVE(arg1));
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_GetQuaternionEulerAngles___(void * jarg1) {
  void * jresult ;
  Quaternion *arg1 = 0 ;
  Vector3 result;
  
  arg1 = (Quaternion *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Quaternion const & is null", 0);
    return 0;
  } 
  result = XnorCore::Utils::GetQuaternionEulerAngles((Quaternion const &)*arg1);
  jresult = new Vector3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenInExplorer__SWIG_0___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Utils::OpenInExplorer((std::filesystem::path const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenInExplorer__SWIG_1___(void * jarg1, unsigned int jarg2) {
  std::filesystem::path *arg1 = 0 ;
  bool_t arg2 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  XnorCore::Utils::OpenInExplorer((std::filesystem::path const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_OpenFile___(void * jarg1) {
  std::filesystem::path *arg1 = 0 ;
  
  arg1 = (std::filesystem::path *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::filesystem::path const & is null", 0);
    return ;
  } 
  XnorCore::Utils::OpenFile((std::filesystem::path const &)*arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_StringEqualsIgnoreCase___(const char * jarg1, const char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool_t result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool_t)XnorCore::Utils::StringEqualsIgnoreCase((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_OnAttachToParent___(void * jarg1) {
  XnorCore::Entity *arg1 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::OnAttachToParent(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_Update___(void * jarg1) {
  XnorCore::List< XnorCore::Entity * > *arg1 = 0 ;
  
  arg1 = (XnorCore::List< XnorCore::Entity * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::List< XnorCore::Entity * > const & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::Update((XnorCore::List< XnorCore::Entity * > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_SceneGraph_UpdateTransform___(void * jarg1) {
  XnorCore::Entity *arg1 = 0 ;
  
  arg1 = (XnorCore::Entity *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Entity & is null", 0);
    return ;
  } 
  XnorCore::SceneGraph::UpdateTransform(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_Begin___() {
  XnorCore::World::Begin();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_Update___() {
  XnorCore::World::Update();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_isPlaying_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::World::isPlaying = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_World_isPlaying_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::World::isPlaying;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_hasStarted_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::World::hasStarted = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_World_hasStarted_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::World::hasStarted;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_World_scene_set___(void * jarg1) {
  XnorCore::Scene *arg1 = (XnorCore::Scene *) 0 ;
  
  arg1 = (XnorCore::Scene *)jarg1; 
  XnorCore::World::scene = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_World_scene_get___() {
  void * jresult ;
  XnorCore::Scene *result = 0 ;
  
  result = (XnorCore::Scene *)XnorCore::World::scene;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Screen_GetSize___() {
  void * jresult ;
  Vector2i result;
  
  result = XnorCore::Screen::GetSize();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XnorfCore_Screen_GetRefreshRate___() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)XnorCore::Screen::GetRefreshRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Screen_Initialize___() {
  XnorCore::Screen::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_resizeFrameBuffer_set___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Window::resizeFrameBuffer = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Window_resizeFrameBuffer_get___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Window::resizeFrameBuffer;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Initialize___() {
  XnorCore::Window::Initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Shutdown___() {
  XnorCore::Window::Shutdown();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Window_GetSize___() {
  void * jresult ;
  Vector2i result;
  
  result = XnorCore::Window::GetSize();
  jresult = new Vector2i(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XnorfCore_Window_ShouldClose___() {
  unsigned int jresult ;
  bool_t result;
  
  result = (bool_t)XnorCore::Window::ShouldClose();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_PollEvents___() {
  XnorCore::Window::PollEvents();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_MakeContextCurrent___() {
  XnorCore::Window::MakeContextCurrent();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XnorfCore_Window_GetHandle___() {
  void * jresult ;
  GLFWwindow *result = 0 ;
  
  result = (GLFWwindow *)XnorCore::Window::GetHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_Show___() {
  XnorCore::Window::Show();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetIcon___(void * jarg1) {
  XnorCore::Texture *arg1 = 0 ;
  
  arg1 = (XnorCore::Texture *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "XnorCore::Texture & is null", 0);
    return ;
  } 
  XnorCore::Window::SetIcon(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetCursorHidden___(unsigned int jarg1) {
  bool_t arg1 ;
  
  arg1 = jarg1 ? true : false; 
  XnorCore::Window::SetCursorHidden(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XnorfCore_Window_SetCursorPosition___(void * jarg1) {
  Vector2 arg1 ;
  Vector2 *argp1 ;
  
  argp1 = (Vector2 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Vector2", 0);
    return ;
  }
  arg1 = *argp1; 
  XnorCore::Window::SetCursorPosition(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT XnorCore::Entry * SWIGSTDCALL CSharp_XnorfCore_Directory_SWIGUpcast___(XnorCore::Directory *jarg1) {
    return (XnorCore::Entry *)jarg1;
}

SWIGEXPORT XnorCore::Entry * SWIGSTDCALL CSharp_XnorfCore_File_SWIGUpcast___(XnorCore::File *jarg1) {
    return (XnorCore::Entry *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Cubemap_SWIGUpcast___(XnorCore::Cubemap *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Font_SWIGUpcast___(XnorCore::Font *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Model_SWIGUpcast___(XnorCore::Model *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Shader_SWIGUpcast___(XnorCore::Shader *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Resource * SWIGSTDCALL CSharp_XnorfCore_Texture_SWIGUpcast___(XnorCore::Texture *jarg1) {
    return (XnorCore::Resource *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_Light_SWIGUpcast___(XnorCore::Light *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_DirectionalLight_SWIGUpcast___(XnorCore::DirectionalLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_PointLight_SWIGUpcast___(XnorCore::PointLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Light * SWIGSTDCALL CSharp_XnorfCore_SpotLight_SWIGUpcast___(XnorCore::SpotLight *jarg1) {
    return (XnorCore::Light *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_CameraComponent_SWIGUpcast___(XnorCore::CameraComponent *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_MeshRenderer_SWIGUpcast___(XnorCore::MeshRenderer *jarg1) {
    return (XnorCore::Component *)jarg1;
}

SWIGEXPORT XnorCore::Component * SWIGSTDCALL CSharp_XnorfCore_ScriptComponent_SWIGUpcast___(XnorCore::ScriptComponent *jarg1) {
    return (XnorCore::Component *)jarg1;
}

#ifdef __cplusplus
}
#endif

