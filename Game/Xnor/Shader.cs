//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Shader : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Shader(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.Shader_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Shader obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Shader obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Shader(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_3_t VertexFileExtensions {
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Shader_VertexFileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_3_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_3_t FragmentFileExtensions {
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Shader_FragmentFileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_3_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_2_t GeometryFileExtensions {
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Shader_GeometryFileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_2_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_2_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_2_t ComputeFileExtensions {
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Shader_ComputeFileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_2_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_2_t(cPtr, false);
      return ret;
    } 
  }

  public static ShaderType FileExtensionToType(string extension) {
    ShaderType ret = (ShaderType)CorePINVOKE.Shader_FileExtensionToType(extension);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Shader() : this(CorePINVOKE.new_Shader__SWIG_0(), true) {
  }

  public Shader(string name) : this(CorePINVOKE.new_Shader__SWIG_1(name), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_uint8_t buffer, SWIGTYPE_p_int64_t length) {
    bool ret = CorePINVOKE.Shader_Load__SWIG_0(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(buffer), SWIGTYPE_p_int64_t.getCPtr(length));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t shader) {
    bool ret = CorePINVOKE.Shader_Load__SWIG_1(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(shader));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Load(string buffer, SWIGTYPE_p_int64_t length, ShaderType type) {
    bool ret = CorePINVOKE.Shader_Load__SWIG_2(swigCPtr, buffer, SWIGTYPE_p_int64_t.getCPtr(length), (int)type);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void CreateInRhi() {
    CorePINVOKE.Shader_CreateInRhi(swigCPtr);
  }

  public override void DestroyInRhi() {
    CorePINVOKE.Shader_DestroyInRhi(swigCPtr);
  }

  public void Recompile() {
    CorePINVOKE.Shader_Recompile(swigCPtr);
  }

  public override void Unload() {
    CorePINVOKE.Shader_Unload(swigCPtr);
  }

  public void SetInt(string keyName, SWIGTYPE_p_int32_t value) {
    CorePINVOKE.Shader_SetInt(swigCPtr, keyName, SWIGTYPE_p_int32_t.getCPtr(value));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBool(string keyName, bool value) {
    CorePINVOKE.Shader_SetBool(swigCPtr, keyName, value);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFloat(string keyName, SWIGTYPE_p_float_t value) {
    CorePINVOKE.Shader_SetFloat(swigCPtr, keyName, SWIGTYPE_p_float_t.getCPtr(value));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVec3(string keyName, SWIGTYPE_p_Vector3 value) {
    CorePINVOKE.Shader_SetVec3(swigCPtr, keyName, SWIGTYPE_p_Vector3.getCPtr(value));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVec4(string keyName, SWIGTYPE_p_Vector4 value) {
    CorePINVOKE.Shader_SetVec4(swigCPtr, keyName, SWIGTYPE_p_Vector4.getCPtr(value));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMat4(string keyName, SWIGTYPE_p_Matrix value) {
    CorePINVOKE.Shader_SetMat4(swigCPtr, keyName, SWIGTYPE_p_Matrix.getCPtr(value));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_uint32_t GetId() {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(CorePINVOKE.Shader_GetId(swigCPtr), true);
    return ret;
  }

  public void Use() {
    CorePINVOKE.Shader_Use(swigCPtr);
  }

  public void Unuse() {
    CorePINVOKE.Shader_Unuse(swigCPtr);
  }

  public void SetDepthFunction(DepthFunction depthFunction) {
    CorePINVOKE.Shader_SetDepthFunction(swigCPtr, (int)depthFunction);
  }

  public void SetBlendFunction(BlendFunction blendFunction) {
    CorePINVOKE.Shader_SetBlendFunction(swigCPtr, BlendFunction.getCPtr(blendFunction));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
