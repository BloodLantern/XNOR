//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class ColorRgb : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorRgb(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorRgb obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ColorRgb obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ColorRgb() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_ColorRgb(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static ColorRgb White() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_White(), true);
    return ret;
  }

  public static ColorRgb Gray() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Gray(), true);
    return ret;
  }

  public static ColorRgb Black() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Black(), true);
    return ret;
  }

  public static ColorRgb Red() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Red(), true);
    return ret;
  }

  public static ColorRgb Green() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Green(), true);
    return ret;
  }

  public static ColorRgb Blue() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Blue(), true);
    return ret;
  }

  public static ColorRgb Yellow() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Yellow(), true);
    return ret;
  }

  public static ColorRgb Cyan() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Cyan(), true);
    return ret;
  }

  public static ColorRgb Magenta() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgb_Magenta(), true);
    return ret;
  }

  public SWIGTYPE_p_uint8_t r {
    set {
      CorePINVOKE.ColorRgb_r_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorRgb_r_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t g {
    set {
      CorePINVOKE.ColorRgb_g_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorRgb_g_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t b {
    set {
      CorePINVOKE.ColorRgb_b_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorRgb_b_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ColorRgb() : this(CorePINVOKE.new_ColorRgb__SWIG_0(), true) {
  }

  public ColorRgb(SWIGTYPE_p_uint32_t rgb) : this(CorePINVOKE.new_ColorRgb__SWIG_1(SWIGTYPE_p_uint32_t.getCPtr(rgb)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColorRgb(SWIGTYPE_p_uint8_t r, SWIGTYPE_p_uint8_t g, SWIGTYPE_p_uint8_t b) : this(CorePINVOKE.new_ColorRgb__SWIG_2(SWIGTYPE_p_uint8_t.getCPtr(r), SWIGTYPE_p_uint8_t.getCPtr(g), SWIGTYPE_p_uint8_t.getCPtr(b)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
