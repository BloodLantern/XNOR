//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class ColorHsv : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorHsv(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorHsv obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ColorHsv obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ColorHsv() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_ColorHsv(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_uint8_t h {
    set {
      CorePINVOKE.ColorHsv_h_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorHsv_h_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t s {
    set {
      CorePINVOKE.ColorHsv_s_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorHsv_s_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t v {
    set {
      CorePINVOKE.ColorHsv_v_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorHsv_v_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_uint8_t a {
    set {
      CorePINVOKE.ColorHsv_a_set(swigCPtr, SWIGTYPE_p_uint8_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(CorePINVOKE.ColorHsv_a_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ColorHsv() : this(CorePINVOKE.new_ColorHsv__SWIG_0(), true) {
  }

  public ColorHsv(SWIGTYPE_p_uint32_t hsva) : this(CorePINVOKE.new_ColorHsv__SWIG_1(SWIGTYPE_p_uint32_t.getCPtr(hsva)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColorHsv(SWIGTYPE_p_uint8_t h, SWIGTYPE_p_uint8_t s, SWIGTYPE_p_uint8_t v, SWIGTYPE_p_uint8_t a) : this(CorePINVOKE.new_ColorHsv__SWIG_2(SWIGTYPE_p_uint8_t.getCPtr(h), SWIGTYPE_p_uint8_t.getCPtr(s), SWIGTYPE_p_uint8_t.getCPtr(v), SWIGTYPE_p_uint8_t.getCPtr(a)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public ColorHsv(SWIGTYPE_p_uint8_t h, SWIGTYPE_p_uint8_t s, SWIGTYPE_p_uint8_t v) : this(CorePINVOKE.new_ColorHsv__SWIG_3(SWIGTYPE_p_uint8_t.getCPtr(h), SWIGTYPE_p_uint8_t.getCPtr(s), SWIGTYPE_p_uint8_t.getCPtr(v)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
