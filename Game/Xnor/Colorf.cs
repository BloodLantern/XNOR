//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Colorf : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Colorf(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Colorf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Colorf obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Colorf() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Colorf(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_float_t r {
    set {
      CorePINVOKE.Colorf_r_set(swigCPtr, SWIGTYPE_p_float_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_float_t ret = new SWIGTYPE_p_float_t(CorePINVOKE.Colorf_r_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_float_t g {
    set {
      CorePINVOKE.Colorf_g_set(swigCPtr, SWIGTYPE_p_float_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_float_t ret = new SWIGTYPE_p_float_t(CorePINVOKE.Colorf_g_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_float_t b {
    set {
      CorePINVOKE.Colorf_b_set(swigCPtr, SWIGTYPE_p_float_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_float_t ret = new SWIGTYPE_p_float_t(CorePINVOKE.Colorf_b_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_float_t a {
    set {
      CorePINVOKE.Colorf_a_set(swigCPtr, SWIGTYPE_p_float_t.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_float_t ret = new SWIGTYPE_p_float_t(CorePINVOKE.Colorf_a_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Colorf() : this(CorePINVOKE.new_Colorf__SWIG_0(), true) {
  }

  public Colorf(SWIGTYPE_p_float_t r, SWIGTYPE_p_float_t g, SWIGTYPE_p_float_t b, SWIGTYPE_p_float_t a) : this(CorePINVOKE.new_Colorf__SWIG_1(SWIGTYPE_p_float_t.getCPtr(r), SWIGTYPE_p_float_t.getCPtr(g), SWIGTYPE_p_float_t.getCPtr(b), SWIGTYPE_p_float_t.getCPtr(a)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Colorf(SWIGTYPE_p_float_t r, SWIGTYPE_p_float_t g, SWIGTYPE_p_float_t b) : this(CorePINVOKE.new_Colorf__SWIG_2(SWIGTYPE_p_float_t.getCPtr(r), SWIGTYPE_p_float_t.getCPtr(g), SWIGTYPE_p_float_t.getCPtr(b)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_Vector3 Rgb() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Colorf_Rgb(swigCPtr), true);
    return ret;
  }

}

}
