//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Logger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Logger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Logger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Logger obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Logger() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Logger.LogLevel minimumConsoleLevel {
    set {
      CorePINVOKE.Logger_minimumConsoleLevel_set((int)value);
    } 
    get {
      Logger.LogLevel ret = (Logger.LogLevel)CorePINVOKE.Logger_minimumConsoleLevel_get();
      return ret;
    } 
  }

  public static Logger.LogLevel minimumFileLevel {
    set {
      CorePINVOKE.Logger_minimumFileLevel_set((int)value);
    } 
    get {
      Logger.LogLevel ret = (Logger.LogLevel)CorePINVOKE.Logger_minimumFileLevel_get();
      return ret;
    } 
  }

  public static void OpenFile(SWIGTYPE_p_std__filesystem__path filepath) {
    CorePINVOKE.Logger_OpenFile(SWIGTYPE_p_std__filesystem__path.getCPtr(filepath));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpenDefaultFile() {
    CorePINVOKE.Logger_OpenDefaultFile();
  }

  public static bool HasFileOpen() {
    bool ret = CorePINVOKE.Logger_HasFileOpen();
    return ret;
  }

  public static void CloseFile() {
    CorePINVOKE.Logger_CloseFile();
  }

  public static void Synchronize() {
    CorePINVOKE.Logger_Synchronize();
  }

  public static void Stop() {
    CorePINVOKE.Logger_Stop();
  }

  public enum LogLevel {
    TemporaryDebug,
    Debug,
    Info,
    Warning,
    Error,
    Fatal
  }

}

}
