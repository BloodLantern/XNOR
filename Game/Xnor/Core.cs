//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Core {
  public static SWIGTYPE_p_uint32_t MaxSpotLights {
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(CorePINVOKE.MaxSpotLights_get(), true);
      return ret;
    } 
  }

  public static SWIGTYPE_p_uint32_t MaxPointLights {
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(CorePINVOKE.MaxPointLights_get(), true);
      return ret;
    } 
  }

  public static SWIGTYPE_p_uint32_t MaxDirectionalLights {
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(CorePINVOKE.MaxDirectionalLights_get(), true);
      return ret;
    } 
  }

  public static void AlignImGuiCursor(SWIGTYPE_p_float_t objectWidth, SWIGTYPE_p_float_t alignment) {
    CorePINVOKE.AlignImGuiCursor__SWIG_0(SWIGTYPE_p_float_t.getCPtr(objectWidth), SWIGTYPE_p_float_t.getCPtr(alignment));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AlignImGuiCursor(SWIGTYPE_p_float_t objectWidth) {
    CorePINVOKE.AlignImGuiCursor__SWIG_1(SWIGTYPE_p_float_t.getCPtr(objectWidth));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_ImVec2 ToImVec(SWIGTYPE_p_Vector2 v) {
    SWIGTYPE_p_ImVec2 ret = new SWIGTYPE_p_ImVec2(CorePINVOKE.ToImVec(SWIGTYPE_p_Vector2.getCPtr(v)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Vector2 FromImVec(SWIGTYPE_p_ImVec2 v) {
    SWIGTYPE_p_Vector2 ret = new SWIGTYPE_p_Vector2(CorePINVOKE.FromImVec(SWIGTYPE_p_ImVec2.getCPtr(v)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_ImVec4 ToImCol(ColorRgb color) {
    SWIGTYPE_p_ImVec4 ret = new SWIGTYPE_p_ImVec4(CorePINVOKE.ToImCol__SWIG_0(ColorRgb.getCPtr(color)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_ImVec4 ToImCol(Colorf color) {
    SWIGTYPE_p_ImVec4 ret = new SWIGTYPE_p_ImVec4(CorePINVOKE.ToImCol__SWIG_1(Colorf.getCPtr(color)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_ImVec4 ToImCol(ColorHsv color) {
    SWIGTYPE_p_ImVec4 ret = new SWIGTYPE_p_ImVec4(CorePINVOKE.ToImCol__SWIG_2(ColorHsv.getCPtr(color)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Colorf FromImCol(SWIGTYPE_p_ImVec4 color) {
    Colorf ret = new Colorf(CorePINVOKE.FromImCol(SWIGTYPE_p_ImVec4.getCPtr(color)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string HumanizeString(string str) {
    string ret = CorePINVOKE.HumanizeString(str);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string RemoveNamespaces(string str) {
    string ret = CorePINVOKE.RemoveNamespaces(str);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_float_t NormalizeAngle(SWIGTYPE_p_float_t angle) {
    SWIGTYPE_p_float_t ret = new SWIGTYPE_p_float_t(CorePINVOKE.NormalizeAngle(SWIGTYPE_p_float_t.getCPtr(angle)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Vector3 NormalizeAngles(SWIGTYPE_p_Vector3 angles) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.NormalizeAngles(SWIGTYPE_p_Vector3.getCPtr(angles)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Vector3 GetQuaternionEulerAngles(SWIGTYPE_p_Quaternion rot) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.GetQuaternionEulerAngles(SWIGTYPE_p_Quaternion.getCPtr(rot)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void OpenInExplorer(SWIGTYPE_p_std__filesystem__path path) {
    CorePINVOKE.OpenInExplorer__SWIG_0(SWIGTYPE_p_std__filesystem__path.getCPtr(path));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpenInExplorer(SWIGTYPE_p_std__filesystem__path path, bool isFile) {
    CorePINVOKE.OpenInExplorer__SWIG_1(SWIGTYPE_p_std__filesystem__path.getCPtr(path), isFile);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void OpenFile(SWIGTYPE_p_std__filesystem__path filepath) {
    CorePINVOKE.OpenFile(SWIGTYPE_p_std__filesystem__path.getCPtr(filepath));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool StringEqualsIgnoreCase(string a, string b) {
    bool ret = CorePINVOKE.StringEqualsIgnoreCase(a, b);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
