//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class TextureCreateInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TextureCreateInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureCreateInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TextureCreateInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TextureCreateInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_TextureCreateInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_void data {
    set {
      CorePINVOKE.TextureCreateInfo_data_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.TextureCreateInfo_data_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_Vector2i size {
    set {
      CorePINVOKE.TextureCreateInfo_size_set(swigCPtr, SWIGTYPE_p_Vector2i.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Vector2i ret = new SWIGTYPE_p_Vector2i(CorePINVOKE.TextureCreateInfo_size_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public TextureFiltering filtering {
    set {
      CorePINVOKE.TextureCreateInfo_filtering_set(swigCPtr, (int)value);
    } 
    get {
      TextureFiltering ret = (TextureFiltering)CorePINVOKE.TextureCreateInfo_filtering_get(swigCPtr);
      return ret;
    } 
  }

  public TextureWrapping wrapping {
    set {
      CorePINVOKE.TextureCreateInfo_wrapping_set(swigCPtr, (int)value);
    } 
    get {
      TextureWrapping ret = (TextureWrapping)CorePINVOKE.TextureCreateInfo_wrapping_get(swigCPtr);
      return ret;
    } 
  }

  public TextureFormat format {
    set {
      CorePINVOKE.TextureCreateInfo_format_set(swigCPtr, (int)value);
    } 
    get {
      TextureFormat ret = (TextureFormat)CorePINVOKE.TextureCreateInfo_format_get(swigCPtr);
      return ret;
    } 
  }

  public TextureInternalFormat internalFormat {
    set {
      CorePINVOKE.TextureCreateInfo_internalFormat_set(swigCPtr, (int)value);
    } 
    get {
      TextureInternalFormat ret = (TextureInternalFormat)CorePINVOKE.TextureCreateInfo_internalFormat_get(swigCPtr);
      return ret;
    } 
  }

  public DataType dataType {
    set {
      CorePINVOKE.TextureCreateInfo_dataType_set(swigCPtr, (int)value);
    } 
    get {
      DataType ret = (DataType)CorePINVOKE.TextureCreateInfo_dataType_get(swigCPtr);
      return ret;
    } 
  }

  public TextureCreateInfo() : this(CorePINVOKE.new_TextureCreateInfo(), true) {
  }

}

}
