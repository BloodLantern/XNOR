//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Entity : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Entity(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Entity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Entity obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Entity() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Transform transform {
    set {
      CorePINVOKE.Entity_transform_set(swigCPtr, Transform.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Entity_transform_get(swigCPtr);
      Transform ret = (cPtr == global::System.IntPtr.Zero) ? null : new Transform(cPtr, false);
      return ret;
    } 
  }

  public string name {
    set {
      CorePINVOKE.Entity_name_set(swigCPtr, value);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CorePINVOKE.Entity_name_get(swigCPtr);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void AddComponent(Component component) {
    CorePINVOKE.Entity_AddComponent(swigCPtr, Component.getCPtr(component));
  }

  public Guid GetGuid() {
    Guid ret = new Guid(CorePINVOKE.Entity_GetGuid(swigCPtr), false);
    return ret;
  }

  public Entity GetParent() {
    global::System.IntPtr cPtr = CorePINVOKE.Entity_GetParent(swigCPtr);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public bool HasParent() {
    bool ret = CorePINVOKE.Entity_HasParent(swigCPtr);
    return ret;
  }

  public Entity GetChild(uint index) {
    global::System.IntPtr cPtr = CorePINVOKE.Entity_GetChild(swigCPtr, index);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    return ret;
  }

  public uint GetChildCount() {
    uint ret = CorePINVOKE.Entity_GetChildCount(swigCPtr);
    return ret;
  }

  public bool HasChildren() {
    bool ret = CorePINVOKE.Entity_HasChildren(swigCPtr);
    return ret;
  }

  public bool IsAParentOf(Entity child) {
    bool ret = CorePINVOKE.Entity_IsAParentOf(swigCPtr, Entity.getCPtr(child));
    return ret;
  }

  public void SetParent(Entity parent) {
    CorePINVOKE.Entity_SetParent(swigCPtr, Entity.getCPtr(parent));
  }

  public void AddChild(Entity child) {
    CorePINVOKE.Entity_AddChild(swigCPtr, Entity.getCPtr(child));
  }

  public void RemoveChild(Entity child) {
    CorePINVOKE.Entity_RemoveChild(swigCPtr, Entity.getCPtr(child));
  }

  public void Begin() {
    CorePINVOKE.Entity_Begin(swigCPtr);
  }

  public void Update() {
    CorePINVOKE.Entity_Update(swigCPtr);
  }

}

}
