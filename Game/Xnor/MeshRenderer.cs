//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class MeshRenderer : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MeshRenderer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.MeshRenderer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MeshRenderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(MeshRenderer obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_MeshRenderer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MeshRenderer() : this(CorePINVOKE.new_MeshRenderer(), true) {
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Model_t model {
    set {
      CorePINVOKE.MeshRenderer_model_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Model_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.MeshRenderer_model_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Model_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Model_t(cPtr, false);
      return ret;
    } 
  }

  public Material material {
    set {
      CorePINVOKE.MeshRenderer_material_set(swigCPtr, Material.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.MeshRenderer_material_get(swigCPtr);
      Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
      return ret;
    } 
  }

  public bool drawModelAabb {
    set {
      CorePINVOKE.MeshRenderer_drawModelAabb_set(swigCPtr, value);
    } 
    get {
      bool ret = CorePINVOKE.MeshRenderer_drawModelAabb_get(swigCPtr);
      return ret;
    } 
  }

}

}
