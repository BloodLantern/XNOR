//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Input : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Input(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Input obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Input obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Input() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool mouseLocked {
    set {
      CorePINVOKE.Input_mouseLocked_set(value);
    } 
    get {
      bool ret = CorePINVOKE.Input_mouseLocked_get();
      return ret;
    } 
  }

  public static bool GetKey(Key key, KeyStatus status) {
    bool ret = CorePINVOKE.Input_GetKey__SWIG_0((int)key, (int)status);
    return ret;
  }

  public static bool GetKey(Key key) {
    bool ret = CorePINVOKE.Input_GetKey__SWIG_1((int)key);
    return ret;
  }

  public static bool GetMouseButton(MouseButton mouseButton, MouseButtonStatus status) {
    bool ret = CorePINVOKE.Input_GetMouseButton__SWIG_0((int)mouseButton, (int)status);
    return ret;
  }

  public static bool GetMouseButton(MouseButton mouseButton) {
    bool ret = CorePINVOKE.Input_GetMouseButton__SWIG_1((int)mouseButton);
    return ret;
  }

  public static bool GetGamepadButton(SWIGTYPE_p_uint32_t gamePadId, GamepadButton gamepadButton, GamepadButtonStatus buttonStatus) {
    bool ret = CorePINVOKE.Input_GetGamepadButton(SWIGTYPE_p_uint32_t.getCPtr(gamePadId), (int)gamepadButton, (int)buttonStatus);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void HandleEvent() {
    CorePINVOKE.Input_HandleEvent();
  }

  public static void Initialize() {
    CorePINVOKE.Input_Initialize();
  }

  public static void Update() {
    CorePINVOKE.Input_Update();
  }

}

}
