//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor {

public class Transform : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Transform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Transform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Transform obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Transform() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Transform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_Vector3 GetPosition() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_GetPosition(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 SetPosition() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_SetPosition(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetRotationEulerAngle() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_GetRotationEulerAngle(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 SetRotationEulerAngle() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_SetRotationEulerAngle(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Quaternion GetRotation() {
    SWIGTYPE_p_Quaternion ret = new SWIGTYPE_p_Quaternion(CorePINVOKE.Transform_GetRotation(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Quaternion SetRotation() {
    SWIGTYPE_p_Quaternion ret = new SWIGTYPE_p_Quaternion(CorePINVOKE.Transform_SetRotation(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 GetScale() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_GetScale(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 SetScale() {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(CorePINVOKE.Transform_SetScale(swigCPtr), false);
    return ret;
  }

  public bool GetChanged() {
    bool ret = CorePINVOKE.Transform_GetChanged(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Matrix worldMatrix {
    set {
      CorePINVOKE.Transform_worldMatrix_set(swigCPtr, SWIGTYPE_p_Matrix.getCPtr(value));
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Matrix ret = new SWIGTYPE_p_Matrix(CorePINVOKE.Transform_worldMatrix_get(swigCPtr), true);
      if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Transform() : this(CorePINVOKE.new_Transform(), true) {
  }

}

}
