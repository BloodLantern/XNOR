#version 430 core
layout (local_size_x = 10, local_size_y = 10, local_size_z = 1) in;

// This shader performs upsampling on a texture,
// as taken from Call Of Duty method, presented at ACM Siggraph 2014.

// Remember to add bilinear minification filter for this texture!
// Remember to use a floating-point texture format (for HDR)!
// Remember to use edge clamping for this texture!

layout(r11f_g11f_b10f, binding = 0) uniform image2D currentMip;
layout(r11f_g11f_b10f, binding = 1) uniform image2D nextMip;

layout (location = 0) uniform float filterRadius;


void main()
{
	// The filter kernel is applied with a radius, specified in texture
	// coordinates, so that the radius will vary across mip resolutions.
	float x = filterRadius;
	float y = filterRadius;

	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 texCoordNextMip = ivec2(gl_GlobalInvocationID.xy);

	vec3 value = vec3(0,0,0);

	// Take 9 samples around current texel:
	// a - b - c
	// d - e - f
	// g - h - i
	// === ('e' is the current texel) ===
	vec3 a = imageLoad(currentMip, texCoord + ivec2(-x, y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(-x, y)).rgb;
	vec3 b = imageLoad(currentMip, texCoord + ivec2(0, y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(0, y)).rgb;
	vec3 c = imageLoad(currentMip, texCoord + ivec2(x, y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(x, y)).rgb;

	vec3 d = imageLoad(currentMip, texCoord + ivec2(-x, 0)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(-x, 0)).rgb;
	vec3 e = imageLoad(currentMip, texCoord).rgb + imageLoad(nextMip, texCoordNextMip).rgb;
	vec3 f = imageLoad(currentMip, texCoord + ivec2(x, 0)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(x, 0)).rgb;

	vec3 g = imageLoad(currentMip, texCoord + ivec2(-x, -y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(-x, -y)).rgb;
	vec3 h = imageLoad(currentMip, texCoord + ivec2(0, -y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(0, -y)).rgb;
	vec3 i = imageLoad(currentMip, texCoord + ivec2(x, -y)).rgb + imageLoad(nextMip, texCoordNextMip + ivec2(x, -y)).rgb;

	// Apply weighted distribution, by using a 3x3 tent filter:
	//  1   | 1 2 1 |
	// -- * | 2 4 2 |
	// 16   | 1 2 1 |
	value = e * 4.0;
	value += (b + d + f + h) * 2.0;
	value += (a + c + g + i);
	value *= 1.0 / 16.0;

	imageStore(nextMip, texCoord, vec4(value, 1.0));

}
