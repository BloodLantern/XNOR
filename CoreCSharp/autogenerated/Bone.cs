//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Bone : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Bone(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Bone obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Bone() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Bone(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Bone() : this(CoreCNative.new_Bone(), true) {
  }

  public void Create( Matrix  localMatrix,  Matrix  offsetMatrix) {
    CoreCNative.Bone_Create(swigCPtr,  ref localMatrix ,  ref offsetMatrix );
  }

  public string name {
    set {
      CoreCNative.Bone_name_set(swigCPtr, value);
      if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CoreCNative.Bone_name_get(swigCPtr);
      if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int id {
    set {
      CoreCNative.Bone_id_set(swigCPtr, value);
    } 
    get {
      int ret = CoreCNative.Bone_id_get(swigCPtr);
      return ret;
    } 
  }

  public Vector3 position {
    set {
      CoreCNative.Bone_position_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bone_position_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Quaternion rotation {
    set {
      CoreCNative.Bone_rotation_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bone_rotation_get(swigCPtr);
			Quaternion ret = (Quaternion) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Quaternion));
			return ret;
		}
	
  }

  public Matrix local {
    set {
      CoreCNative.Bone_local_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bone_local_get(swigCPtr);
			Matrix ret = (Matrix) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Matrix));
			return ret;
		}
	
  }

  public Matrix global {
    set {
      CoreCNative.Bone_global_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bone_global_get(swigCPtr);
			Matrix ret = (Matrix) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Matrix));
			return ret;
		}
	
  }

  public Matrix globalInverse {
    set {
      CoreCNative.Bone_globalInverse_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bone_globalInverse_get(swigCPtr);
			Matrix ret = (Matrix) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Matrix));
			return ret;
		}
	
  }

  public int parentId {
    set {
      CoreCNative.Bone_parentId_set(swigCPtr, value);
    } 
    get {
      int ret = CoreCNative.Bone_parentId_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__ListT_int_t children {
    set {
      CoreCNative.Bone_children_set(swigCPtr, SWIGTYPE_p_XnorCore__ListT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Bone_children_get(swigCPtr);
      SWIGTYPE_p_XnorCore__ListT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__ListT_int_t(cPtr, false);
      return ret;
    } 
  }

}

}
