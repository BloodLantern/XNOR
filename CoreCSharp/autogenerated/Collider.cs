//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Collider : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Collider(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.Collider_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Collider obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Collider obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Collider(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Collider() : this(CoreCNative.new_Collider(), true) {
  }

  protected override void Begin() {
    CoreCNative.Collider_Begin(swigCPtr);
  }

  protected override void Update() {
    CoreCNative.Collider_Update(swigCPtr);
  }

  public override void PrePhysics() {
    CoreCNative.Collider_PrePhysics(swigCPtr);
  }

  public override void PostPhysics() {
    CoreCNative.Collider_PostPhysics(swigCPtr);
  }

  public bool IsTrigger() {
    bool ret = CoreCNative.Collider_IsTrigger(swigCPtr);
    return ret;
  }

  public void AddForce( Vector3  force) {
    CoreCNative.Collider_AddForce(swigCPtr,  ref force );
  }

  public void AddImpulse( Vector3  impulse) {
    CoreCNative.Collider_AddImpulse(swigCPtr,  ref impulse );
  }

  public CollisionEvent onTriggerEnter {
    set {
      CoreCNative.Collider_onTriggerEnter_set(swigCPtr, CollisionEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onTriggerEnter_get(swigCPtr);
      CollisionEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionEvent(cPtr, false);
      return ret;
    } 
  }

  public CollisionEvent onTriggerStay {
    set {
      CoreCNative.Collider_onTriggerStay_set(swigCPtr, CollisionEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onTriggerStay_get(swigCPtr);
      CollisionEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionEvent(cPtr, false);
      return ret;
    } 
  }

  public CollisionExitEvent onTriggerExit {
    set {
      CoreCNative.Collider_onTriggerExit_set(swigCPtr, CollisionExitEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onTriggerExit_get(swigCPtr);
      CollisionExitEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionExitEvent(cPtr, false);
      return ret;
    } 
  }

  public CollisionEvent onCollisionEnter {
    set {
      CoreCNative.Collider_onCollisionEnter_set(swigCPtr, CollisionEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onCollisionEnter_get(swigCPtr);
      CollisionEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionEvent(cPtr, false);
      return ret;
    } 
  }

  public CollisionEvent onCollisionStay {
    set {
      CoreCNative.Collider_onCollisionStay_set(swigCPtr, CollisionEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onCollisionStay_get(swigCPtr);
      CollisionEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionEvent(cPtr, false);
      return ret;
    } 
  }

  public CollisionExitEvent onCollisionExit {
    set {
      CoreCNative.Collider_onCollisionExit_set(swigCPtr, CollisionExitEvent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Collider_onCollisionExit_get(swigCPtr);
      CollisionExitEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new CollisionExitEvent(cPtr, false);
      return ret;
    } 
  }

  public Collider.ColliderConstraints constraints {
    set {
      CoreCNative.Collider_constraints_set(swigCPtr, (int)value);
    } 
    get {
      Collider.ColliderConstraints ret = (Collider.ColliderConstraints)CoreCNative.Collider_constraints_get(swigCPtr);
      return ret;
    } 
  }

  public enum ColliderConstraints : uint {
    ConstraintNone = 0 << 0,
    ConstraintPosition = 1 << 0,
    ConstraintRotation = 1 << 1
  }

}

}
