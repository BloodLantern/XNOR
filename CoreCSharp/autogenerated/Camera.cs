//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Camera : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Camera(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Camera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Camera obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Camera() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Camera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Vector3 position {
    set {
      CoreCNative.Camera_position_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_position_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Vector3 front {
    set {
      CoreCNative.Camera_front_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_front_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Vector3 up {
    set {
      CoreCNative.Camera_up_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_up_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Vector3 right {
    set {
      CoreCNative.Camera_right_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_right_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public float near {
    set {
      CoreCNative.Camera_near_set(swigCPtr, value);
    } 
    get {
      float ret = CoreCNative.Camera_near_get(swigCPtr);
      return ret;
    } 
  }

  public float far {
    set {
      CoreCNative.Camera_far_set(swigCPtr, value);
    } 
    get {
      float ret = CoreCNative.Camera_far_get(swigCPtr);
      return ret;
    } 
  }

  public float fov {
    set {
      CoreCNative.Camera_fov_set(swigCPtr, value);
    } 
    get {
      float ret = CoreCNative.Camera_fov_get(swigCPtr);
      return ret;
    } 
  }

  public Vector2 leftRight {
    set {
      CoreCNative.Camera_leftRight_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_leftRight_get(swigCPtr);
			Vector2 ret = (Vector2) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector2));
			return ret;
		}
	
  }

  public Vector2 bottomtop {
    set {
      CoreCNative.Camera_bottomtop_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Camera_bottomtop_get(swigCPtr);
			Vector2 ret = (Vector2) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector2));
			return ret;
		}
	
  }

  public bool isOrthographic {
    set {
      CoreCNative.Camera_isOrthographic_set(swigCPtr, value);
    } 
    get {
      bool ret = CoreCNative.Camera_isOrthographic_get(swigCPtr);
      return ret;
    } 
  }

  public void GetProjection( Vector2i  screenSize,  ref Matrix  matrix) {
    CoreCNative.Camera_GetProjection(swigCPtr,  screenSize ,  ref matrix );
  }

  public void GetView( ref Matrix  matrix) {
    CoreCNative.Camera_GetView(swigCPtr,  ref matrix );
  }

  public void GetVp( Vector2i  screenSize,  ref Matrix  matrix) {
    CoreCNative.Camera_GetVp(swigCPtr,  screenSize ,  ref matrix );
  }

  public void LookAt( Vector3  at) {
    CoreCNative.Camera_LookAt(swigCPtr,  ref at );
  }

  public  Vector2i  ProjectOn( Vector3  vertex,  Vector2i  screenSize,  Matrix  model) {
			Vector2i ret = CoreCNative.Camera_ProjectOn(swigCPtr,  ref vertex ,  screenSize ,  ref model );
			return ret;
		}

  public Camera() : this(CoreCNative.new_Camera(), true) {
  }

}

}
