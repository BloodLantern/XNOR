//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Transform : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Transform(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Transform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Transform obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Transform() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Transform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public Vector3 Position { get => GetPosition(); set => SetPosition(value); }

    public float PositionX { get => Position.X; set => SetPositionX(value); }

    public float PositionY { get => Position.Y; set => SetPositionY(value); }

    public float PositionZ { get => Position.Z; set => SetPositionZ(value); }
    
    public Quaternion Rotation { get => GetRotation(); set => SetRotation(value); }

    public float RotationX { get => Rotation.X; set => SetRotationX(value); }

    public float RotationY { get => Rotation.Y; set => SetRotationY(value); }

    public float RotationZ { get => Rotation.Z; set => SetRotationZ(value); }

    public float RotationW { get => Rotation.W; set => SetRotationW(value); }
    
    public Vector3 RotationEulerAngle { get => GetRotationEulerAngle(); set => SetRotationEulerAngle(value); }

    public float RotationEulerAngleX { get => RotationEulerAngle.X; set => SetRotationEulerAngleX(value); }

    public float RotationEulerAngleY { get => RotationEulerAngle.Y; set => SetRotationEulerAngleY(value); }

    public float RotationEulerAngleZ { get => RotationEulerAngle.Z; set => SetRotationEulerAngleZ(value); }
    
    public Vector3 Scale { get => GetScale(); set => SetScale(value); }

    public float ScaleX { get => Scale.X; set => SetScaleX(value); }

    public float ScaleY { get => Scale.Y; set => SetScaleY(value); }

    public float ScaleZ { get => Scale.Z; set => SetScaleZ(value); }

    public bool Changed => GetChanged();

    public Vector3 Forward => GetForward();

    public Vector3 Right => GetRight();

    public Vector3 Up => GetUp();

    public override string ToString() => $"Position: {{{Position}}}, Rotation: {{{Rotation}}}, Scale: {{{Scale}}}";

  public Matrix WorldMatrix {
    set {
      CoreCNative.Transform_WorldMatrix_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Transform_WorldMatrix_get(swigCPtr);
			Matrix ret = (Matrix) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Matrix));
			return ret;
		}
	
  }

  private  Vector3  GetPosition() {
		nint ptr = CoreCNative.Transform_GetPosition(swigCPtr);
		Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
		return ret;
	}

  private void SetPosition( Vector3  newPosition) {
    CoreCNative.Transform_SetPosition(swigCPtr,  ref newPosition );
  }

  private void SetPositionX(float newPositionX) {
    CoreCNative.Transform_SetPositionX(swigCPtr, newPositionX);
  }

  private void SetPositionY(float newPositionY) {
    CoreCNative.Transform_SetPositionY(swigCPtr, newPositionY);
  }

  private void SetPositionZ(float newPositionZ) {
    CoreCNative.Transform_SetPositionZ(swigCPtr, newPositionZ);
  }

  private  Vector3  GetRotationEulerAngle() {
		nint ptr = CoreCNative.Transform_GetRotationEulerAngle(swigCPtr);
		Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
		return ret;
	}

  private void SetRotationEulerAngle( Vector3  newRotationEulerAngle) {
    CoreCNative.Transform_SetRotationEulerAngle(swigCPtr,  ref newRotationEulerAngle );
  }

  private void SetRotationEulerAngleX(float newRotationEulerAngleX) {
    CoreCNative.Transform_SetRotationEulerAngleX(swigCPtr, newRotationEulerAngleX);
  }

  private void SetRotationEulerAngleY(float newRotationEulerAngleY) {
    CoreCNative.Transform_SetRotationEulerAngleY(swigCPtr, newRotationEulerAngleY);
  }

  private void SetRotationEulerAngleZ(float newRotationEulerAngleZ) {
    CoreCNative.Transform_SetRotationEulerAngleZ(swigCPtr, newRotationEulerAngleZ);
  }

  private  Quaternion  GetRotation() {
		nint ptr = CoreCNative.Transform_GetRotation(swigCPtr);
		Quaternion ret = (Quaternion) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Quaternion));
		return ret;
	}

  private void SetRotation( Quaternion  newRotation) {
    CoreCNative.Transform_SetRotation(swigCPtr,  ref newRotation );
  }

  private void SetRotationX(float newRotationX) {
    CoreCNative.Transform_SetRotationX(swigCPtr, newRotationX);
  }

  private void SetRotationY(float newRotationY) {
    CoreCNative.Transform_SetRotationY(swigCPtr, newRotationY);
  }

  private void SetRotationZ(float newRotationZ) {
    CoreCNative.Transform_SetRotationZ(swigCPtr, newRotationZ);
  }

  private void SetRotationW(float newRotationW) {
    CoreCNative.Transform_SetRotationW(swigCPtr, newRotationW);
  }

  private  Vector3  GetScale() {
		nint ptr = CoreCNative.Transform_GetScale(swigCPtr);
		Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
		return ret;
	}

  private void SetScale( Vector3  newScale) {
    CoreCNative.Transform_SetScale(swigCPtr,  ref newScale );
  }

  private void SetScaleX(float newScaleX) {
    CoreCNative.Transform_SetScaleX(swigCPtr, newScaleX);
  }

  private void SetScaleY(float newScaleY) {
    CoreCNative.Transform_SetScaleY(swigCPtr, newScaleY);
  }

  private void SetScaleZ(float newScaleZ) {
    CoreCNative.Transform_SetScaleZ(swigCPtr, newScaleZ);
  }

  private bool GetChanged() {
    bool ret = CoreCNative.Transform_GetChanged(swigCPtr);
    return ret;
  }

  private  Vector3  GetRight() {
			Vector3 ret = CoreCNative.Transform_GetRight(swigCPtr);
			return ret;
		}

  private  Vector3  GetUp() {
			Vector3 ret = CoreCNative.Transform_GetUp(swigCPtr);
			return ret;
		}

  private  Vector3  GetForward() {
			Vector3 ret = CoreCNative.Transform_GetForward(swigCPtr);
			return ret;
		}

  public Transform() : this(CoreCNative.new_Transform(), true) {
  }

}

}
