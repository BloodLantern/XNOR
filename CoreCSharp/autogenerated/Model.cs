//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Model : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Model(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.Model_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Model obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Model() : this(CoreCNative.new_Model__SWIG_0(), true) {
  }

  public Model(string name) : this(CoreCNative.new_Model__SWIG_1(name), true) {
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CoreCNative.Model_Load__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public override bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CoreCNative.Model_Load__SWIG_1(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiMesh loadedData) {
    bool ret = CoreCNative.Model_Load__SWIG_2(swigCPtr, SWIGTYPE_p_aiMesh.getCPtr(loadedData));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void CreateInInterface() {
    CoreCNative.Model_CreateInInterface(swigCPtr);
  }

  public override void DestroyInInterface() {
    CoreCNative.Model_DestroyInInterface(swigCPtr);
  }

  public override void Unload() {
    CoreCNative.Model_Unload(swigCPtr);
  }

  public override bool Save() {
    bool ret = CoreCNative.Model_Save(swigCPtr);
    return ret;
  }

  public uint GetId() {
    uint ret = CoreCNative.Model_GetId(swigCPtr);
    return ret;
  }

  public Bound GetAabb() {
    Bound ret = new Bound(CoreCNative.Model_GetAabb(swigCPtr), true);
    return ret;
  }

}

}
