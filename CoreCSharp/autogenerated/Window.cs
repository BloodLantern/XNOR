//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Window : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Window(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Window obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Window obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Window() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static bool resizeFrameBuffer {
    set {
      CoreCNative.Window_resizeFrameBuffer_set(value);
    } 
    get {
      bool ret = CoreCNative.Window_resizeFrameBuffer_get();
      return ret;
    } 
  }

  public static void Initialize() {
    CoreCNative.Window_Initialize();
  }

  public static void Shutdown() {
    CoreCNative.Window_Shutdown();
  }

  public static  Vector2i  GetSize() {
			Vector2i ret = CoreCNative.Window_GetSize();
			return ret;
		}

  public static bool ShouldClose() {
    bool ret = CoreCNative.Window_ShouldClose();
    return ret;
  }

  public static void PollEvents() {
    CoreCNative.Window_PollEvents();
  }

  public static void MakeContextCurrent() {
    CoreCNative.Window_MakeContextCurrent();
  }

  public static SWIGTYPE_p_GLFWwindow GetHandle() {
    global::System.IntPtr cPtr = CoreCNative.Window_GetHandle();
    SWIGTYPE_p_GLFWwindow ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GLFWwindow(cPtr, false);
    return ret;
  }

  public static void Show() {
    CoreCNative.Window_Show();
  }

  public static void SetIcon(Texture icon) {
    CoreCNative.Window_SetIcon(Texture.getCPtr(icon));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public static void SetCursorHidden(bool value) {
    CoreCNative.Window_SetCursorHidden(value);
  }

  public static void SetCursorPosition( Vector2  newPosition) {
    CoreCNative.Window_SetCursorPosition( newPosition );
  }

  public static void MessageBox(string title, string text, MessageBoxOptions flags) {
    CoreCNative.Window_MessageBox(title, text, (int)flags);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

}

}
