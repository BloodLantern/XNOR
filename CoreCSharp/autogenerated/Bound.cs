//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Bound : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Bound(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Bound obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Bound obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Bound() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Bound(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Bound GetAabbFromTransform(Bound bound, Transform transform) {
    Bound ret = new Bound(CoreCNative.Bound_GetAabbFromTransform(Bound.getCPtr(bound), Transform.getCPtr(transform)), true);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector3 extents {
    set {
      CoreCNative.Bound_extents_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bound_extents_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Vector3 center {
    set {
      CoreCNative.Bound_center_set(swigCPtr,  ref value );
    } 
		get { 
			nint ptr = CoreCNative.Bound_center_get(swigCPtr);
			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
			return ret;
		}
	
  }

  public Bound( Vector3  newCenter,  Vector3  newSize) : this(CoreCNative.new_Bound__SWIG_0( newCenter ,  newSize ), true) {
  }

  public Bound() : this(CoreCNative.new_Bound__SWIG_1(), true) {
  }

  public bool OperatorEq(Bound other) {
    bool ret = CoreCNative.Bound_OperatorEq(swigCPtr, Bound.getCPtr(other));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public  Vector3  GetMin() {
			Vector3 ret = CoreCNative.Bound_GetMin(swigCPtr);
			return ret;
		}

  public  Vector3  GetMax() {
			Vector3 ret = CoreCNative.Bound_GetMax(swigCPtr);
			return ret;
		}

  public  Vector3  GetSize() {
			Vector3 ret = CoreCNative.Bound_GetSize(swigCPtr);
			return ret;
		}

  public void SetMinMax( Vector3  newmin,  Vector3  newMax) {
    CoreCNative.Bound_SetMinMax(swigCPtr,  newmin ,  newMax );
  }

  public bool Intersect(Bound otherBound) {
    bool ret = CoreCNative.Bound_Intersect(swigCPtr, Bound.getCPtr(otherBound));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Countain(Bound otherBound) {
    bool ret = CoreCNative.Bound_Countain(swigCPtr, Bound.getCPtr(otherBound));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsOnPlane(Plane plane) {
    bool ret = CoreCNative.Bound_IsOnPlane(swigCPtr, Plane.getCPtr(plane));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Encapsulate(Bound encapsulateBound) {
    CoreCNative.Bound_Encapsulate__SWIG_0(swigCPtr, Bound.getCPtr(encapsulateBound));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public void Encapsulate( Vector3  point) {
    CoreCNative.Bound_Encapsulate__SWIG_1(swigCPtr,  point );
  }

}

}
