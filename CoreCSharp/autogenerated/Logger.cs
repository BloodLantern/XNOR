//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Logger {
    public static void Log(Logger.LogLevel level, string format, params object[] args)
        => LogString(level, string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

    public static void LogTempDebug(string message, [global::System.Runtime.CompilerServices.CallerFilePath] string file = "", [global::System.Runtime.CompilerServices.CallerLineNumber] int line = 0)
        => LogTempDebugString(message, file, line);

    public static void LogDebug(string format, params object[] args)
        => LogDebugString(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

    public static void LogInfo(string format, params object[] args)
        => LogInfoString(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

    public static void LogWarning(string format, params object[] args)
        => LogWarningString(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

    public static void LogError(string format, params object[] args)
        => LogErrorString(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

    public static void LogFatal(string format, params object[] args)
        => LogFatalString(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));

  public static Logger.LogLevel minimumConsoleLevel {
    set {
      CoreCNative.Logger_minimumConsoleLevel_set((int)value);
    } 
    get {
      Logger.LogLevel ret = (Logger.LogLevel)CoreCNative.Logger_minimumConsoleLevel_get();
      return ret;
    } 
  }

  public static Logger.LogLevel minimumFileLevel {
    set {
      CoreCNative.Logger_minimumFileLevel_set((int)value);
    } 
    get {
      Logger.LogLevel ret = (Logger.LogLevel)CoreCNative.Logger_minimumFileLevel_get();
      return ret;
    } 
  }

  public static void OpenFile(SWIGTYPE_p_std__filesystem__path filepath) {
    CoreCNative.Logger_OpenFile(SWIGTYPE_p_std__filesystem__path.getCPtr(filepath));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public static void OpenDefaultFile() {
    CoreCNative.Logger_OpenDefaultFile();
  }

  public static bool HasFileOpen() {
    bool ret = CoreCNative.Logger_HasFileOpen();
    return ret;
  }

  public static void CloseFile() {
    CoreCNative.Logger_CloseFile();
  }

  public static void Synchronize() {
    CoreCNative.Logger_Synchronize();
  }

  private static void LogString(Logger.LogLevel level, string format) {
    CoreCNative.Logger_LogString((int)level, format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogTempDebugString(string format, string file, int line) {
    CoreCNative.Logger_LogTempDebugString(format, file, line);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogDebugString(string format) {
    CoreCNative.Logger_LogDebugString(format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogInfoString(string format) {
    CoreCNative.Logger_LogInfoString(format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogWarningString(string format) {
    CoreCNative.Logger_LogWarningString(format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogErrorString(string format) {
    CoreCNative.Logger_LogErrorString(format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  private static void LogFatalString(string format) {
    CoreCNative.Logger_LogFatalString(format);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public enum LogLevel {
    TemporaryDebug,
    Debug,
    Info,
    Warning,
    Error,
    Fatal
  }

}

}
