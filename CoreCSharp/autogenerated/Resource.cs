//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Resource : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Resource(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Resource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Resource obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Resource() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Resource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool Load(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CoreCNative.Resource_Load__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public virtual bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CoreCNative.Resource_Load__SWIG_1(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CreateInInterface() {
    CoreCNative.Resource_CreateInInterface(swigCPtr);
  }

  public virtual void DestroyInInterface() {
    CoreCNative.Resource_DestroyInInterface(swigCPtr);
  }

  public virtual void Unload() {
    CoreCNative.Resource_Unload(swigCPtr);
  }

  public virtual bool Reload(SWIGTYPE_p_unsigned_char buffer, long length, bool reloadInInterface) {
    bool ret = CoreCNative.Resource_Reload__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length, reloadInInterface);
    return ret;
  }

  public virtual bool Reload(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CoreCNative.Resource_Reload__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public virtual bool Reload(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file, bool reloadInInterface) {
    bool ret = CoreCNative.Resource_Reload__SWIG_2(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file), reloadInInterface);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Reload(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CoreCNative.Resource_Reload__SWIG_3(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Reload(bool reloadInInterface) {
    bool ret = CoreCNative.Resource_Reload__SWIG_4(swigCPtr, reloadInInterface);
    return ret;
  }

  public virtual bool Reload() {
    bool ret = CoreCNative.Resource_Reload__SWIG_5(swigCPtr);
    return ret;
  }

  public virtual bool Save() {
    bool ret = CoreCNative.Resource_Save(swigCPtr);
    return ret;
  }

  public bool IsLoaded() {
    bool ret = CoreCNative.Resource_IsLoaded(swigCPtr);
    return ret;
  }

  public bool IsLoadedInInterface() {
    bool ret = CoreCNative.Resource_IsLoadedInInterface(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = CoreCNative.Resource_GetName(swigCPtr);
    return ret;
  }

  public void SetName(string newName) {
    CoreCNative.Resource_SetName(swigCPtr, newName);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public void SetGuid(Guid guid) {
    CoreCNative.Resource_SetGuid(swigCPtr, Guid.getCPtr(guid));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public Guid GetGuid() {
    Guid ret = new Guid(CoreCNative.Resource_GetGuid(swigCPtr), false);
    return ret;
  }

}

}
