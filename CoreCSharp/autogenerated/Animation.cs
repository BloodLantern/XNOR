//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Animation : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Animation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.Animation_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Animation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Animation obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Animation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class KeyFrame : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal KeyFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(KeyFrame obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(KeyFrame obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~KeyFrame() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            CoreCNative.delete_Animation_KeyFrame(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Vector3 translation {
      set {
        CoreCNative.Animation_KeyFrame_translation_set(swigCPtr,  ref value );
      } 
  		get { 
  			nint ptr = CoreCNative.Animation_KeyFrame_translation_get(swigCPtr);
  			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
  			return ret;
  		}
  	
    }
  
    public Quaternion rotation {
      set {
        CoreCNative.Animation_KeyFrame_rotation_set(swigCPtr,  ref value );
      } 
  		get { 
  			nint ptr = CoreCNative.Animation_KeyFrame_rotation_get(swigCPtr);
  			Quaternion ret = (Quaternion) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Quaternion));
  			return ret;
  		}
  	
    }
  
    public Vector3 scaling {
      set {
        CoreCNative.Animation_KeyFrame_scaling_set(swigCPtr,  ref value );
      } 
  		get { 
  			nint ptr = CoreCNative.Animation_KeyFrame_scaling_get(swigCPtr);
  			Vector3 ret = (Vector3) global::System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, typeof(Vector3));
  			return ret;
  		}
  	
    }
  
    public float time {
      set {
        CoreCNative.Animation_KeyFrame_time_set(swigCPtr, value);
      } 
      get {
        float ret = CoreCNative.Animation_KeyFrame_time_get(swigCPtr);
        return ret;
      } 
    }
  
    public KeyFrame() : this(CoreCNative.new_Animation_KeyFrame(), true) {
    }
  
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t skeleton {
    set {
      CoreCNative.Animation_skeleton_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Animation_skeleton_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_0_t FileExtensions {
    get {
      global::System.IntPtr cPtr = CoreCNative.Animation_FileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_0_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_0_t(cPtr, false);
      return ret;
    } 
  }

  public Animation(string name) : this(CoreCNative.new_Animation__SWIG_0(name), true) {
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CoreCNative.Animation_Load__SWIG_0(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public Animation() : this(CoreCNative.new_Animation__SWIG_1(), true) {
  }

  public void BindSkeleton(SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t bindedSkeleton) {
    CoreCNative.Animation_BindSkeleton(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Skeleton_t.getCPtr(bindedSkeleton));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CoreCNative.Animation_Load__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiAnimation loadedData) {
    bool ret = CoreCNative.Animation_Load__SWIG_2(swigCPtr, SWIGTYPE_p_aiAnimation.getCPtr(loadedData));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetDuration() {
    float ret = CoreCNative.Animation_GetDuration(swigCPtr);
    return ret;
  }

  public uint GetFrameCount() {
    uint ret = CoreCNative.Animation_GetFrameCount(swigCPtr);
    return ret;
  }

  public float GetFramerate() {
    float ret = CoreCNative.Animation_GetFramerate(swigCPtr);
    return ret;
  }

  public float GetFrameDuration() {
    float ret = CoreCNative.Animation_GetFrameDuration(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_XnorCore__ListT_XnorCore__Animation__KeyFrame_t GetBoneKeyFrame(Bone bone) {
    SWIGTYPE_p_XnorCore__ListT_XnorCore__Animation__KeyFrame_t ret = new SWIGTYPE_p_XnorCore__ListT_XnorCore__Animation__KeyFrame_t(CoreCNative.Animation_GetBoneKeyFrame(swigCPtr, Bone.getCPtr(bone)), false);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
