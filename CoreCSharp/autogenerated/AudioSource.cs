//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class AudioSource : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AudioSource(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.AudioSource_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioSource obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AudioSource obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_AudioSource(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__AudioTrack_t audioTrack {
    set {
      CoreCNative.AudioSource_audioTrack_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__AudioTrack_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.AudioSource_audioTrack_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__AudioTrack_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__AudioTrack_t(cPtr, false);
      return ret;
    } 
  }

  public AudioSource() : this(CoreCNative.new_AudioSource(), true) {
  }

  protected override void Begin() {
    CoreCNative.AudioSource_Begin(swigCPtr);
  }

  protected override void Update() {
    CoreCNative.AudioSource_Update(swigCPtr);
  }

  public void Play() {
    CoreCNative.AudioSource_Play__SWIG_0(swigCPtr);
  }

  public void Play(AudioTrack track) {
    CoreCNative.AudioSource_Play__SWIG_1(swigCPtr, AudioTrack.getCPtr(track));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public void SetBuffer(AudioBuffer buffer) {
    CoreCNative.AudioSource_SetBuffer(swigCPtr, AudioBuffer.getCPtr(buffer));
  }

  public float GetVolume() {
    float ret = CoreCNative.AudioSource_GetVolume(swigCPtr);
    return ret;
  }

  public void SetVolume(float newVolume) {
    CoreCNative.AudioSource_SetVolume(swigCPtr, newVolume);
  }

  public float GetPitch() {
    float ret = CoreCNative.AudioSource_GetPitch(swigCPtr);
    return ret;
  }

  public void SetPitch(float newPitch) {
    CoreCNative.AudioSource_SetPitch(swigCPtr, newPitch);
  }

  public bool GetLooping() {
    bool ret = CoreCNative.AudioSource_GetLooping(swigCPtr);
    return ret;
  }

  public void SetLooping(bool newLooping) {
    CoreCNative.AudioSource_SetLooping(swigCPtr, newLooping);
  }

}

}
