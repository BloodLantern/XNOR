//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Skeleton : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Skeleton(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.Skeleton_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Skeleton obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Skeleton obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Skeleton(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_3_t FileExtensions {
    get {
      global::System.IntPtr cPtr = CoreCNative.Skeleton_FileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_3_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_3_t(cPtr, false);
      return ret;
    } 
  }

  public Skeleton() : this(CoreCNative.new_Skeleton__SWIG_0(), true) {
  }

  public Skeleton(string name) : this(CoreCNative.new_Skeleton__SWIG_1(name), true) {
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CoreCNative.Skeleton_Load__SWIG_0(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Load(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CoreCNative.Skeleton_Load__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiSkeleton loadedData) {
    bool ret = CoreCNative.Skeleton_Load__SWIG_2(swigCPtr, SWIGTYPE_p_aiSkeleton.getCPtr(loadedData));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiMesh loadedData, SWIGTYPE_p_aiNode rootNode) {
    bool ret = CoreCNative.Skeleton_Load__SWIG_3(swigCPtr, SWIGTYPE_p_aiMesh.getCPtr(loadedData), SWIGTYPE_p_aiNode.getCPtr(rootNode));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiScene scene, SWIGTYPE_p_aiAnimation loadedData) {
    bool ret = CoreCNative.Skeleton_Load__SWIG_4(swigCPtr, SWIGTYPE_p_aiScene.getCPtr(scene), SWIGTYPE_p_aiAnimation.getCPtr(loadedData));
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ReorderBones() {
    CoreCNative.Skeleton_ReorderBones(swigCPtr);
  }

  public SWIGTYPE_p_XnorCore__ListT_XnorCore__Bone_t GetBones() {
    SWIGTYPE_p_XnorCore__ListT_XnorCore__Bone_t ret = new SWIGTYPE_p_XnorCore__ListT_XnorCore__Bone_t(CoreCNative.Skeleton_GetBones(swigCPtr), false);
    return ret;
  }

  public Mesh mesh {
    set {
      CoreCNative.Skeleton_mesh_set(swigCPtr, Mesh.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Skeleton_mesh_get(swigCPtr);
      Mesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mesh(cPtr, false);
      return ret;
    } 
  }

}

}
