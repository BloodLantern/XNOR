//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Scene : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Scene(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Scene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Scene obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Scene() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Scene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    

  public Skybox skybox {
    set {
      CoreCNative.Scene_skybox_set(swigCPtr, Skybox.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CoreCNative.Scene_skybox_get(swigCPtr);
      Skybox ret = (cPtr == global::System.IntPtr.Zero) ? null : new Skybox(cPtr, false);
      return ret;
    } 
  }

  public Scene() : this(CoreCNative.new_Scene(), true) {
  }

  public void Initialize() {
    CoreCNative.Scene_Initialize(swigCPtr);
  }

  public void Begin() {
    CoreCNative.Scene_Begin(swigCPtr);
  }

  public void Update() {
    CoreCNative.Scene_Update(swigCPtr);
  }

  public void PrePhysics() {
    CoreCNative.Scene_PrePhysics(swigCPtr);
  }

  public void PostPhysics() {
    CoreCNative.Scene_PostPhysics(swigCPtr);
  }

  public void OnRendering() {
    CoreCNative.Scene_OnRendering(swigCPtr);
  }

  public Entity FindEntityById(Guid xnorGuid) {
    global::System.IntPtr cPtr = CoreCNative.Scene_FindEntityById(swigCPtr, Guid.getCPtr(xnorGuid));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity FindEntityByName(string name) {
    global::System.IntPtr cPtr = CoreCNative.Scene_FindEntityByName(swigCPtr, name);
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity CreateEntity(SWIGTYPE_p_std__string name, Entity parent) {
    global::System.IntPtr cPtr = CoreCNative.Scene_CreateEntity__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.swigRelease(name), Entity.getCPtr(parent));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity CreateEntity(SWIGTYPE_p_std__string name) {
    global::System.IntPtr cPtr = CoreCNative.Scene_CreateEntity__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.swigRelease(name));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DestroyEntity(Entity entity) {
    CoreCNative.Scene_DestroyEntity(swigCPtr, Entity.getCPtr(entity));
  }

  public bool HasEntity(Entity entity) {
    bool ret = CoreCNative.Scene_HasEntity(swigCPtr, Entity.getCPtr(entity));
    return ret;
  }

  public SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t GetEntities() {
    SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t ret = new SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t(CoreCNative.Scene_GetEntities(swigCPtr), false);
    return ret;
  }

  public uint GetEntityIndex(Entity entity) {
    uint ret = CoreCNative.Scene_GetEntityIndex(swigCPtr, Entity.getCPtr(entity));
    return ret;
  }

}

}
