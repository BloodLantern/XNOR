//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Cubemap : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Cubemap(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CoreCNative.Cubemap_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Cubemap obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Cubemap obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CoreCNative.delete_Cubemap(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public Cubemap(SWIGTYPE_p_std__arrayT_std__string_6_t cubeMapsTextures) : this(CoreCNative.new_Cubemap__SWIG_0(SWIGTYPE_p_std__arrayT_std__string_6_t.getCPtr(cubeMapsTextures)), true) {
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public Cubemap(TextureCreateInfo textureCreateInfo) : this(CoreCNative.new_Cubemap__SWIG_1(TextureCreateInfo.getCPtr(textureCreateInfo)), true) {
    if (CoreCNative.SWIGPendingException.Pending) throw CoreCNative.SWIGPendingException.Retrieve();
  }

  public override void CreateInRhi() {
    CoreCNative.Cubemap_CreateInRhi(swigCPtr);
  }

  public override void DestroyInRhi() {
    CoreCNative.Cubemap_DestroyInRhi(swigCPtr);
  }

  public override void Unload() {
    CoreCNative.Cubemap_Unload(swigCPtr);
  }

  public void BindTexture(uint unit) {
    CoreCNative.Cubemap_BindTexture(swigCPtr, unit);
  }

  public void UnBindTexture(uint unit) {
    CoreCNative.Cubemap_UnBindTexture(swigCPtr, unit);
  }

  public uint GetId() {
    uint ret = CoreCNative.Cubemap_GetId(swigCPtr);
    return ret;
  }

  public  Vector2i  GetSize() {
			Vector2i ret = CoreCNative.Cubemap_GetSize(swigCPtr);
			return ret;
		}

}

}
