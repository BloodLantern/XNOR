//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class File : Entry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal File(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.File_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(File obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(File obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_File(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public File(SWIGTYPE_p_std__filesystem__path filepath) : this(CorePINVOKE.new_File(SWIGTYPE_p_std__filesystem__path.swigRelease(filepath)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Load() {
    bool ret = CorePINVOKE.File_Load(swigCPtr);
    return ret;
  }

  public override void Unload() {
    CorePINVOKE.File_Unload(swigCPtr);
  }

  public override void OpenInExplorer() {
    CorePINVOKE.File_OpenInExplorer(swigCPtr);
  }

  public void OpenFile() {
    CorePINVOKE.File_OpenFile(swigCPtr);
  }

  public File.Type GetFileType() {
    File.Type ret = (File.Type)CorePINVOKE.File_GetFileType(swigCPtr);
    return ret;
  }

  public string GetNameNoExtension() {
    string ret = CorePINVOKE.File_GetNameNoExtension(swigCPtr);
    return ret;
  }

  public string GetExtension() {
    string ret = CorePINVOKE.File_GetExtension(swigCPtr);
    return ret;
  }

  public long GetSize() {
    long ret = CorePINVOKE.File_GetSize(swigCPtr);
    return ret;
  }

  public override void SetName(string newName) {
    CorePINVOKE.File_SetName(swigCPtr, newName);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Resource_t GetResource() {
    SWIGTYPE_p_XnorCore__PointerT_XnorCore__Resource_t ret = new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Resource_t(CorePINVOKE.File_GetResource(swigCPtr), true);
    return ret;
  }

  public enum Type {
    Unknown,
    Texture,
    Model,
    Font,
    Xml,
    VertexShader,
    FragmentShader,
    GeometryShader,
    ComputeShader
  }

}

}
