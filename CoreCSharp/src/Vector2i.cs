//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Vector2i : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector2i(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector2i obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Vector2i obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Vector2i() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Vector2i(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Vector2i operator+(Vector2i a, Vector2i b) { return Core.OperatorAdd(a, b); }

    public static Vector2i operator-(Vector2i m) { return Core.OperatorSub(m); }

    public static Vector2i operator-(Vector2i a, Vector2i b) { return Core.OperatorSub(a, b); }

    public static Vector2i operator*(Vector2i a, int b) { return Core.OperatorMul(a, b); }

    public static Vector2i operator*(int a, Vector2i b) { return Core.OperatorMul(b, a); }

    public static Vector2i operator*(Vector2i a, Vector2i b) { return Core.OperatorMul(a, b); }

    public static Vector2 operator/(Vector2i a, Vector2i b) { return Core.OperatorDiv(a, b); }

    public static Vector2 operator/(Vector2i a, float b) { return Core.OperatorDiv(a, b); }

    public static bool operator==(Vector2i a, Vector2i b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Vector2i a, Vector2i b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Vector2i) obj;
    }

    public override int GetHashCode() { return HashCode.Combine(x, y); }

    public static explicit operator Vector2(Vector2i v) { return v.ToVector2(); }

    public static explicit operator Vector3(Vector2i v) { return v.ToVector3(); }

    public static explicit operator Vector4(Vector2i v) { return v.ToVector4(); }

  public int x {
    set {
      CorePINVOKE.Vector2i_x_set(swigCPtr, value);
    } 
    get {
      int ret = CorePINVOKE.Vector2i_x_get(swigCPtr);
      return ret;
    } 
  }

  public int y {
    set {
      CorePINVOKE.Vector2i_y_set(swigCPtr, value);
    } 
    get {
      int ret = CorePINVOKE.Vector2i_y_get(swigCPtr);
      return ret;
    } 
  }

  public static Vector2i Zero() {
    Vector2i ret = new Vector2i(CorePINVOKE.Vector2i_Zero(), true);
    return ret;
  }

  public static Vector2i UnitX() {
    Vector2i ret = new Vector2i(CorePINVOKE.Vector2i_UnitX(), true);
    return ret;
  }

  public static Vector2i UnitY() {
    Vector2i ret = new Vector2i(CorePINVOKE.Vector2i_UnitY(), true);
    return ret;
  }

  public static float Dot(Vector2i a, Vector2i b) {
    float ret = CorePINVOKE.Vector2i_Dot(Vector2i.getCPtr(a), Vector2i.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Cross(Vector2i a, Vector2i b) {
    float ret = CorePINVOKE.Vector2i_Cross(Vector2i.getCPtr(a), Vector2i.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Determinant(Vector2i a, Vector2i b) {
    float ret = CorePINVOKE.Vector2i_Determinant(Vector2i.getCPtr(a), Vector2i.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2i() : this(CorePINVOKE.new_Vector2i__SWIG_0(), true) {
  }

  public Vector2i(int xy) : this(CorePINVOKE.new_Vector2i__SWIG_1(xy), true) {
  }

  public Vector2i(SWIGTYPE_p_int data) : this(CorePINVOKE.new_Vector2i__SWIG_2(SWIGTYPE_p_int.getCPtr(data)), true) {
  }

  public Vector2i(int x, int y) : this(CorePINVOKE.new_Vector2i__SWIG_3(x, y), true) {
  }

  public float Length() {
    float ret = CorePINVOKE.Vector2i_Length(swigCPtr);
    return ret;
  }

  public float SquaredLength() {
    float ret = CorePINVOKE.Vector2i_SquaredLength(swigCPtr);
    return ret;
  }

  public Vector2 Normalized() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2i_Normalized(swigCPtr), true);
    return ret;
  }

  public Vector2 Normal() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2i_Normal(swigCPtr), true);
    return ret;
  }

  public int OperatorIndex(uint i) {
    int ret = CorePINVOKE.Vector2i_OperatorIndex(swigCPtr, i);
    return ret;
  }

  private Vector2 ToVector2() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2i_ToVector2(swigCPtr), true);
    return ret;
  }

  private Vector3 ToVector3() {
    Vector3 ret = new Vector3(CorePINVOKE.Vector2i_ToVector3(swigCPtr), true);
    return ret;
  }

  private Vector4 ToVector4() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector2i_ToVector4(swigCPtr), true);
    return ret;
  }

}

}
