//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class ResourceManager : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ResourceManager(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ResourceManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ResourceManager obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ResourceManager() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void LoadAll() {
    CorePINVOKE.ResourceManager_LoadAll();
  }

  public static bool Contains(string name) {
    bool ret = CorePINVOKE.ResourceManager_Contains__SWIG_0(name);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Contains(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CorePINVOKE.ResourceManager_Contains__SWIG_1(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rename(string name, string newName) {
    CorePINVOKE.ResourceManager_Rename__SWIG_0(name, newName);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Rename(SWIGTYPE_p_XnorCore__PointerT_XnorCore__Resource_t resource, string newName) {
    CorePINVOKE.ResourceManager_Rename__SWIG_1(SWIGTYPE_p_XnorCore__PointerT_XnorCore__Resource_t.getCPtr(resource), newName);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Unload(string name) {
    CorePINVOKE.ResourceManager_Unload(name);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void UnloadAll() {
    CorePINVOKE.ResourceManager_UnloadAll();
  }

  public static readonly string ReservedShaderPrefix = CorePINVOKE.ResourceManager_ReservedShaderPrefix_get();
}

}
