//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Vector4 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector4(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector4 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Vector4 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Vector4() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Vector4(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Vector4 operator+(Vector4 a, Vector4 b) { return Core.OperatorAdd(a, b); }

    public static Vector4 operator-(Vector4 m) { return Core.OperatorSub(m); }

    public static Vector4 operator-(Vector4 a, Vector4 b) { return Core.OperatorSub(a, b); }

    public static Vector4 operator*(Vector4 a, float b) { return Core.OperatorMul(a, b); }

    public static Vector4 operator*(float a, Vector4 b) { return Core.OperatorMul(b, a); }

    public static Vector4 operator*(Vector4 a, Vector4 b) { return Core.OperatorMul(a, b); }

    public static Vector4 operator/(Vector4 a, Vector4 b) { return Core.OperatorDiv(a, b); }

    public static Vector4 operator/(Vector4 a, float b) { return Core.OperatorDiv(a, b); }

    public static bool operator==(Vector4 a, Vector4 b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Vector4 a, Vector4 b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Vector4) obj;
    }

    public override int GetHashCode() { return HashCode.Combine(x, y, z, w); }

    public static explicit operator Vector2(Vector4 v) { return v.ToVector2(); }

    public static explicit operator Vector3(Vector4 v) { return v.ToVector3(); }

    public static explicit operator Matrix(Vector4 v) { return v.ToMatrix(); }

  public float x {
    set {
      CorePINVOKE.Vector4_x_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector4_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      CorePINVOKE.Vector4_y_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector4_y_get(swigCPtr);
      return ret;
    } 
  }

  public float z {
    set {
      CorePINVOKE.Vector4_z_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector4_z_get(swigCPtr);
      return ret;
    } 
  }

  public float w {
    set {
      CorePINVOKE.Vector4_w_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector4_w_get(swigCPtr);
      return ret;
    } 
  }

  public static Vector4 Zero() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_Zero__SWIG_0(), true);
    return ret;
  }

  public static void Zero(Vector4 result) {
    CorePINVOKE.Vector4_Zero__SWIG_1(Vector4.getCPtr(result));
  }

  public static Vector4 UnitX() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_UnitX__SWIG_0(), true);
    return ret;
  }

  public static void UnitX(Vector4 result) {
    CorePINVOKE.Vector4_UnitX__SWIG_1(Vector4.getCPtr(result));
  }

  public static Vector4 UnitY() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_UnitY__SWIG_0(), true);
    return ret;
  }

  public static void UnitY(Vector4 result) {
    CorePINVOKE.Vector4_UnitY__SWIG_1(Vector4.getCPtr(result));
  }

  public static Vector4 UnitZ() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_UnitZ__SWIG_0(), true);
    return ret;
  }

  public static void UnitZ(Vector4 result) {
    CorePINVOKE.Vector4_UnitZ__SWIG_1(Vector4.getCPtr(result));
  }

  public static Vector4 UnitW() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_UnitW__SWIG_0(), true);
    return ret;
  }

  public static void UnitW(Vector4 result) {
    CorePINVOKE.Vector4_UnitW__SWIG_1(Vector4.getCPtr(result));
  }

  public Vector4() : this(CorePINVOKE.new_Vector4__SWIG_0(), true) {
  }

  public Vector4(float xyzw) : this(CorePINVOKE.new_Vector4__SWIG_1(xyzw), true) {
  }

  public Vector4(SWIGTYPE_p_float data) : this(CorePINVOKE.new_Vector4__SWIG_2(SWIGTYPE_p_float.getCPtr(data)), true) {
  }

  public Vector4(float x, float y, float z, float w) : this(CorePINVOKE.new_Vector4__SWIG_3(x, y, z, w), true) {
  }

  public float Length() {
    float ret = CorePINVOKE.Vector4_Length(swigCPtr);
    return ret;
  }

  public float SquaredLength() {
    float ret = CorePINVOKE.Vector4_SquaredLength(swigCPtr);
    return ret;
  }

  public Vector4 Normalized() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_Normalized__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Normalized(Vector4 result) {
    CorePINVOKE.Vector4_Normalized__SWIG_1(swigCPtr, Vector4.getCPtr(result));
  }

  public bool IsInfinity() {
    bool ret = CorePINVOKE.Vector4_IsInfinity(swigCPtr);
    return ret;
  }

  public bool IsNaN() {
    bool ret = CorePINVOKE.Vector4_IsNaN(swigCPtr);
    return ret;
  }

  public static float Dot(Vector4 a, Vector4 b) {
    float ret = CorePINVOKE.Vector4_Dot(Vector4.getCPtr(a), Vector4.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector4 Lerp(Vector4 value, Vector4 target, float t) {
    Vector4 ret = new Vector4(CorePINVOKE.Vector4_Lerp__SWIG_0(Vector4.getCPtr(value), Vector4.getCPtr(target), t), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Lerp(Vector4 value, Vector4 target, float t, Vector4 result) {
    CorePINVOKE.Vector4_Lerp__SWIG_1(Vector4.getCPtr(value), Vector4.getCPtr(target), t, Vector4.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public float OperatorIndex(uint i) {
    float ret = CorePINVOKE.Vector4_OperatorIndex(swigCPtr, i);
    return ret;
  }

  private Vector2 ToVector2() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector4_ToVector2(swigCPtr), true);
    return ret;
  }

  private Vector3 ToVector3() {
    Vector3 ret = new Vector3(CorePINVOKE.Vector4_ToVector3(swigCPtr), true);
    return ret;
  }

  private Matrix ToMatrix() {
    Matrix ret = new Matrix(CorePINVOKE.Vector4_ToMatrix(swigCPtr), true);
    return ret;
  }

}

}
