//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Colorf : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Colorf(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Colorf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Colorf obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Colorf() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Colorf(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Colorf operator+(Colorf a, Colorf b) { return Core.OperatorAdd(a, b); }

    public static Colorf operator*(Colorf a, Colorf b) { return Core.OperatorMul(a, b); }

    public static Colorf operator*(Colorf c, float alphaFactor) { return Core.OperatorMul(c, alphaFactor); }

    public static explicit operator ColorRgb(Colorf color) { return color.ToColorRgb(); }

    public static explicit operator ColorRgba(Colorf color) { return color.ToColorRgba(); }

    public static explicit operator ColorHsva(Colorf color) { return color.ToColorHsva(); }

    public static explicit operator Vector3(Colorf color) { return color.ToVector3(); }

    public static explicit operator Vector4(Colorf color) { return color.ToVector4(); }

  public static Colorf White() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_White(), true);
    return ret;
  }

  public static Colorf Gray() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Gray(), true);
    return ret;
  }

  public static Colorf Black() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Black(), true);
    return ret;
  }

  public static Colorf Red() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Red(), true);
    return ret;
  }

  public static Colorf Green() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Green(), true);
    return ret;
  }

  public static Colorf Blue() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Blue(), true);
    return ret;
  }

  public static Colorf Yellow() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Yellow(), true);
    return ret;
  }

  public static Colorf Cyan() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Cyan(), true);
    return ret;
  }

  public static Colorf Magenta() {
    Colorf ret = new Colorf(CorePINVOKE.Colorf_Magenta(), true);
    return ret;
  }

  public float r {
    set {
      CorePINVOKE.Colorf_r_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Colorf_r_get(swigCPtr);
      return ret;
    } 
  }

  public float g {
    set {
      CorePINVOKE.Colorf_g_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Colorf_g_get(swigCPtr);
      return ret;
    } 
  }

  public float b {
    set {
      CorePINVOKE.Colorf_b_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Colorf_b_get(swigCPtr);
      return ret;
    } 
  }

  public float a {
    set {
      CorePINVOKE.Colorf_a_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Colorf_a_get(swigCPtr);
      return ret;
    } 
  }

  public Colorf() : this(CorePINVOKE.new_Colorf__SWIG_0(), true) {
  }

  public Colorf(float r, float g, float b, float a) : this(CorePINVOKE.new_Colorf__SWIG_1(r, g, b, a), true) {
  }

  public Colorf(float r, float g, float b) : this(CorePINVOKE.new_Colorf__SWIG_2(r, g, b), true) {
  }

  private ColorRgb ToColorRgb() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.Colorf_ToColorRgb(swigCPtr), true);
    return ret;
  }

  private ColorRgba ToColorRgba() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.Colorf_ToColorRgba(swigCPtr), true);
    return ret;
  }

  private ColorHsva ToColorHsva() {
    ColorHsva ret = new ColorHsva(CorePINVOKE.Colorf_ToColorHsva(swigCPtr), true);
    return ret;
  }

  private Vector3 ToVector3() {
    Vector3 ret = new Vector3(CorePINVOKE.Colorf_ToVector3(swigCPtr), true);
    return ret;
  }

  private Vector4 ToVector4() {
    Vector4 ret = new Vector4(CorePINVOKE.Colorf_ToVector4(swigCPtr), true);
    return ret;
  }

}

}
