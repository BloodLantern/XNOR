//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Vector2 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector2(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Vector2 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Vector2 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Vector2() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Vector2(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Vector2 operator+(Vector2 a, Vector2 b) { return Core.OperatorAdd(a, b); }

    public static Vector2 operator-(Vector2 m) { return Core.OperatorSub(m); }

    public static Vector2 operator-(Vector2 a, Vector2 b) { return Core.OperatorSub(a, b); }

    public static Vector2 operator*(Vector2 a, Vector2 b) { return Core.OperatorMul(a, b); }

    public static Vector2 operator*(Vector2 a, float b) { return Core.OperatorMul(a, b); }

    public static Vector2 operator*(float a, Vector2 b) { return Core.OperatorMul(b, a); }

    public static Vector2 operator/(Vector2 a, Vector2 b) { return Core.OperatorDiv(a, b); }

    public static Vector2 operator/(Vector2 a, float b) { return Core.OperatorDiv(a, b); }

    public static bool operator==(Vector2 a, Vector2 b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Vector2 a, Vector2 b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Vector2) obj;
    }

    public override int GetHashCode() { return HashCode.Combine(x, y); }

    public static explicit operator Vector2i(Vector2 v) { return v.ToVector2i(); }

    public static explicit operator Vector3(Vector2 v) { return v.ToVector3(); }

    public static explicit operator Vector4(Vector2 v) { return v.ToVector4(); }

  public float x {
    set {
      CorePINVOKE.Vector2_x_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector2_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      CorePINVOKE.Vector2_y_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Vector2_y_get(swigCPtr);
      return ret;
    } 
  }

  public static Vector2 Zero() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_Zero(), true);
    return ret;
  }

  public static Vector2 UnitX() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_UnitX(), true);
    return ret;
  }

  public static Vector2 UnitY() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_UnitY(), true);
    return ret;
  }

  public static float Dot(Vector2 a, Vector2 b) {
    float ret = CorePINVOKE.Vector2_Dot(Vector2.getCPtr(a), Vector2.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Cross(Vector2 a, Vector2 b) {
    float ret = CorePINVOKE.Vector2_Cross(Vector2.getCPtr(a), Vector2.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float Determinant(Vector2 a, Vector2 b) {
    float ret = CorePINVOKE.Vector2_Determinant(Vector2.getCPtr(a), Vector2.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Vector2 Lerp(Vector2 value, Vector2 target, float t) {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_Lerp(Vector2.getCPtr(value), Vector2.getCPtr(target), t), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2() : this(CorePINVOKE.new_Vector2__SWIG_0(), true) {
  }

  public Vector2(float xy) : this(CorePINVOKE.new_Vector2__SWIG_1(xy), true) {
  }

  public Vector2(SWIGTYPE_p_float data) : this(CorePINVOKE.new_Vector2__SWIG_2(SWIGTYPE_p_float.getCPtr(data)), true) {
  }

  public Vector2(float x, float y) : this(CorePINVOKE.new_Vector2__SWIG_3(x, y), true) {
  }

  public float Length() {
    float ret = CorePINVOKE.Vector2_Length(swigCPtr);
    return ret;
  }

  public float SquaredLength() {
    float ret = CorePINVOKE.Vector2_SquaredLength(swigCPtr);
    return ret;
  }

  public Vector2 Normalized() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_Normalized(swigCPtr), true);
    return ret;
  }

  public Vector2 Normal() {
    Vector2 ret = new Vector2(CorePINVOKE.Vector2_Normal(swigCPtr), true);
    return ret;
  }

  public bool IsInfinity() {
    bool ret = CorePINVOKE.Vector2_IsInfinity(swigCPtr);
    return ret;
  }

  public bool IsNaN() {
    bool ret = CorePINVOKE.Vector2_IsNaN(swigCPtr);
    return ret;
  }

  public float OperatorIndex(uint i) {
    float ret = CorePINVOKE.Vector2_OperatorIndex(swigCPtr, i);
    return ret;
  }

  private Vector2i ToVector2i() {
    Vector2i ret = new Vector2i(CorePINVOKE.Vector2_ToVector2i(swigCPtr), true);
    return ret;
  }

  private Vector3 ToVector3() {
    Vector3 ret = new Vector3(CorePINVOKE.Vector2_ToVector3(swigCPtr), true);
    return ret;
  }

  private Vector4 ToVector4() {
    Vector4 ret = new Vector4(CorePINVOKE.Vector2_ToVector4(swigCPtr), true);
    return ret;
  }

}

}
