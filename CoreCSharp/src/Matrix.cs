//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Matrix : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matrix(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Matrix obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Matrix obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Matrix() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Matrix(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Matrix operator+(Matrix a, Matrix b) { return Core.OperatorAdd(a, b); }

    public static Matrix operator-(Matrix m) { return Core.OperatorSub(m); }

    public static Matrix operator-(Matrix a, Matrix b) { return Core.OperatorSub(a, b); }

    public static Matrix operator*(Matrix a, float b) { return Core.OperatorMul(a, b); }

    public static Matrix operator*(float a, Matrix b) { return Core.OperatorMul(b, a); }

    public static Vector3 operator*(Matrix a, Vector3 b) { return Core.OperatorMul(a, b); }

    public static Vector4 operator*(Matrix a, Vector4 b) { return Core.OperatorMul(a, b); }

    public static Matrix operator*(Matrix a, Matrix b) { return Core.OperatorMul(a, b); }

    public static bool operator==(Matrix a, Matrix b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Matrix a, Matrix b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Matrix) obj;
    }

    public override int GetHashCode()
    {
        HashCode hash = new();

        hash.Add(m00);
        hash.Add(m01);
        hash.Add(m02);
        hash.Add(m03);

        hash.Add(m10);
        hash.Add(m11);
        hash.Add(m12);
        hash.Add(m13);

        hash.Add(m20);
        hash.Add(m21);
        hash.Add(m22);
        hash.Add(m23);

        hash.Add(m30);
        hash.Add(m31);
        hash.Add(m32);
        hash.Add(m33);

        return hash.ToHashCode();
    }

    public static explicit operator Matrix3(Matrix m) { return m.ToMatrix3(); }

  public float m00 {
    set {
      CorePINVOKE.Matrix_m00_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m00_get(swigCPtr);
      return ret;
    } 
  }

  public float m10 {
    set {
      CorePINVOKE.Matrix_m10_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m10_get(swigCPtr);
      return ret;
    } 
  }

  public float m20 {
    set {
      CorePINVOKE.Matrix_m20_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m20_get(swigCPtr);
      return ret;
    } 
  }

  public float m30 {
    set {
      CorePINVOKE.Matrix_m30_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m30_get(swigCPtr);
      return ret;
    } 
  }

  public float m01 {
    set {
      CorePINVOKE.Matrix_m01_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m01_get(swigCPtr);
      return ret;
    } 
  }

  public float m11 {
    set {
      CorePINVOKE.Matrix_m11_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m11_get(swigCPtr);
      return ret;
    } 
  }

  public float m21 {
    set {
      CorePINVOKE.Matrix_m21_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m21_get(swigCPtr);
      return ret;
    } 
  }

  public float m31 {
    set {
      CorePINVOKE.Matrix_m31_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m31_get(swigCPtr);
      return ret;
    } 
  }

  public float m02 {
    set {
      CorePINVOKE.Matrix_m02_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m02_get(swigCPtr);
      return ret;
    } 
  }

  public float m12 {
    set {
      CorePINVOKE.Matrix_m12_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m12_get(swigCPtr);
      return ret;
    } 
  }

  public float m22 {
    set {
      CorePINVOKE.Matrix_m22_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m22_get(swigCPtr);
      return ret;
    } 
  }

  public float m32 {
    set {
      CorePINVOKE.Matrix_m32_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m32_get(swigCPtr);
      return ret;
    } 
  }

  public float m03 {
    set {
      CorePINVOKE.Matrix_m03_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m03_get(swigCPtr);
      return ret;
    } 
  }

  public float m13 {
    set {
      CorePINVOKE.Matrix_m13_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m13_get(swigCPtr);
      return ret;
    } 
  }

  public float m23 {
    set {
      CorePINVOKE.Matrix_m23_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m23_get(swigCPtr);
      return ret;
    } 
  }

  public float m33 {
    set {
      CorePINVOKE.Matrix_m33_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix_m33_get(swigCPtr);
      return ret;
    } 
  }

  public static Matrix Identity() {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Identity__SWIG_0(), true);
    return ret;
  }

  public static void Identity(Matrix result) {
    CorePINVOKE.Matrix_Identity__SWIG_1(Matrix.getCPtr(result));
  }

  public static Matrix Translation(Vector3 translation) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Translation__SWIG_0(Vector3.getCPtr(translation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Translation(Vector3 translation, Matrix result) {
    CorePINVOKE.Matrix_Translation__SWIG_1(Vector3.getCPtr(translation), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Rotation(float angle, Vector3 axis) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Rotation__SWIG_0(angle, Vector3.getCPtr(axis)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(float angle, Vector3 axis, Matrix result) {
    CorePINVOKE.Matrix_Rotation__SWIG_1(angle, Vector3.getCPtr(axis), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix RotationX(float angle) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationX__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationX(float angle, Matrix result) {
    CorePINVOKE.Matrix_RotationX__SWIG_1(angle, Matrix.getCPtr(result));
  }

  public static Matrix RotationX(float cos, float sin) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationX__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationX(float cos, float sin, Matrix result) {
    CorePINVOKE.Matrix_RotationX__SWIG_3(cos, sin, Matrix.getCPtr(result));
  }

  public static Matrix RotationY(float angle) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationY__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationY(float angle, Matrix result) {
    CorePINVOKE.Matrix_RotationY__SWIG_1(angle, Matrix.getCPtr(result));
  }

  public static Matrix RotationY(float cos, float sin) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationY__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationY(float cos, float sin, Matrix result) {
    CorePINVOKE.Matrix_RotationY__SWIG_3(cos, sin, Matrix.getCPtr(result));
  }

  public static Matrix RotationZ(float angle) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationZ__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationZ(float angle, Matrix result) {
    CorePINVOKE.Matrix_RotationZ__SWIG_1(angle, Matrix.getCPtr(result));
  }

  public static Matrix RotationZ(float cos, float sin) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_RotationZ__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationZ(float cos, float sin, Matrix result) {
    CorePINVOKE.Matrix_RotationZ__SWIG_3(cos, sin, Matrix.getCPtr(result));
  }

  public static Matrix Rotation(Vector3 rotation) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Rotation__SWIG_2(Vector3.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(Vector3 rotation, Matrix result) {
    CorePINVOKE.Matrix_Rotation__SWIG_3(Vector3.getCPtr(rotation), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Rotation(Quaternion rotation) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Rotation__SWIG_4(Quaternion.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(Quaternion rotation, Matrix result) {
    CorePINVOKE.Matrix_Rotation__SWIG_5(Quaternion.getCPtr(rotation), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Rotation(float cos, float sin, Vector3 axis) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Rotation__SWIG_6(cos, sin, Vector3.getCPtr(axis)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(float cos, float sin, Vector3 axis, Matrix result) {
    CorePINVOKE.Matrix_Rotation__SWIG_7(cos, sin, Vector3.getCPtr(axis), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Scaling(Vector3 scale) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Scaling__SWIG_0(Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Scaling(Vector3 scale, Matrix result) {
    CorePINVOKE.Matrix_Scaling__SWIG_1(Vector3.getCPtr(scale), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Trs(Vector3 translation, Vector3 rotation, Vector3 scale) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Trs__SWIG_0(Vector3.getCPtr(translation), Vector3.getCPtr(rotation), Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Trs(Vector3 translation, Vector3 rotation, Vector3 scale, Matrix result) {
    CorePINVOKE.Matrix_Trs__SWIG_1(Vector3.getCPtr(translation), Vector3.getCPtr(rotation), Vector3.getCPtr(scale), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Trs(Vector3 translation, float rotationAngle, Vector3 rotationAxis, Vector3 scale) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Trs__SWIG_2(Vector3.getCPtr(translation), rotationAngle, Vector3.getCPtr(rotationAxis), Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Trs(Vector3 translation, float rotationAngle, Vector3 rotationAxis, Vector3 scale, Matrix result) {
    CorePINVOKE.Matrix_Trs__SWIG_3(Vector3.getCPtr(translation), rotationAngle, Vector3.getCPtr(rotationAxis), Vector3.getCPtr(scale), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Trs(Vector3 translation, Matrix rotation, Vector3 scale) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Trs__SWIG_4(Vector3.getCPtr(translation), Matrix.getCPtr(rotation), Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Trs(Vector3 translation, Matrix rotation, Vector3 scale, Matrix result) {
    CorePINVOKE.Matrix_Trs__SWIG_5(Vector3.getCPtr(translation), Matrix.getCPtr(rotation), Vector3.getCPtr(scale), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Trs(Vector3 translation, Quaternion rotation, Vector3 scale) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Trs__SWIG_6(Vector3.getCPtr(translation), Quaternion.getCPtr(rotation), Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Trs(Vector3 translation, Quaternion rotation, Vector3 scale, Matrix result) {
    CorePINVOKE.Matrix_Trs__SWIG_7(Vector3.getCPtr(translation), Quaternion.getCPtr(rotation), Vector3.getCPtr(scale), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix LookAt(Vector3 eye, Vector3 center, Vector3 up) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_LookAt__SWIG_0(Vector3.getCPtr(eye), Vector3.getCPtr(center), Vector3.getCPtr(up)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void LookAt(Vector3 eye, Vector3 center, Vector3 up, Matrix result) {
    CorePINVOKE.Matrix_LookAt__SWIG_1(Vector3.getCPtr(eye), Vector3.getCPtr(center), Vector3.getCPtr(up), Matrix.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix Perspective(float fov, float aspectRatio, float near, float far) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Perspective__SWIG_0(fov, aspectRatio, near, far), true);
    return ret;
  }

  public static void Perspective(float fov, float aspectRatio, float near, float far, Matrix result) {
    CorePINVOKE.Matrix_Perspective__SWIG_1(fov, aspectRatio, near, far, Matrix.getCPtr(result));
  }

  public static Matrix Orthographic(float left, float right, float bottom, float top, float near, float far) {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Orthographic__SWIG_0(left, right, bottom, top, near, far), true);
    return ret;
  }

  public static void Orthographic(float left, float right, float bottom, float top, float near, float far, Matrix result) {
    CorePINVOKE.Matrix_Orthographic__SWIG_1(left, right, bottom, top, near, far, Matrix.getCPtr(result));
  }

  public bool Decompose(Vector3 translation, Quaternion orientation, Vector3 scale, Vector3 skew, Vector4 perspective) {
    bool ret = CorePINVOKE.Matrix_Decompose(swigCPtr, Vector3.getCPtr(translation), Quaternion.getCPtr(orientation), Vector3.getCPtr(scale), Vector3.getCPtr(skew), Vector4.getCPtr(perspective));
    return ret;
  }

  public Matrix() : this(CorePINVOKE.new_Matrix__SWIG_0(), true) {
  }

  public Matrix(float defaultValue) : this(CorePINVOKE.new_Matrix__SWIG_1(defaultValue), true) {
  }

  public Matrix(SWIGTYPE_p_float data) : this(CorePINVOKE.new_Matrix__SWIG_2(SWIGTYPE_p_float.getCPtr(data)), true) {
  }

  public Matrix(Vector4 c0, Vector4 c1, Vector4 c2, Vector4 c3) : this(CorePINVOKE.new_Matrix__SWIG_3(Vector4.getCPtr(c0), Vector4.getCPtr(c1), Vector4.getCPtr(c2), Vector4.getCPtr(c3)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33) : this(CorePINVOKE.new_Matrix__SWIG_4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33), true) {
  }

  public void DebugPrint() {
    CorePINVOKE.Matrix_DebugPrint(swigCPtr);
  }

  public bool IsDiagonal() {
    bool ret = CorePINVOKE.Matrix_IsDiagonal(swigCPtr);
    return ret;
  }

  public bool IsIdentity() {
    bool ret = CorePINVOKE.Matrix_IsIdentity(swigCPtr);
    return ret;
  }

  public bool IsNull() {
    bool ret = CorePINVOKE.Matrix_IsNull(swigCPtr);
    return ret;
  }

  public bool IsSymmetric() {
    bool ret = CorePINVOKE.Matrix_IsSymmetric(swigCPtr);
    return ret;
  }

  public bool IsAntisymmetric() {
    bool ret = CorePINVOKE.Matrix_IsAntisymmetric(swigCPtr);
    return ret;
  }

  public Vector4 Diagonal() {
    Vector4 ret = new Vector4(CorePINVOKE.Matrix_Diagonal__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Diagonal(Vector4 result) {
    CorePINVOKE.Matrix_Diagonal__SWIG_1(swigCPtr, Vector4.getCPtr(result));
  }

  public float Trace() {
    float ret = CorePINVOKE.Matrix_Trace(swigCPtr);
    return ret;
  }

  public float Determinant() {
    float ret = CorePINVOKE.Matrix_Determinant(swigCPtr);
    return ret;
  }

  public Matrix Transposed() {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Transposed__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Transposed(Matrix result) {
    CorePINVOKE.Matrix_Transposed__SWIG_1(swigCPtr, Matrix.getCPtr(result));
  }

  public Matrix Inverted() {
    Matrix ret = new Matrix(CorePINVOKE.Matrix_Inverted__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Inverted(Matrix result) {
    CorePINVOKE.Matrix_Inverted__SWIG_1(swigCPtr, Matrix.getCPtr(result));
  }

  public float At(uint row, uint col) {
    float ret = CorePINVOKE.Matrix_At(swigCPtr, row, col);
    return ret;
  }

  public Vector4 OperatorIndex(uint col) {
    Vector4 ret = new Vector4(CorePINVOKE.Matrix_OperatorIndex(swigCPtr, col), true);
    return ret;
  }

  private Matrix3 ToMatrix3() {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix_ToMatrix3(swigCPtr), true);
    return ret;
  }

}

}
