//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Matrix3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Matrix3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Matrix3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Matrix3 obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Matrix3() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Matrix3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Matrix3 operator+(Matrix3 a, Matrix3 b) { return Core.OperatorAdd(a, b); }

    public static Matrix3 operator-(Matrix3 m) { return Core.OperatorSub(m); }

    public static Matrix3 operator-(Matrix3 a, Matrix3 b) { return Core.OperatorSub(a, b); }

    public static Matrix3 operator*(Matrix3 a, float b) { return Core.OperatorMul(a, b); }

    public static Matrix3 operator*(float a, Matrix3 b) { return Core.OperatorMul(b, a); }

    public static Vector3 operator*(Matrix3 a, Vector3 b) { return Core.OperatorMul(a, b); }

    public static Matrix3 operator*(Matrix3 a, Matrix3 b) { return Core.OperatorMul(a, b); }

    public static bool operator==(Matrix3 a, Matrix3 b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Matrix3 a, Matrix3 b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Matrix3) obj;
    }

    public override int GetHashCode()
    {
        HashCode hash = new();

        hash.Add(m00);
        hash.Add(m01);
        hash.Add(m02);

        hash.Add(m10);
        hash.Add(m11);
        hash.Add(m12);

        hash.Add(m20);
        hash.Add(m21);
        hash.Add(m22);

        return hash.ToHashCode();
    }

    public static explicit operator Matrix(Matrix3 m) { return m.ToMatrix(); }

  public float m00 {
    set {
      CorePINVOKE.Matrix3_m00_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m00_get(swigCPtr);
      return ret;
    } 
  }

  public float m10 {
    set {
      CorePINVOKE.Matrix3_m10_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m10_get(swigCPtr);
      return ret;
    } 
  }

  public float m20 {
    set {
      CorePINVOKE.Matrix3_m20_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m20_get(swigCPtr);
      return ret;
    } 
  }

  public float m01 {
    set {
      CorePINVOKE.Matrix3_m01_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m01_get(swigCPtr);
      return ret;
    } 
  }

  public float m11 {
    set {
      CorePINVOKE.Matrix3_m11_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m11_get(swigCPtr);
      return ret;
    } 
  }

  public float m21 {
    set {
      CorePINVOKE.Matrix3_m21_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m21_get(swigCPtr);
      return ret;
    } 
  }

  public float m02 {
    set {
      CorePINVOKE.Matrix3_m02_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m02_get(swigCPtr);
      return ret;
    } 
  }

  public float m12 {
    set {
      CorePINVOKE.Matrix3_m12_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m12_get(swigCPtr);
      return ret;
    } 
  }

  public float m22 {
    set {
      CorePINVOKE.Matrix3_m22_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Matrix3_m22_get(swigCPtr);
      return ret;
    } 
  }

  public static Matrix3 Identity() {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Identity__SWIG_0(), true);
    return ret;
  }

  public static void Identity(Matrix3 result) {
    CorePINVOKE.Matrix3_Identity__SWIG_1(Matrix3.getCPtr(result));
  }

  public static Matrix3 Rotation(float angle, Vector3 axis) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Rotation__SWIG_0(angle, Vector3.getCPtr(axis)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(float angle, Vector3 axis, Matrix3 result) {
    CorePINVOKE.Matrix3_Rotation__SWIG_1(angle, Vector3.getCPtr(axis), Matrix3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix3 RotationX(float angle) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationX__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationX(float angle, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationX__SWIG_1(angle, Matrix3.getCPtr(result));
  }

  public static Matrix3 RotationX(float cos, float sin) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationX__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationX(float cos, float sin, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationX__SWIG_3(cos, sin, Matrix3.getCPtr(result));
  }

  public static Matrix3 RotationY(float angle) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationY__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationY(float angle, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationY__SWIG_1(angle, Matrix3.getCPtr(result));
  }

  public static Matrix3 RotationY(float cos, float sin) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationY__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationY(float cos, float sin, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationY__SWIG_3(cos, sin, Matrix3.getCPtr(result));
  }

  public static Matrix3 RotationZ(float angle) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationZ__SWIG_0(angle), true);
    return ret;
  }

  public static void RotationZ(float angle, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationZ__SWIG_1(angle, Matrix3.getCPtr(result));
  }

  public static Matrix3 RotationZ(float cos, float sin) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_RotationZ__SWIG_2(cos, sin), true);
    return ret;
  }

  public static void RotationZ(float cos, float sin, Matrix3 result) {
    CorePINVOKE.Matrix3_RotationZ__SWIG_3(cos, sin, Matrix3.getCPtr(result));
  }

  public static Matrix3 Rotation(Vector3 rotation) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Rotation__SWIG_2(Vector3.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(Vector3 rotation, Matrix3 result) {
    CorePINVOKE.Matrix3_Rotation__SWIG_3(Vector3.getCPtr(rotation), Matrix3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix3 Rotation(Quaternion rotation) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Rotation__SWIG_4(Quaternion.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(Quaternion rotation, Matrix3 result) {
    CorePINVOKE.Matrix3_Rotation__SWIG_5(Quaternion.getCPtr(rotation), Matrix3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix3 Rotation(float cos, float sin, Vector3 axis) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Rotation__SWIG_6(cos, sin, Vector3.getCPtr(axis)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotation(float cos, float sin, Vector3 axis, Matrix3 result) {
    CorePINVOKE.Matrix3_Rotation__SWIG_7(cos, sin, Vector3.getCPtr(axis), Matrix3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Matrix3 Scaling(Vector3 scale) {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Scaling__SWIG_0(Vector3.getCPtr(scale)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Scaling(Vector3 scale, Matrix3 result) {
    CorePINVOKE.Matrix3_Scaling__SWIG_1(Vector3.getCPtr(scale), Matrix3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix3() : this(CorePINVOKE.new_Matrix3__SWIG_0(), true) {
  }

  public Matrix3(float defaultValue) : this(CorePINVOKE.new_Matrix3__SWIG_1(defaultValue), true) {
  }

  public Matrix3(SWIGTYPE_p_float data) : this(CorePINVOKE.new_Matrix3__SWIG_2(SWIGTYPE_p_float.getCPtr(data)), true) {
  }

  public Matrix3(Vector3 c0, Vector3 c1, Vector3 c2) : this(CorePINVOKE.new_Matrix3__SWIG_3(Vector3.getCPtr(c0), Vector3.getCPtr(c1), Vector3.getCPtr(c2)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Matrix3(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22) : this(CorePINVOKE.new_Matrix3__SWIG_4(m00, m01, m02, m10, m11, m12, m20, m21, m22), true) {
  }

  public void DebugPrint() {
    CorePINVOKE.Matrix3_DebugPrint(swigCPtr);
  }

  public bool IsDiagonal() {
    bool ret = CorePINVOKE.Matrix3_IsDiagonal(swigCPtr);
    return ret;
  }

  public bool IsIdentity() {
    bool ret = CorePINVOKE.Matrix3_IsIdentity(swigCPtr);
    return ret;
  }

  public bool IsNull() {
    bool ret = CorePINVOKE.Matrix3_IsNull(swigCPtr);
    return ret;
  }

  public bool IsSymmetric() {
    bool ret = CorePINVOKE.Matrix3_IsSymmetric(swigCPtr);
    return ret;
  }

  public bool IsAntisymmetric() {
    bool ret = CorePINVOKE.Matrix3_IsAntisymmetric(swigCPtr);
    return ret;
  }

  public Vector3 Diagonal() {
    Vector3 ret = new Vector3(CorePINVOKE.Matrix3_Diagonal__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Diagonal(Vector3 result) {
    CorePINVOKE.Matrix3_Diagonal__SWIG_1(swigCPtr, Vector3.getCPtr(result));
  }

  public float Trace() {
    float ret = CorePINVOKE.Matrix3_Trace(swigCPtr);
    return ret;
  }

  public float Determinant() {
    float ret = CorePINVOKE.Matrix3_Determinant(swigCPtr);
    return ret;
  }

  public Matrix3 Transposed() {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Transposed__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Transposed(Matrix3 result) {
    CorePINVOKE.Matrix3_Transposed__SWIG_1(swigCPtr, Matrix3.getCPtr(result));
  }

  public Matrix3 Inverted() {
    Matrix3 ret = new Matrix3(CorePINVOKE.Matrix3_Inverted__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Inverted(Matrix3 result) {
    CorePINVOKE.Matrix3_Inverted__SWIG_1(swigCPtr, Matrix3.getCPtr(result));
  }

  public float At(uint row, uint col) {
    float ret = CorePINVOKE.Matrix3_At(swigCPtr, row, col);
    return ret;
  }

  public Vector3 OperatorIndex(uint col) {
    Vector3 ret = new Vector3(CorePINVOKE.Matrix3_OperatorIndex(swigCPtr, col), true);
    return ret;
  }

  private Matrix ToMatrix() {
    Matrix ret = new Matrix(CorePINVOKE.Matrix3_ToMatrix(swigCPtr), true);
    return ret;
  }

}

}
