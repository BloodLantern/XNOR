//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class ColorRgba : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorRgba(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorRgba obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ColorRgba obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ColorRgba() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_ColorRgba(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static ColorRgba operator+(ColorRgba a, ColorRgba b) { return Core.OperatorAdd(a, b); }

    public static ColorRgba operator*(ColorRgba a, ColorRgba b) { return Core.OperatorMul(a, b); }

    public static ColorRgba operator*(ColorRgba c, float alphaFactor) { return Core.OperatorMul(c, alphaFactor); }

    public static explicit operator ColorRgb(ColorRgba color) { return color.ToColorRgb(); }

    public static explicit operator ColorHsva(ColorRgba color) { return color.ToColorHsva(); }

    public static explicit operator Colorf(ColorRgba color) { return color.ToColorf(); }

  public static ColorRgba White() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_White(), true);
    return ret;
  }

  public static ColorRgba Gray() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Gray(), true);
    return ret;
  }

  public static ColorRgba Black() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Black(), true);
    return ret;
  }

  public static ColorRgba Red() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Red(), true);
    return ret;
  }

  public static ColorRgba Green() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Green(), true);
    return ret;
  }

  public static ColorRgba Blue() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Blue(), true);
    return ret;
  }

  public static ColorRgba Yellow() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Yellow(), true);
    return ret;
  }

  public static ColorRgba Cyan() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Cyan(), true);
    return ret;
  }

  public static ColorRgba Magenta() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorRgba_Magenta(), true);
    return ret;
  }

  public byte r {
    set {
      CorePINVOKE.ColorRgba_r_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorRgba_r_get(swigCPtr);
      return ret;
    } 
  }

  public byte g {
    set {
      CorePINVOKE.ColorRgba_g_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorRgba_g_get(swigCPtr);
      return ret;
    } 
  }

  public byte b {
    set {
      CorePINVOKE.ColorRgba_b_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorRgba_b_get(swigCPtr);
      return ret;
    } 
  }

  public byte a {
    set {
      CorePINVOKE.ColorRgba_a_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorRgba_a_get(swigCPtr);
      return ret;
    } 
  }

  public ColorRgba() : this(CorePINVOKE.new_ColorRgba__SWIG_0(), true) {
  }

  public ColorRgba(uint rgba) : this(CorePINVOKE.new_ColorRgba__SWIG_1(rgba), true) {
  }

  public ColorRgba(byte r, byte g, byte b, byte a) : this(CorePINVOKE.new_ColorRgba__SWIG_2(r, g, b, a), true) {
  }

  public ColorRgba(byte r, byte g, byte b) : this(CorePINVOKE.new_ColorRgba__SWIG_3(r, g, b), true) {
  }

  private ColorRgb ToColorRgb() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorRgba_ToColorRgb(swigCPtr), true);
    return ret;
  }

  private ColorHsva ToColorHsva() {
    ColorHsva ret = new ColorHsva(CorePINVOKE.ColorRgba_ToColorHsva(swigCPtr), true);
    return ret;
  }

  private Colorf ToColorf() {
    Colorf ret = new Colorf(CorePINVOKE.ColorRgba_ToColorf(swigCPtr), true);
    return ret;
  }

}

}
