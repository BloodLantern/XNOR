//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Entry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Entry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Entry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Entry obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Entry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Entry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool Load() {
    bool ret = CorePINVOKE.Entry_Load(swigCPtr);
    return ret;
  }

  public virtual void Unload() {
    CorePINVOKE.Entry_Unload(swigCPtr);
  }

  public virtual bool Reload() {
    bool ret = CorePINVOKE.Entry_Reload(swigCPtr);
    return ret;
  }

  public virtual void OpenInExplorer() {
    CorePINVOKE.Entry_OpenInExplorer(swigCPtr);
  }

  public SWIGTYPE_p_std__filesystem__path GetPath() {
    SWIGTYPE_p_std__filesystem__path ret = new SWIGTYPE_p_std__filesystem__path(CorePINVOKE.Entry_GetPath(swigCPtr), false);
    return ret;
  }

  public string GetPathString() {
    string ret = CorePINVOKE.Entry_GetPathString(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = CorePINVOKE.Entry_GetName(swigCPtr);
    return ret;
  }

  public virtual void SetName(string newName) {
    CorePINVOKE.Entry_SetName(swigCPtr, newName);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetLoaded() {
    bool ret = CorePINVOKE.Entry_GetLoaded(swigCPtr);
    return ret;
  }

  public virtual void SetParent(SWIGTYPE_p_XnorCore__PointerT_XnorCore__Directory_t newParent) {
    CorePINVOKE.Entry_SetParent(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Directory_t.swigRelease(newParent));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Directory_t GetParent() {
    SWIGTYPE_p_XnorCore__PointerT_XnorCore__Directory_t ret = new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Directory_t(CorePINVOKE.Entry_GetParent(swigCPtr), true);
    return ret;
  }

}

}
