//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Model : Resource {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Model(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.Model_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Model obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class Aabb : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Aabb(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Aabb obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Aabb obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~Aabb() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            CorePINVOKE.delete_Model_Aabb(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Vector3 min {
      set {
        CorePINVOKE.Model_Aabb_min_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = CorePINVOKE.Model_Aabb_min_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public Vector3 max {
      set {
        CorePINVOKE.Model_Aabb_max_set(swigCPtr, Vector3.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = CorePINVOKE.Model_Aabb_max_get(swigCPtr);
        Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
        return ret;
      } 
    }
  
    public Aabb() : this(CorePINVOKE.new_Model_Aabb(), true) {
    }
  
  }

  public static SWIGTYPE_p_std__arrayT_char_const_p_58_t FileExtensions {
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Model_FileExtensions_get();
      SWIGTYPE_p_std__arrayT_char_const_p_58_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__arrayT_char_const_p_58_t(cPtr, false);
      return ret;
    } 
  }

  public Model() : this(CorePINVOKE.new_Model__SWIG_0(), true) {
  }

  public Model(string name) : this(CorePINVOKE.new_Model__SWIG_1(name), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool Load(SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t file) {
    bool ret = CorePINVOKE.Model_Load__SWIG_0(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__File_t.getCPtr(file));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Load(SWIGTYPE_p_unsigned_char buffer, long length) {
    bool ret = CorePINVOKE.Model_Load__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(buffer), length);
    return ret;
  }

  public bool Load(SWIGTYPE_p_aiMesh loadedData) {
    bool ret = CorePINVOKE.Model_Load__SWIG_2(swigCPtr, SWIGTYPE_p_aiMesh.getCPtr(loadedData));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void CreateInRhi() {
    CorePINVOKE.Model_CreateInRhi(swigCPtr);
  }

  public override void DestroyInRhi() {
    CorePINVOKE.Model_DestroyInRhi(swigCPtr);
  }

  public override void Unload() {
    CorePINVOKE.Model_Unload(swigCPtr);
  }

  public uint GetId() {
    uint ret = CorePINVOKE.Model_GetId(swigCPtr);
    return ret;
  }

  public Model.Aabb GetAabb() {
    Model.Aabb ret = new Model.Aabb(CorePINVOKE.Model_GetAabb(swigCPtr), true);
    return ret;
  }

}

}
