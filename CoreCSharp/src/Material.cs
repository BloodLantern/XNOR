//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Material : Serializable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Material(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.Material_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Material obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Material obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Material(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MaterialType materialType {
    set {
      CorePINVOKE.Material_materialType_set(swigCPtr, (int)value);
    } 
    get {
      MaterialType ret = (MaterialType)CorePINVOKE.Material_materialType_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t albedoTexture {
    set {
      CorePINVOKE.Material_albedoTexture_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_albedoTexture_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t metallicTexture {
    set {
      CorePINVOKE.Material_metallicTexture_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_metallicTexture_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t roughnessTexture {
    set {
      CorePINVOKE.Material_roughnessTexture_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_roughnessTexture_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t normalTexture {
    set {
      CorePINVOKE.Material_normalTexture_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_normalTexture_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ambiantOcclusionTexture {
    set {
      CorePINVOKE.Material_ambiantOcclusionTexture_set(swigCPtr, SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_ambiantOcclusionTexture_get(swigCPtr);
      SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_XnorCore__PointerT_XnorCore__Texture_t(cPtr, false);
      return ret;
    } 
  }

  public Colorf albedoColor {
    set {
      CorePINVOKE.Material_albedoColor_set(swigCPtr, Colorf.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Material_albedoColor_get(swigCPtr);
      Colorf ret = (cPtr == global::System.IntPtr.Zero) ? null : new Colorf(cPtr, false);
      return ret;
    } 
  }

  public float metallic {
    set {
      CorePINVOKE.Material_metallic_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Material_metallic_get(swigCPtr);
      return ret;
    } 
  }

  public float roughness {
    set {
      CorePINVOKE.Material_roughness_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Material_roughness_get(swigCPtr);
      return ret;
    } 
  }

  public float reflectance {
    set {
      CorePINVOKE.Material_reflectance_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Material_reflectance_get(swigCPtr);
      return ret;
    } 
  }

  public float emissive {
    set {
      CorePINVOKE.Material_emissive_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Material_emissive_get(swigCPtr);
      return ret;
    } 
  }

  public float ambientOcclusion {
    set {
      CorePINVOKE.Material_ambientOcclusion_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Material_ambientOcclusion_get(swigCPtr);
      return ret;
    } 
  }

}

}
