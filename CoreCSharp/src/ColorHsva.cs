//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class ColorHsva : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ColorHsva(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColorHsva obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ColorHsva obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ColorHsva() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_ColorHsva(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static ColorHsva operator*(ColorHsva c, float alphaFactor) { return Core.OperatorMul(c, alphaFactor); }

    public static explicit operator ColorRgb(ColorHsva color) { return color.ToColorRgb(); }

    public static explicit operator ColorRgba(ColorHsva color) { return color.ToColorRgba(); }

    public static explicit operator Colorf(ColorHsva color) { return color.ToColorf(); }

  public byte h {
    set {
      CorePINVOKE.ColorHsva_h_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorHsva_h_get(swigCPtr);
      return ret;
    } 
  }

  public byte s {
    set {
      CorePINVOKE.ColorHsva_s_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorHsva_s_get(swigCPtr);
      return ret;
    } 
  }

  public byte v {
    set {
      CorePINVOKE.ColorHsva_v_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorHsva_v_get(swigCPtr);
      return ret;
    } 
  }

  public byte a {
    set {
      CorePINVOKE.ColorHsva_a_set(swigCPtr, value);
    } 
    get {
      byte ret = CorePINVOKE.ColorHsva_a_get(swigCPtr);
      return ret;
    } 
  }

  public ColorHsva() : this(CorePINVOKE.new_ColorHsva__SWIG_0(), true) {
  }

  public ColorHsva(uint hsva) : this(CorePINVOKE.new_ColorHsva__SWIG_1(hsva), true) {
  }

  public ColorHsva(byte h, byte s, byte v, byte a) : this(CorePINVOKE.new_ColorHsva__SWIG_2(h, s, v, a), true) {
  }

  public ColorHsva(byte h, byte s, byte v) : this(CorePINVOKE.new_ColorHsva__SWIG_3(h, s, v), true) {
  }

  private ColorRgb ToColorRgb() {
    ColorRgb ret = new ColorRgb(CorePINVOKE.ColorHsva_ToColorRgb(swigCPtr), true);
    return ret;
  }

  private ColorRgba ToColorRgba() {
    ColorRgba ret = new ColorRgba(CorePINVOKE.ColorHsva_ToColorRgba(swigCPtr), true);
    return ret;
  }

  private Colorf ToColorf() {
    Colorf ret = new Colorf(CorePINVOKE.ColorHsva_ToColorf(swigCPtr), true);
    return ret;
  }

}

}
