//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Quaternion : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Quaternion(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Quaternion obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Quaternion obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Quaternion() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Quaternion(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    public static Quaternion operator+(Quaternion a, Quaternion b) { return Core.OperatorAdd(a, b); }

    public static Quaternion operator-(Quaternion m) { return Core.OperatorSub(m); }

    public static Quaternion operator-(Quaternion a, Quaternion b) { return Core.OperatorSub(a, b); }

    public static Quaternion operator*(Quaternion a, float b) { return Core.OperatorMul(a, b); }

    public static Quaternion operator*(float a, Quaternion b) { return Core.OperatorMul(b, a); }

    public static Quaternion operator*(Quaternion a, Quaternion b) { return Core.OperatorMul(a, b); }

    public static Quaternion operator/(Quaternion a, float b) { return Core.OperatorDiv(a, b); }

    public static bool operator==(Quaternion a, Quaternion b) { return Core.OperatorEq(a, b); }

    public static bool operator!=(Quaternion a, Quaternion b) { return Core.OperatorNotEq(a, b); }

    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        if (obj.GetType() != this.GetType()) return false;
        return this == (Quaternion) obj;
    }

    public override int GetHashCode() { return HashCode.Combine(X(), Y(), Z(), W()); }

    public static explicit operator Vector3(Quaternion q) { return q.ToVector3(); }

    public static explicit operator Vector4(Quaternion q) { return q.ToVector4(); }

  public Vector3 imaginary {
    set {
      CorePINVOKE.Quaternion_imaginary_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Quaternion_imaginary_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public float real {
    set {
      CorePINVOKE.Quaternion_real_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Quaternion_real_get(swigCPtr);
      return ret;
    } 
  }

  public static Quaternion Zero() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Zero__SWIG_0(), true);
    return ret;
  }

  public static void Zero(Quaternion result) {
    CorePINVOKE.Quaternion_Zero__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion UnitX() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_UnitX__SWIG_0(), true);
    return ret;
  }

  public static void UnitX(Quaternion result) {
    CorePINVOKE.Quaternion_UnitX__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion UnitY() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_UnitY__SWIG_0(), true);
    return ret;
  }

  public static void UnitY(Quaternion result) {
    CorePINVOKE.Quaternion_UnitY__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion UnitZ() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_UnitZ__SWIG_0(), true);
    return ret;
  }

  public static void UnitZ(Quaternion result) {
    CorePINVOKE.Quaternion_UnitZ__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion UnitW() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_UnitW__SWIG_0(), true);
    return ret;
  }

  public static void UnitW(Quaternion result) {
    CorePINVOKE.Quaternion_UnitW__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion Identity() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Identity__SWIG_0(), true);
    return ret;
  }

  public static void Identity(Quaternion result) {
    CorePINVOKE.Quaternion_Identity__SWIG_1(Quaternion.getCPtr(result));
  }

  public static Quaternion FromAxisAngle(Vector3 axis, float angle) {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_FromAxisAngle__SWIG_0(Vector3.getCPtr(axis), angle), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FromAxisAngle(Vector3 axis, float angle, Quaternion result) {
    CorePINVOKE.Quaternion_FromAxisAngle__SWIG_1(Vector3.getCPtr(axis), angle, Quaternion.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Quaternion FromEuler(Vector3 rotation) {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_FromEuler__SWIG_0(Vector3.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FromEuler(Vector3 rotation, Quaternion result) {
    CorePINVOKE.Quaternion_FromEuler__SWIG_1(Vector3.getCPtr(rotation), Quaternion.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Quaternion FromRotationMatrix(Matrix rotation) {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_FromRotationMatrix__SWIG_0(Matrix.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FromRotationMatrix(Matrix rotation, Quaternion result) {
    CorePINVOKE.Quaternion_FromRotationMatrix__SWIG_1(Matrix.getCPtr(rotation), Quaternion.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Vector3 ToEuler(Quaternion rotation) {
    Vector3 ret = new Vector3(CorePINVOKE.Quaternion_ToEuler__SWIG_0(Quaternion.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ToEuler(Quaternion rotation, Vector3 result) {
    CorePINVOKE.Quaternion_ToEuler__SWIG_1(Quaternion.getCPtr(rotation), Vector3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static float Dot(Quaternion a, Quaternion b) {
    float ret = CorePINVOKE.Quaternion_Dot(Quaternion.getCPtr(a), Quaternion.getCPtr(b));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Quaternion Lerp(Quaternion value, Quaternion target, float t) {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Lerp__SWIG_0(Quaternion.getCPtr(value), Quaternion.getCPtr(target), t), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Lerp(Quaternion value, Quaternion target, float t, Quaternion result) {
    CorePINVOKE.Quaternion_Lerp__SWIG_1(Quaternion.getCPtr(value), Quaternion.getCPtr(target), t, Quaternion.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Quaternion Slerp(Quaternion value, Quaternion target, float t) {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Slerp__SWIG_0(Quaternion.getCPtr(value), Quaternion.getCPtr(target), t), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Slerp(Quaternion value, Quaternion target, float t, Quaternion result) {
    CorePINVOKE.Quaternion_Slerp__SWIG_1(Quaternion.getCPtr(value), Quaternion.getCPtr(target), t, Quaternion.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public static Vector3 Rotate(Vector3 point, Quaternion rotation) {
    Vector3 ret = new Vector3(CorePINVOKE.Quaternion_Rotate__SWIG_0(Vector3.getCPtr(point), Quaternion.getCPtr(rotation)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Rotate(Vector3 point, Quaternion rotation, Vector3 result) {
    CorePINVOKE.Quaternion_Rotate__SWIG_1(Vector3.getCPtr(point), Quaternion.getCPtr(rotation), Vector3.getCPtr(result));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion() : this(CorePINVOKE.new_Quaternion__SWIG_0(), true) {
  }

  public Quaternion(Vector4 values) : this(CorePINVOKE.new_Quaternion__SWIG_1(Vector4.getCPtr(values)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Vector3 imaginary, float real) : this(CorePINVOKE.new_Quaternion__SWIG_2(Vector3.getCPtr(imaginary), real), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(Vector3 imaginary) : this(CorePINVOKE.new_Quaternion__SWIG_3(Vector3.getCPtr(imaginary)), true) {
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion(float xyzw) : this(CorePINVOKE.new_Quaternion__SWIG_4(xyzw), true) {
  }

  public Quaternion(SWIGTYPE_p_float data) : this(CorePINVOKE.new_Quaternion__SWIG_5(SWIGTYPE_p_float.getCPtr(data)), true) {
  }

  public Quaternion(float x, float y, float z, float w) : this(CorePINVOKE.new_Quaternion__SWIG_6(x, y, z, w), true) {
  }

  public float X() {
    float ret = CorePINVOKE.Quaternion_X(swigCPtr);
    return ret;
  }

  public float Y() {
    float ret = CorePINVOKE.Quaternion_Y(swigCPtr);
    return ret;
  }

  public float Z() {
    float ret = CorePINVOKE.Quaternion_Z(swigCPtr);
    return ret;
  }

  public float W() {
    float ret = CorePINVOKE.Quaternion_W(swigCPtr);
    return ret;
  }

  public Quaternion Conjugate() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Conjugate__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Conjugate(Quaternion result) {
    CorePINVOKE.Quaternion_Conjugate__SWIG_1(swigCPtr, Quaternion.getCPtr(result));
  }

  public Quaternion Normalized() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Normalized__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Normalized(Quaternion result) {
    CorePINVOKE.Quaternion_Normalized__SWIG_1(swigCPtr, Quaternion.getCPtr(result));
  }

  public float Length() {
    float ret = CorePINVOKE.Quaternion_Length(swigCPtr);
    return ret;
  }

  public float SquaredLength() {
    float ret = CorePINVOKE.Quaternion_SquaredLength(swigCPtr);
    return ret;
  }

  public bool IsInfinity() {
    bool ret = CorePINVOKE.Quaternion_IsInfinity(swigCPtr);
    return ret;
  }

  public bool IsNaN() {
    bool ret = CorePINVOKE.Quaternion_IsNaN(swigCPtr);
    return ret;
  }

  public Quaternion Inverted() {
    Quaternion ret = new Quaternion(CorePINVOKE.Quaternion_Inverted__SWIG_0(swigCPtr), true);
    return ret;
  }

  public void Inverted(Quaternion result) {
    CorePINVOKE.Quaternion_Inverted__SWIG_1(swigCPtr, Quaternion.getCPtr(result));
  }

  public float OperatorIndex(uint i) {
    float ret = CorePINVOKE.Quaternion_OperatorIndex(swigCPtr, i);
    return ret;
  }

  private Vector3 ToVector3() {
    Vector3 ret = new Vector3(CorePINVOKE.Quaternion_ToVector3(swigCPtr), true);
    return ret;
  }

  private Vector4 ToVector4() {
    Vector4 ret = new Vector4(CorePINVOKE.Quaternion_ToVector4(swigCPtr), true);
    return ret;
  }

}

}
