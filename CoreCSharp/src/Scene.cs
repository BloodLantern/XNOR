//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Scene : Serializable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Scene(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.Scene_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Scene obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Scene obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Scene(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public static Skybox skybox {
    set {
      CorePINVOKE.Scene_skybox_set(Skybox.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Scene_skybox_get();
      Skybox ret = (cPtr == global::System.IntPtr.Zero) ? null : new Skybox(cPtr, false);
      return ret;
    } 
  }

  public Scene() : this(CorePINVOKE.new_Scene(), true) {
  }

  public void Begin() {
    CorePINVOKE.Scene_Begin(swigCPtr);
  }

  public void Update() {
    CorePINVOKE.Scene_Update(swigCPtr);
  }

  public Entity GetEntityById(Guid xnorGuid) {
    global::System.IntPtr cPtr = CorePINVOKE.Scene_GetEntityById(swigCPtr, Guid.getCPtr(xnorGuid));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity CreateEntity(SWIGTYPE_p_std__string name, Entity parent) {
    global::System.IntPtr cPtr = CorePINVOKE.Scene_CreateEntity__SWIG_0(swigCPtr, SWIGTYPE_p_std__string.swigRelease(name), Entity.getCPtr(parent));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Entity CreateEntity(SWIGTYPE_p_std__string name) {
    global::System.IntPtr cPtr = CorePINVOKE.Scene_CreateEntity__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.swigRelease(name));
    Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Entity(cPtr, false);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DestroyEntity(Entity entity) {
    CorePINVOKE.Scene_DestroyEntity(swigCPtr, Entity.getCPtr(entity));
  }

  public bool HasEntity(Entity entity) {
    bool ret = CorePINVOKE.Scene_HasEntity(swigCPtr, Entity.getCPtr(entity));
    return ret;
  }

  public SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t GetEntities() {
    SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t ret = new SWIGTYPE_p_XnorCore__ListT_XnorCore__Entity_p_t(CorePINVOKE.Scene_GetEntities(swigCPtr), false);
    return ret;
  }

  public uint GetEntityIndex(Entity entity) {
    uint ret = CorePINVOKE.Scene_GetEntityIndex(swigCPtr, Entity.getCPtr(entity));
    return ret;
  }

}

}
