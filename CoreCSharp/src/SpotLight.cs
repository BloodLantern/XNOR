//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class SpotLight : Light {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SpotLight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(CorePINVOKE.SpotLight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpotLight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SpotLight obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_SpotLight(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public float cutOff {
    set {
      CorePINVOKE.SpotLight_cutOff_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.SpotLight_cutOff_get(swigCPtr);
      return ret;
    } 
  }

  public float outerCutOff {
    set {
      CorePINVOKE.SpotLight_outerCutOff_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.SpotLight_outerCutOff_get(swigCPtr);
      return ret;
    } 
  }

  public SpotLight() : this(CorePINVOKE.new_SpotLight(), true) {
  }

}

}
