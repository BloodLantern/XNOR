//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Xnor.Core {

public class Camera : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Camera(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Camera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Camera obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~Camera() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CorePINVOKE.delete_Camera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Vector3 position {
    set {
      CorePINVOKE.Camera_position_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Camera_position_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 front {
    set {
      CorePINVOKE.Camera_front_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Camera_front_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 up {
    set {
      CorePINVOKE.Camera_up_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Camera_up_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public Vector3 right {
    set {
      CorePINVOKE.Camera_right_set(swigCPtr, Vector3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = CorePINVOKE.Camera_right_get(swigCPtr);
      Vector3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new Vector3(cPtr, false);
      return ret;
    } 
  }

  public float near {
    set {
      CorePINVOKE.Camera_near_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Camera_near_get(swigCPtr);
      return ret;
    } 
  }

  public float far {
    set {
      CorePINVOKE.Camera_far_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Camera_far_get(swigCPtr);
      return ret;
    } 
  }

  public float fov {
    set {
      CorePINVOKE.Camera_fov_set(swigCPtr, value);
    } 
    get {
      float ret = CorePINVOKE.Camera_fov_get(swigCPtr);
      return ret;
    } 
  }

  public void GetProjection(Vector2i screenSize, Matrix matrix) {
    CorePINVOKE.Camera_GetProjection(swigCPtr, Vector2i.getCPtr(screenSize), Matrix.getCPtr(matrix));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetView(Matrix matrix) {
    CorePINVOKE.Camera_GetView(swigCPtr, Matrix.getCPtr(matrix));
  }

  public void GetVp(Vector2i screenSize, Matrix matrix) {
    CorePINVOKE.Camera_GetVp(swigCPtr, Vector2i.getCPtr(screenSize), Matrix.getCPtr(matrix));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LookAt(Vector3 at) {
    CorePINVOKE.Camera_LookAt(swigCPtr, Vector3.getCPtr(at));
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2i ProjectOn(Vector3 vertex, Vector2i screenSize, Matrix model) {
    Vector2i ret = new Vector2i(CorePINVOKE.Camera_ProjectOn(swigCPtr, Vector3.getCPtr(vertex), Vector2i.getCPtr(screenSize), Matrix.getCPtr(model)), true);
    if (CorePINVOKE.SWIGPendingException.Pending) throw CorePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Camera() : this(CorePINVOKE.new_Camera(), true) {
  }

}

}
